/* parse generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parse errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parse (grammar) errors will also provide these members, i.e. parse errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parse has a error recovery rule available for this particular error)
  }
*/
var sqlParser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,8],$V1=[1,4],$V2=[2,4],$V3=[1,11],$V4=[1,10],$V5=[2,16],$V6=[1,14],$V7=[1,15],$V8=[1,16],$V9=[6,8],$Va=[2,148],$Vb=[1,19],$Vc=[1,20],$Vd=[16,33,35,36,37,38,39,40,41,42,45,46,50,51,53,55,57,58,60,61,63,78,81,83,84,85,86,88,89,90,103],$Ve=[16,18,32,33,35,36,37,38,39,40,41,42,45,46,50,51,53,55,57,58,60,61,63,78,81,83,84,85,86,88,89,90,103],$Vf=[2,162],$Vg=[1,29],$Vh=[6,8,14,17,148,152,154,156],$Vi=[1,42],$Vj=[1,62],$Vk=[1,52],$Vl=[1,60],$Vm=[1,59],$Vn=[1,61],$Vo=[1,63],$Vp=[1,64],$Vq=[1,65],$Vr=[1,66],$Vs=[1,67],$Vt=[1,58],$Vu=[1,53],$Vv=[1,54],$Vw=[1,55],$Vx=[1,56],$Vy=[1,57],$Vz=[1,43],$VA=[1,44],$VB=[1,45],$VC=[1,34],$VD=[16,35,36,37,38,39,40,41,42,45,46,50,51,53,55,57,58,60,61,63,78,81,83,84,85,86,88,89,90,103],$VE=[6,8,14,17,152,154,156],$VF=[2,145],$VG=[1,76],$VH=[1,77],$VI=[6,8,14,17,43,135,140,146,148,152,154,156],$VJ=[1,82],$VK=[1,79],$VL=[1,80],$VM=[1,81],$VN=[1,83],$VO=[6,8,14,17,36,43,49,50,51,73,74,76,79,91,109,126,127,128,129,131,135,137,140,143,144,146,148,152,154,156,159,166,167,169,170,175,179,181,182,184],$VP=[6,8,14,17,34,36,43,49,50,51,73,74,76,79,91,109,114,115,116,117,118,119,123,126,127,128,129,131,135,137,140,143,144,146,148,152,154,156,159,166,167,169,170,175,179,181,182,184],$VQ=[1,104],$VR=[1,102],$VS=[1,103],$VT=[1,98],$VU=[1,99],$VV=[1,100],$VW=[1,101],$VX=[1,105],$VY=[1,106],$VZ=[1,107],$V_=[1,108],$V$=[1,109],$V01=[1,110],$V11=[2,105],$V21=[6,8,14,17,34,36,43,45,49,50,51,73,74,76,79,81,83,91,93,94,95,96,97,98,99,100,101,103,107,108,109,110,111,112,114,115,116,117,118,119,123,126,127,128,129,131,135,137,140,143,144,146,148,152,154,156,159,166,167,169,170,175,179,181,182,184],$V31=[6,8,14,17,34,36,43,45,49,50,51,73,74,76,79,81,83,91,93,94,95,96,97,98,99,100,101,103,105,107,108,109,110,111,112,114,115,116,117,118,119,123,126,127,128,129,131,135,137,140,143,144,146,148,152,154,156,159,166,167,169,170,175,179,181,182,184],$V41=[1,111],$V51=[1,118],$V61=[2,66],$V71=[1,119],$V81=[16,35,37,38,39,40,41,42,45,46,50,51,53,55,57,58,60,61,63,78,81,83,84,85,86,88,89,90,103],$V91=[16,29,35,50,51,53,55,57,58,60,61,63,78,81,83,84,85,86,88,89,90,121],$Va1=[1,165],$Vb1=[17,43],$Vc1=[2,61],$Vd1=[1,174],$Ve1=[1,172],$Vf1=[1,173],$Vg1=[6,8,140,148],$Vh1=[16,35,38,39,40,41,42,45,46,50,51,53,55,57,58,60,61,63,78,81,83,84,85,86,88,89,90,103],$Vi1=[6,8,14,17,140,146,148,152,154,156],$Vj1=[6,8,14,17,36,43,49,50,51,73,74,76,79,91,127,128,129,131,135,137,140,143,144,146,148,152,154,156,159,166,167,169,170,175,179,181,182,184],$Vk1=[6,8,14,17,34,36,43,49,50,51,73,74,76,79,91,93,94,95,96,101,103,107,108,109,110,111,112,114,115,116,117,118,119,123,126,127,128,129,131,135,137,140,143,144,146,148,152,154,156,159,166,167,169,170,175,179,181,182,184],$Vl1=[6,8,14,17,34,36,43,49,50,51,73,74,76,79,81,83,91,93,94,95,96,101,103,107,108,109,110,111,112,114,115,116,117,118,119,123,126,127,128,129,131,135,137,140,143,144,146,148,152,154,156,159,166,167,169,170,175,179,181,182,184],$Vm1=[16,35,39,40,41,42,45,46,50,51,53,55,57,58,60,61,63,78,81,83,84,85,86,88,89,90,103],$Vn1=[16,35,40,41,42,45,46,50,51,53,55,57,58,60,61,63,78,81,83,84,85,86,88,89,90,103],$Vo1=[16,35,42,45,46,50,51,53,55,57,58,60,61,63,78,81,83,84,85,86,88,89,90,103],$Vp1=[73,76,79],$Vq1=[16,35,45,46,50,51,53,55,57,58,60,61,63,78,81,83,84,85,86,88,89,90,103],$Vr1=[1,234],$Vs1=[1,235],$Vt1=[6,8,14,17],$Vu1=[6,8,14,17,43,159],$Vv1=[1,252],$Vw1=[1,248],$Vx1=[2,199],$Vy1=[1,256],$Vz1=[1,257],$VA1=[6,8,14,17,43,131,137,140,146,148,152,154,156,184],$VB1=[1,259],$VC1=[1,262],$VD1=[1,263],$VE1=[1,264],$VF1=[1,265],$VG1=[2,176],$VH1=[1,261],$VI1=[6,8,14,17,36,43,91,131,137,140,146,148,152,154,156,166,167,169,170,175,179,181,182,184],$VJ1=[6,8,14,17,137,140,146,148,152,154,156],$VK1=[1,277],$VL1=[2,181],$VM1=[172,175],$VN1=[6,8,14,17,36,43,91,131,137,140,146,148,152,154,156,166,167,169,170,175,179,181,182,184,194,195,196],$VO1=[2,201],$VP1=[1,282],$VQ1=[1,294],$VR1=[1,302],$VS1=[1,303],$VT1=[1,304],$VU1=[6,8,14,17,140,148,152,154,156],$VV1=[1,314],$VW1=[1,320],$VX1=[1,321],$VY1=[2,206],$VZ1=[1,332],$V_1=[16,154],$V$1=[6,8,14,17,154,156],$V02=[1,348];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"main":3,"selectClause":4,"semicolonOpt":5,"EOF":6,"unionClause":7,";":8,"unionClauseNotParenthesized":9,"unionClauseParenthesized":10,"order_by_opt":11,"limit_opt":12,"selectClauseParenthesized":13,"UNION":14,"distinctOpt":15,"(":16,")":17,"SELECT":18,"highPriorityOpt":19,"maxStateMentTimeOpt":20,"straightJoinOpt":21,"sqlSmallResultOpt":22,"sqlBigResultOpt":23,"sqlBufferResultOpt":24,"sqlCacheOpt":25,"sqlCalcFoundRowsOpt":26,"selectExprList":27,"selectDataSetOpt":28,"ALL":29,"DISTINCT":30,"DISTINCTROW":31,"HIGH_PRIORITY":32,"MAX_STATEMENT_TIME":33,"=":34,"NUMERIC":35,"STRAIGHT_JOIN":36,"SQL_SMALL_RESULT":37,"SQL_BIG_RESULT":38,"SQL_BUFFER_RESULT":39,"SQL_CACHE":40,"SQL_NO_CACHE":41,"SQL_CALC_FOUND_ROWS":42,",":43,"selectExpr":44,"*":45,"SELECT_EXPR_STAR":46,"expr":47,"selectExprAliasOpt":48,"AS":49,"IDENTIFIER":50,"QUOTED_IDENTIFIER":51,"date":52,"DATE":53,"string":54,"STRING":55,"number":56,"EXPONENT_NUMERIC":57,"HEX_NUMERIC":58,"boolean":59,"TRUE":60,"FALSE":61,"null":62,"NULL":63,"literal":64,"function_call":65,"function_call_param_list":66,"function_call_param":67,"identifier":68,"DOT":69,"identifier_list":70,"case_expr_opt":71,"when_then_list":72,"WHEN":73,"THEN":74,"case_when_else":75,"ELSE":76,"case_when":77,"CASE":78,"END":79,"simple_expr_prefix":80,"+":81,"simple_expr":82,"-":83,"~":84,"!":85,"BINARY":86,"expr_list":87,"ROW":88,"EXISTS":89,"{":90,"}":91,"bit_expr":92,"|":93,"&":94,"<<":95,">>":96,"/":97,"DIV":98,"MOD":99,"%":100,"^":101,"not_opt":102,"NOT":103,"escape_opt":104,"ESCAPE":105,"predicate":106,"IN":107,"BETWEEN":108,"AND":109,"SOUNDS":110,"LIKE":111,"REGEXP":112,"comparison_operator":113,">=":114,">":115,"<=":116,"<":117,"<>":118,"!=":119,"sub_query_data_set_opt":120,"ANY":121,"boolean_primary":122,"IS":123,"boolean_extra":124,"UNKNOWN":125,"&&":126,"||":127,"OR":128,"XOR":129,"where_opt":130,"WHERE":131,"group_by_opt":132,"group_by":133,"roll_up_opt":134,"WITH":135,"ROLLUP":136,"GROUP_BY":137,"group_by_order_by_item_list":138,"order_by":139,"ORDER_BY":140,"group_by_order_by_item":141,"sort_opt":142,"ASC":143,"DESC":144,"having_opt":145,"HAVING":146,"limit":147,"LIMIT":148,"OFFSET":149,"procedure_opt":150,"procedure":151,"PROCEDURE":152,"for_update_lock_in_share_mode_opt":153,"FOR":154,"UPDATE":155,"LOCK":156,"SHARE":157,"MODE":158,"FROM":159,"table_references":160,"partitionOpt":161,"escaped_table_reference":162,"table_reference":163,"OJ":164,"join_inner_cross":165,"INNER":166,"CROSS":167,"left_right":168,"LEFT":169,"RIGHT":170,"out_opt":171,"OUTER":172,"left_right_out_opt":173,"join_table":174,"JOIN":175,"table_factor":176,"join_condition":177,"on_join_condition":178,"NATURAL":179,"join_condition_opt":180,"ON":181,"USING":182,"partition_names":183,"PARTITION":184,"aliasOpt":185,"index_or_key":186,"INDEX":187,"KEY":188,"for_opt":189,"identifier_list_opt":190,"index_hint_list_opt":191,"index_hint_list":192,"index_hint":193,"USE":194,"IGNORE":195,"FORCE":196,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",8:";",14:"UNION",16:"(",17:")",18:"SELECT",29:"ALL",30:"DISTINCT",31:"DISTINCTROW",32:"HIGH_PRIORITY",33:"MAX_STATEMENT_TIME",34:"=",35:"NUMERIC",36:"STRAIGHT_JOIN",37:"SQL_SMALL_RESULT",38:"SQL_BIG_RESULT",39:"SQL_BUFFER_RESULT",40:"SQL_CACHE",41:"SQL_NO_CACHE",42:"SQL_CALC_FOUND_ROWS",43:",",45:"*",46:"SELECT_EXPR_STAR",49:"AS",50:"IDENTIFIER",51:"QUOTED_IDENTIFIER",53:"DATE",55:"STRING",57:"EXPONENT_NUMERIC",58:"HEX_NUMERIC",60:"TRUE",61:"FALSE",63:"NULL",69:"DOT",73:"WHEN",74:"THEN",76:"ELSE",78:"CASE",79:"END",81:"+",83:"-",84:"~",85:"!",86:"BINARY",88:"ROW",89:"EXISTS",90:"{",91:"}",93:"|",94:"&",95:"<<",96:">>",97:"/",98:"DIV",99:"MOD",100:"%",101:"^",103:"NOT",105:"ESCAPE",107:"IN",108:"BETWEEN",109:"AND",110:"SOUNDS",111:"LIKE",112:"REGEXP",114:">=",115:">",116:"<=",117:"<",118:"<>",119:"!=",121:"ANY",123:"IS",125:"UNKNOWN",126:"&&",127:"||",128:"OR",129:"XOR",131:"WHERE",135:"WITH",136:"ROLLUP",137:"GROUP_BY",140:"ORDER_BY",143:"ASC",144:"DESC",146:"HAVING",148:"LIMIT",149:"OFFSET",152:"PROCEDURE",154:"FOR",155:"UPDATE",156:"LOCK",157:"SHARE",158:"MODE",159:"FROM",164:"OJ",166:"INNER",167:"CROSS",169:"LEFT",170:"RIGHT",172:"OUTER",175:"JOIN",179:"NATURAL",181:"ON",182:"USING",184:"PARTITION",187:"INDEX",188:"KEY",194:"USE",195:"IGNORE",196:"FORCE"},
productions_: [0,[3,3],[3,3],[5,1],[5,0],[7,1],[7,3],[10,4],[10,4],[13,3],[9,4],[9,4],[4,12],[15,1],[15,1],[15,1],[15,0],[19,1],[19,0],[20,3],[20,0],[21,1],[21,0],[22,1],[22,0],[23,1],[23,0],[24,1],[24,0],[25,0],[25,1],[25,1],[26,1],[26,0],[27,3],[27,1],[44,1],[44,1],[44,2],[48,0],[48,2],[48,1],[48,2],[48,1],[52,1],[54,1],[54,1],[56,1],[56,1],[56,1],[59,1],[59,1],[62,1],[64,1],[64,1],[64,1],[64,1],[64,1],[65,4],[66,3],[66,1],[67,0],[67,1],[67,1],[67,2],[67,1],[68,1],[68,3],[70,1],[70,3],[71,0],[71,1],[72,4],[72,5],[75,0],[75,2],[77,5],[80,2],[80,2],[80,2],[80,2],[80,2],[82,1],[82,1],[82,1],[82,1],[82,3],[82,4],[82,3],[82,4],[82,4],[82,1],[92,1],[92,3],[92,3],[92,3],[92,3],[92,3],[92,3],[92,3],[92,3],[92,3],[92,3],[92,3],[92,3],[102,0],[102,1],[104,0],[104,2],[106,1],[106,6],[106,6],[106,6],[106,4],[106,5],[106,4],[113,1],[113,1],[113,1],[113,1],[113,1],[113,1],[113,1],[120,1],[120,1],[122,1],[122,4],[122,3],[122,6],[124,1],[124,1],[47,1],[47,4],[47,2],[47,3],[47,3],[47,3],[47,3],[47,3],[87,1],[87,3],[130,0],[130,2],[132,0],[132,1],[134,0],[134,2],[133,3],[11,0],[11,1],[139,3],[138,1],[138,3],[141,2],[142,0],[142,1],[142,1],[145,0],[145,2],[147,2],[147,4],[147,4],[12,0],[12,1],[150,0],[150,1],[151,2],[153,0],[153,2],[153,4],[28,0],[28,10],[160,1],[160,3],[162,1],[162,4],[165,0],[165,1],[165,1],[168,1],[168,1],[171,0],[171,1],[173,0],[173,2],[174,4],[174,5],[174,4],[174,6],[174,5],[180,0],[180,1],[178,2],[177,1],[177,4],[163,1],[163,1],[183,1],[183,3],[161,0],[161,4],[185,0],[185,2],[185,1],[186,1],[186,1],[189,0],[189,2],[189,2],[189,2],[190,0],[190,1],[191,0],[191,1],[192,1],[192,3],[193,6],[193,6],[193,6],[176,4],[176,4],[176,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: case 2:
 return {nodeType: 'Main', value: $$[$0-2], hasSemicolon: $$[$0-1]}; 
break;
case 3: case 146:
 this.$ = true 
break;
case 4:
 this.$ = false 
break;
case 5: case 13: case 14: case 15: case 17: case 19: case 21: case 23: case 25: case 27: case 30: case 31: case 32: case 53: case 54: case 55: case 56: case 57: case 62: case 63: case 65: case 71: case 75: case 82: case 83: case 84: case 85: case 91: case 92: case 106: case 108: case 109: case 116: case 117: case 118: case 119: case 120: case 121: case 122: case 123: case 124: case 125: case 129: case 131: case 142: case 144: case 149: case 155: case 156: case 158: case 163: case 165: case 166: case 177: case 178: case 179: case 180: case 182: case 191: case 193: case 195: case 196: case 204: case 205: case 211: case 213:
 this.$ = $$[$0] 
break;
case 6:
 this.$ = $$[$0-2], this.$.orderBy = $$[$0-1], this.$.limit = $$[$0]; 
break;
case 7: case 8:
 this.$ = { type: 'Union', left: $$[$0-3], distinctOpt: $$[$0-1], right: $$[$0] }; 
break;
case 9:
 this.$ = { type: 'SelectParenthesized', value: $$[$0-1] }; 
break;
case 10: case 11:
 this.$ = { type: 'Union', left: $$[$0-3], distinctOpt: $$[$0-1], right: $$[$0] } 
break;
case 12:

        this.$ = {
          type: 'Select',
          distinctOpt: $$[$0-10],
          highPriorityOpt: $$[$0-9],
          maxStateMentTimeOpt: $$[$0-8],
          straightJoinOpt: $$[$0-7],
          sqlSmallResultOpt: $$[$0-6],
          sqlBigResultOpt: $$[$0-5],
          sqlBufferResultOpt: $$[$0-4],
          sqlCacheOpt: $$[$0-3],
          sqlCalcFoundRowsOpt: $$[$0-2],
          selectItems: $$[$0-1],
          from: $$[$0].from,
          partition: $$[$0].partition,
          where: $$[$0].where,
          groupBy: $$[$0].groupBy,
          having: $$[$0].having,
          orderBy: $$[$0].orderBy,
          limit: $$[$0].limit,
          procedure: $$[$0].procedure,
          updateLockMode: $$[$0].updateLockMode
        }
      
break;
case 16: case 18: case 20: case 22: case 24: case 26: case 28: case 29: case 33: case 61: case 70: case 74: case 105: case 107: case 141: case 143: case 145: case 148: case 154: case 157: case 162: case 164: case 167: case 176: case 181: case 190: case 199: case 206: case 210: case 212:
 this.$ = null 
break;
case 34:
 $$[$0-2].value.push($$[$0]); 
break;
case 35:
 this.$ = { type: 'SelectExpr', value: [ $$[$0] ], datatype: 'list' } 
break;
case 36: case 37:
 this.$ = { type: 'Identifier', value: $$[$0] } 
break;
case 38:
 this.$ = $$[$0-1]; this.$.alias = $$[$0].alias; this.$.hasAs = $$[$0].hasAs; 
break;
case 39: case 201:
 this.$ = {alias: null, hasAs: null} 
break;
case 40: case 42:
 this.$ = {alias: $$[$0], hasAs: true} 
break;
case 41: case 43:
 this.$ = {alias: $$[$0], hasAs: false} 
break;
case 44:
 this.$ = { type: 'Date', value: $$[$0], datatype: 'literal' } 
break;
case 45: case 46:
 this.$ = { type: 'String', value: $$[$0], datatype: 'literal' } 
break;
case 47: case 48: case 49:
 this.$ = { type: 'Number', value: $$[$0], datatype: 'literal' } 
break;
case 50:
 this.$ = { type: 'Boolean', value: 'TRUE', datatype: 'literal' } 
break;
case 51:
 this.$ = { type: 'Boolean', value: 'FALSE', datatype: 'literal' } 
break;
case 52:
 this.$ = { type: 'Null', value: 'null', datatype: 'literal' } 
break;
case 58:
 this.$ = {type: 'FunctionCall', name: $$[$0-3], params: $$[$0-1]} 
break;
case 59:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 60:
 this.$ = [$$[$0]]; 
break;
case 64:
 this.$ = { type: 'FunctionCallParam', distinctOpt: $$[$0-1], value: $$[$0] } 
break;
case 66:
 this.$ = { type: 'Identifier', value: $$[$0], datatype: 'attribute' } 
break;
case 67:
 this.$ = $$[$0-2]; $$[$0-2].value += '.' + $$[$0] 
break;
case 68:
 this.$ = { type: 'IdentifierList', value: [ $$[$0] ], datatype: 'list' } 
break;
case 69: case 173:
 this.$ = $$[$0-2]; $$[$0-2].value.push($$[$0]); 
break;
case 72:
 this.$ = { type: 'WhenThenList', value: [ { when: $$[$0-2], then: $$[$0] } ], datatype: 'list' }; 
break;
case 73:
 this.$ = $$[$0-4]; this.$.value.push({ when: $$[$0-2], then: $$[$0] }); 
break;
case 76:
 this.$ = { type: 'CaseWhen', caseExprOpt: $$[$0-3], whenThenList: $$[$0-2], else: $$[$0-1] } 
break;
case 77: case 78: case 79: case 80: case 81:
 this.$ = { type: 'Prefix', prefix: $$[$0-1], value: $$[$0] } 
break;
case 86:
 this.$ = { type: 'SimpleExprParentheses', value: $$[$0-1] } 
break;
case 87:
 this.$ = { type: 'SimpleExprParentheses', value: $$[$0-2], hasRow: true } 
break;
case 88:
 this.$ = { type: 'SubQuery', value: $$[$0-1] } 
break;
case 89:
 this.$ = { type: 'SubQuery', value: $$[$0-1], hasExists: true } 
break;
case 90:
 this.$ = { type: 'IdentifierExpr', identifier: $$[$0-2], value: $$[$0-1] } 
break;
case 93:
 this.$ = { type: 'BitExpression', operator: '|', left: $$[$0-2], right: $$[$0] } 
break;
case 94:
 this.$ = { type: 'BitExpression', operator: '&', left: $$[$0-2], right: $$[$0] } 
break;
case 95:
 this.$ = { type: 'BitExpression', operator: '<<', left: $$[$0-2], right: $$[$0] } 
break;
case 96:
 this.$ = { type: 'BitExpression', operator: '>>', left: $$[$0-2], right: $$[$0] } 
break;
case 97:
 this.$ = { type: 'BitExpression', operator: '+', left: $$[$0-2], right: $$[$0] } 
break;
case 98:
 this.$ = { type: 'BitExpression', operator: '-', left: $$[$0-2], right: $$[$0] } 
break;
case 99:
 this.$ = { type: 'BitExpression', operator: '*', left: $$[$0-2], right: $$[$0] } 
break;
case 100:
 this.$ = { type: 'BitExpression', operator: '/', left: $$[$0-2], right: $$[$0] } 
break;
case 101:
 this.$ = { type: 'BitExpression', operator: 'DIV', left: $$[$0-2], right: $$[$0] } 
break;
case 102:
 this.$ = { type: 'BitExpression', operator: 'MOD', left: $$[$0-2], right: $$[$0] } 
break;
case 103:
 this.$ = { type: 'BitExpression', operator: '%', left: $$[$0-2], right: $$[$0] } 
break;
case 104:
 this.$ = { type: 'BitExpression', operator: '^', left: $$[$0-2], right: $$[$0] } 
break;
case 110:
 this.$ = { type: 'InSubQueryPredicate', hasNot: $$[$0-4], left: $$[$0-5] ,right: $$[$0-1] } 
break;
case 111:
 this.$ = { type: 'InExpressionListPredicate', hasNot: $$[$0-4], left: $$[$0-5], right: $$[$0-1] } 
break;
case 112:
 this.$ = { type: 'BetweenPredicate', hasNot: $$[$0-4], left: $$[$0-5], right: { left: $$[$0-2], right: $$[$0] } } 
break;
case 113:
 this.$ = { type: 'SoundsLikePredicate', hasNot: false, left: $$[$0-3], right: $$[$0] } 
break;
case 114:
 this.$ = { type: 'LikePredicate', hasNot: $$[$0-3], left: $$[$0-4], right: $$[$0-1], escape: $$[$0] } 
break;
case 115:
 this.$ = { type: 'RegexpPredicate', hasNot: $$[$0-2], left: $$[$0-3], right: $$[$0] } 
break;
case 126:
 this.$ = { type: 'IsNullBooleanPrimary', hasNot: $$[$0-1] , value: $$[$0-3] } 
break;
case 127:
 this.$ = { type: 'ComparisonBooleanPrimary', left: $$[$0-2], operator: $$[$0-1], right: $$[$0] } 
break;
case 128:
 this.$ = { type: 'ComparisonSubQueryBooleanPrimary', operator: $$[$0-4], subQueryOpt: $$[$0-3], left: $$[$0-5], right: $$[$0-1] } 
break;
case 130:
 this.$ = { type: 'BooleanExtra', value: $$[$0] } 
break;
case 132:
 this.$ = { type: 'IsExpression', hasNot: $$[$0-1], left: $$[$0-3], right: $$[$0] } 
break;
case 133:
 this.$ = { type: 'NotExpression', value: $$[$0] } 
break;
case 134: case 137:
 this.$ = { type: 'AndExpression', operator: $$[$0-1], left: $$[$0-2], right: $$[$0] } 
break;
case 135: case 136:
 this.$ = { type: 'OrExpression', operator: $$[$0-1], left: $$[$0-2], right: $$[$0] } 
break;
case 138:
 this.$ = { type: 'XORExpression', left: $$[$0-2], right: $$[$0] } 
break;
case 139:
 this.$ = { type: 'ExpressionList', value: [ $$[$0] ], datatype: 'list' } 
break;
case 140: case 215:
 this.$ = $$[$0-2]; this.$.value.push($$[$0]); 
break;
case 147:
 this.$ = { type: 'GroupBy', value: $$[$0-1], rollUp: $$[$0], datatype: 'list' } 
break;
case 150:
 this.$ = { type: 'OrderBy', value: $$[$0-1], rollUp: $$[$0], datatype: 'list' } 
break;
case 151: case 197:
 this.$ = [ $$[$0] ] 
break;
case 152:
 this.$ = $$[$0-2]; $$[$0-2].push($$[$0]); 
break;
case 153:
 this.$ = { type: 'GroupByOrderByItem', value: $$[$0-1], sortOpt: $$[$0] } 
break;
case 159:
 this.$ = { type: 'Limit', value: [ $$[$0] ], datatype: 'list' } 
break;
case 160:
 this.$ = { type: 'Limit', value: [ $$[$0-2], $$[$0] ], datatype: 'list' } 
break;
case 161:
 this.$ = { type: 'Limit', value: [ $$[$0], $$[$0-2] ], offsetMode: true, datatype: 'list' } 
break;
case 168:
 this.$ = $$[$0-1] + ' ' + $$[$0] 
break;
case 169:
 this.$ = $$[$0-3] + ' ' + $$[$0-2] + ' ' + $$[$0-1] + ' ' + $$[$0] 
break;
case 170:
 this.$ = {} 
break;
case 171:
 this.$ = { from: $$[$0-8], partition: $$[$0-7], where: $$[$0-6], groupBy: $$[$0-5], having: $$[$0-4], orderBy: $$[$0-3], limit: $$[$0-2], procedure: $$[$0-1], updateLockMode: $$[$0] } 
break;
case 172:
 this.$ = { type: 'TableReferences', value: [ $$[$0] ], datatype: 'list' } 
break;
case 174:
 this.$ = { type: 'TableReference', value: $$[$0] } 
break;
case 175:
 this.$ = { type: 'TableReference', hasOj: true, value: $$[$0-1] } 
break;
case 183:
 this.$ = { leftRight: null, outOpt: null } 
break;
case 184:
 this.$ = { leftRight: $$[$0-1], outOpt: $$[$0] } 
break;
case 185:
 this.$ = { type: 'InnerCrossJoinTable', innerCrossOpt: $$[$0-2], left: $$[$0-3], right: $$[$0], condition: null } 
break;
case 186:
 this.$ = { type: 'InnerCrossJoinTable', innerCrossOpt: $$[$0-3], left: $$[$0-4], right: $$[$0-1], condition: $$[$0] } 
break;
case 187:
 this.$ = { type: 'StraightJoinTable', left: $$[$0-3], right: $$[$0-1], condition: $$[$0] } 
break;
case 188:
 this.$ = { type: 'LeftRightJoinTable', leftRight: $$[$0-4], outOpt: $$[$0-3], left: $$[$0-5], right: $$[$0-1], condition: $$[$0] } 
break;
case 189:
 this.$ = { type: 'NaturalJoinTable', leftRight: $$[$0-2].leftRight, outOpt: $$[$0-2].outOpt, left: $$[$0-4], right: $$[$0] } 
break;
case 192:
 this.$ = { type: 'OnJoinCondition', value: $$[$0] } 
break;
case 194:
 this.$ = { type: 'UsingJoinCondition', value: $$[$0-1], datatype: 'list' } 
break;
case 198:
 this.$ = $$[$0-2]; $$[$0-2].push($$[$0]) 
break;
case 200:
 this.$ = { type: 'Partitions', value: $$[$0-1], datatype: 'list' } 
break;
case 202:
 this.$ = { hasAs: true, alias: $$[$0] } 
break;
case 203:
 this.$ = { hasAs: false, alias: $$[$0] } 
break;
case 207: case 208: case 209:
 this.$ = { type: 'ForOptIndexHint', value: $$[$0] } 
break;
case 214:
 this.$ = { type: 'IndexHintList', value: [ $$[$0] ], datatype: 'list' } 
break;
case 216:
 this.$ = { type: 'UseIndexHint', value: $$[$0-1], forOpt: $$[$0-3], indexOrKey: $$[$0-4] } 
break;
case 217:
 this.$ = { type: 'IgnoreIndexHint', value: $$[$0-1], forOpt: $$[$0-3], indexOrKey: $$[$0-4] } 
break;
case 218:
 this.$ = { type: 'ForceIndexHint', value: $$[$0-1], forOpt: $$[$0-3], indexOrKey: $$[$0-4] } 
break;
case 219:
 this.$ = { type: 'TableFactor', value: $$[$0-3], partition: $$[$0-2], alias: $$[$0-1].alias, hasAs: $$[$0-1].hasAs, indexHintOpt: $$[$0] } 
break;
case 220:
 this.$ = { type: 'TableFactor', value: { type: 'SubQuery', value: $$[$0-2] }, alias: $$[$0].alias, hasAs: $$[$0].hasAs} 
break;
case 221:
 this.$ = $$[$0-1]; this.$.hasParentheses = true 
break;
}
},
table: [{3:1,4:2,7:3,9:5,10:6,13:7,16:$V0,18:$V1},{1:[3]},{5:9,6:$V2,8:$V3,14:$V4},{5:12,6:$V2,8:$V3},o([16,32,33,35,36,37,38,39,40,41,42,45,46,50,51,53,55,57,58,60,61,63,78,81,83,84,85,86,88,89,90,103],$V5,{15:13,29:$V6,30:$V7,31:$V8}),o($V9,[2,5]),o([6,8,148],$Va,{11:17,139:18,140:$Vb}),{14:$Vc},{4:21,18:$V1},{6:[1,22]},{15:23,18:$V5,29:$V6,30:$V7,31:$V8},{6:[2,3]},{6:[1,24]},o($Vd,[2,18],{19:25,32:[1,26]}),o($Ve,[2,13]),o($Ve,[2,14]),o($Ve,[2,15]),o($V9,$Vf,{12:27,147:28,148:$Vg}),o($Vh,[2,149]),{16:$Vi,35:$Vj,47:32,50:$Vk,51:$Vl,52:47,53:$Vm,54:48,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:$Vr,62:51,63:$Vs,64:38,65:40,68:39,77:46,78:$Vt,80:41,81:$Vu,82:37,83:$Vv,84:$Vw,85:$Vx,86:$Vy,88:$Vz,89:$VA,90:$VB,92:36,103:$VC,106:35,122:33,138:30,141:31},{15:68,16:$V5,29:$V6,30:$V7,31:$V8},{17:[1,69]},{1:[2,1]},{4:70,9:71,18:$V1},{1:[2,2]},o($VD,[2,20],{20:72,33:[1,73]}),o($Vd,[2,17]),o($V9,[2,6]),o($VE,[2,163]),{35:[1,74]},o($Vh,$VF,{134:75,43:$VG,135:$VH}),o($VI,[2,151]),o($VI,[2,154],{142:78,109:$VJ,126:$VK,127:$VL,128:$VM,129:$VN,143:[1,84],144:[1,85]}),o($VO,[2,131],{113:87,34:[1,88],114:[1,89],115:[1,90],116:[1,91],117:[1,92],118:[1,93],119:[1,94],123:[1,86]}),{16:$Vi,35:$Vj,47:95,50:$Vk,51:$Vl,52:47,53:$Vm,54:48,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:$Vr,62:51,63:$Vs,64:38,65:40,68:39,77:46,78:$Vt,80:41,81:$Vu,82:37,83:$Vv,84:$Vw,85:$Vx,86:$Vy,88:$Vz,89:$VA,90:$VB,92:36,103:$VC,106:35,122:33},o($VP,[2,125]),o($VP,[2,109],{102:96,45:$VQ,81:$VR,83:$VS,93:$VT,94:$VU,95:$VV,96:$VW,97:$VX,98:$VY,99:$VZ,100:$V_,101:$V$,103:$V01,107:$V11,108:$V11,111:$V11,112:$V11,110:[1,97]}),o($V21,[2,92]),o($V31,[2,82]),o($V31,[2,83],{69:$V41}),o($V31,[2,84]),o($V31,[2,85]),{4:113,16:$Vi,18:$V1,35:$Vj,47:114,50:$Vk,51:$Vl,52:47,53:$Vm,54:48,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:$Vr,62:51,63:$Vs,64:38,65:40,68:39,77:46,78:$Vt,80:41,81:$Vu,82:37,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:112,88:$Vz,89:$VA,90:$VB,92:36,103:$VC,106:35,122:33},{16:[1,115]},{16:[1,116]},{50:$V51,68:117},o($V31,[2,91]),o($V31,[2,53]),o($V31,[2,54]),o($V31,[2,55]),o($V31,[2,56]),o($V31,[2,57]),o([6,8,14,17,34,36,43,45,49,50,51,69,73,74,76,79,81,83,91,93,94,95,96,97,98,99,100,101,103,105,107,108,109,110,111,112,114,115,116,117,118,119,123,126,127,128,129,131,135,137,140,143,144,146,148,152,154,156,159,166,167,169,170,175,179,181,182,184],$V61,{16:$V71}),{16:$Vi,35:$Vj,50:$Vk,51:$Vl,52:47,53:$Vm,54:48,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:$Vr,62:51,63:$Vs,64:38,65:40,68:39,77:46,78:$Vt,80:41,81:$Vu,82:120,83:$Vv,84:$Vw,85:$Vx,86:$Vy,88:$Vz,89:$VA,90:$VB},{16:$Vi,35:$Vj,50:$Vk,51:$Vl,52:47,53:$Vm,54:48,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:$Vr,62:51,63:$Vs,64:38,65:40,68:39,77:46,78:$Vt,80:41,81:$Vu,82:121,83:$Vv,84:$Vw,85:$Vx,86:$Vy,88:$Vz,89:$VA,90:$VB},{16:$Vi,35:$Vj,50:$Vk,51:$Vl,52:47,53:$Vm,54:48,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:$Vr,62:51,63:$Vs,64:38,65:40,68:39,77:46,78:$Vt,80:41,81:$Vu,82:122,83:$Vv,84:$Vw,85:$Vx,86:$Vy,88:$Vz,89:$VA,90:$VB},{16:$Vi,35:$Vj,50:$Vk,51:$Vl,52:47,53:$Vm,54:48,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:$Vr,62:51,63:$Vs,64:38,65:40,68:39,77:46,78:$Vt,80:41,81:$Vu,82:123,83:$Vv,84:$Vw,85:$Vx,86:$Vy,88:$Vz,89:$VA,90:$VB},{16:$Vi,35:$Vj,50:$Vk,51:$Vl,52:47,53:$Vm,54:48,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:$Vr,62:51,63:$Vs,64:38,65:40,68:39,77:46,78:$Vt,80:41,81:$Vu,82:124,83:$Vv,84:$Vw,85:$Vx,86:$Vy,88:$Vz,89:$VA,90:$VB},{16:$Vi,35:$Vj,47:126,50:$Vk,51:$Vl,52:47,53:$Vm,54:48,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:$Vr,62:51,63:$Vs,64:38,65:40,68:39,71:125,73:[2,70],77:46,78:$Vt,80:41,81:$Vu,82:37,83:$Vv,84:$Vw,85:$Vx,86:$Vy,88:$Vz,89:$VA,90:$VB,92:36,103:$VC,106:35,122:33},o($V31,[2,44]),o($V31,[2,45]),o($V31,[2,46]),o($V31,[2,47]),o($V31,[2,48]),o($V31,[2,49]),o($V31,[2,50]),o($V31,[2,51]),o($V31,[2,52]),{10:128,13:127,16:$V0},o([6,8,14,140,148],[2,9]),o($V9,[2,10],{14:$V4}),o($V9,[2,11]),o($V81,[2,22],{21:129,36:[1,130]}),{34:[1,131]},o($VE,[2,159],{43:[1,132],149:[1,133]}),o($Vh,[2,150]),{16:$Vi,35:$Vj,47:32,50:$Vk,51:$Vl,52:47,53:$Vm,54:48,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:$Vr,62:51,63:$Vs,64:38,65:40,68:39,77:46,78:$Vt,80:41,81:$Vu,82:37,83:$Vv,84:$Vw,85:$Vx,86:$Vy,88:$Vz,89:$VA,90:$VB,92:36,103:$VC,106:35,122:33,141:134},{136:[1,135]},o($VI,[2,153]),{16:$Vi,35:$Vj,47:136,50:$Vk,51:$Vl,52:47,53:$Vm,54:48,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:$Vr,62:51,63:$Vs,64:38,65:40,68:39,77:46,78:$Vt,80:41,81:$Vu,82:37,83:$Vv,84:$Vw,85:$Vx,86:$Vy,88:$Vz,89:$VA,90:$VB,92:36,103:$VC,106:35,122:33},{16:$Vi,35:$Vj,47:137,50:$Vk,51:$Vl,52:47,53:$Vm,54:48,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:$Vr,62:51,63:$Vs,64:38,65:40,68:39,77:46,78:$Vt,80:41,81:$Vu,82:37,83:$Vv,84:$Vw,85:$Vx,86:$Vy,88:$Vz,89:$VA,90:$VB,92:36,103:$VC,106:35,122:33},{16:$Vi,35:$Vj,47:138,50:$Vk,51:$Vl,52:47,53:$Vm,54:48,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:$Vr,62:51,63:$Vs,64:38,65:40,68:39,77:46,78:$Vt,80:41,81:$Vu,82:37,83:$Vv,84:$Vw,85:$Vx,86:$Vy,88:$Vz,89:$VA,90:$VB,92:36,103:$VC,106:35,122:33},{16:$Vi,35:$Vj,47:139,50:$Vk,51:$Vl,52:47,53:$Vm,54:48,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:$Vr,62:51,63:$Vs,64:38,65:40,68:39,77:46,78:$Vt,80:41,81:$Vu,82:37,83:$Vv,84:$Vw,85:$Vx,86:$Vy,88:$Vz,89:$VA,90:$VB,92:36,103:$VC,106:35,122:33},{16:$Vi,35:$Vj,47:140,50:$Vk,51:$Vl,52:47,53:$Vm,54:48,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:$Vr,62:51,63:$Vs,64:38,65:40,68:39,77:46,78:$Vt,80:41,81:$Vu,82:37,83:$Vv,84:$Vw,85:$Vx,86:$Vy,88:$Vz,89:$VA,90:$VB,92:36,103:$VC,106:35,122:33},o($VI,[2,155]),o($VI,[2,156]),o([60,61,63,125],$V11,{102:141,103:$V01}),{16:$Vi,29:[1,144],35:$Vj,50:$Vk,51:$Vl,52:47,53:$Vm,54:48,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:$Vr,62:51,63:$Vs,64:38,65:40,68:39,77:46,78:$Vt,80:41,81:$Vu,82:37,83:$Vv,84:$Vw,85:$Vx,86:$Vy,88:$Vz,89:$VA,90:$VB,92:36,106:142,120:143,121:[1,145]},o($V91,[2,116]),o($V91,[2,117]),o($V91,[2,118]),o($V91,[2,119]),o($V91,[2,120]),o($V91,[2,121]),o($V91,[2,122]),o($VO,[2,133]),{107:[1,146],108:[1,147],111:[1,148],112:[1,149]},{111:[1,150]},{16:$Vi,35:$Vj,50:$Vk,51:$Vl,52:47,53:$Vm,54:48,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:$Vr,62:51,63:$Vs,64:38,65:40,68:39,77:46,78:$Vt,80:41,81:$Vu,82:37,83:$Vv,84:$Vw,85:$Vx,86:$Vy,88:$Vz,89:$VA,90:$VB,92:151},{16:$Vi,35:$Vj,50:$Vk,51:$Vl,52:47,53:$Vm,54:48,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:$Vr,62:51,63:$Vs,64:38,65:40,68:39,77:46,78:$Vt,80:41,81:$Vu,82:37,83:$Vv,84:$Vw,85:$Vx,86:$Vy,88:$Vz,89:$VA,90:$VB,92:152},{16:$Vi,35:$Vj,50:$Vk,51:$Vl,52:47,53:$Vm,54:48,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:$Vr,62:51,63:$Vs,64:38,65:40,68:39,77:46,78:$Vt,80:41,81:$Vu,82:37,83:$Vv,84:$Vw,85:$Vx,86:$Vy,88:$Vz,89:$VA,90:$VB,92:153},{16:$Vi,35:$Vj,50:$Vk,51:$Vl,52:47,53:$Vm,54:48,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:$Vr,62:51,63:$Vs,64:38,65:40,68:39,77:46,78:$Vt,80:41,81:$Vu,82:37,83:$Vv,84:$Vw,85:$Vx,86:$Vy,88:$Vz,89:$VA,90:$VB,92:154},{16:$Vi,35:$Vj,50:$Vk,51:$Vl,52:47,53:$Vm,54:48,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:$Vr,62:51,63:$Vs,64:38,65:40,68:39,77:46,78:$Vt,80:41,81:$Vu,82:37,83:$Vv,84:$Vw,85:$Vx,86:$Vy,88:$Vz,89:$VA,90:$VB,92:155},{16:$Vi,35:$Vj,50:$Vk,51:$Vl,52:47,53:$Vm,54:48,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:$Vr,62:51,63:$Vs,64:38,65:40,68:39,77:46,78:$Vt,80:41,81:$Vu,82:37,83:$Vv,84:$Vw,85:$Vx,86:$Vy,88:$Vz,89:$VA,90:$VB,92:156},{16:$Vi,35:$Vj,50:$Vk,51:$Vl,52:47,53:$Vm,54:48,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:$Vr,62:51,63:$Vs,64:38,65:40,68:39,77:46,78:$Vt,80:41,81:$Vu,82:37,83:$Vv,84:$Vw,85:$Vx,86:$Vy,88:$Vz,89:$VA,90:$VB,92:157},{16:$Vi,35:$Vj,50:$Vk,51:$Vl,52:47,53:$Vm,54:48,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:$Vr,62:51,63:$Vs,64:38,65:40,68:39,77:46,78:$Vt,80:41,81:$Vu,82:37,83:$Vv,84:$Vw,85:$Vx,86:$Vy,88:$Vz,89:$VA,90:$VB,92:158},{16:$Vi,35:$Vj,50:$Vk,51:$Vl,52:47,53:$Vm,54:48,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:$Vr,62:51,63:$Vs,64:38,65:40,68:39,77:46,78:$Vt,80:41,81:$Vu,82:37,83:$Vv,84:$Vw,85:$Vx,86:$Vy,88:$Vz,89:$VA,90:$VB,92:159},{16:$Vi,35:$Vj,50:$Vk,51:$Vl,52:47,53:$Vm,54:48,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:$Vr,62:51,63:$Vs,64:38,65:40,68:39,77:46,78:$Vt,80:41,81:$Vu,82:37,83:$Vv,84:$Vw,85:$Vx,86:$Vy,88:$Vz,89:$VA,90:$VB,92:160},{16:$Vi,35:$Vj,50:$Vk,51:$Vl,52:47,53:$Vm,54:48,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:$Vr,62:51,63:$Vs,64:38,65:40,68:39,77:46,78:$Vt,80:41,81:$Vu,82:37,83:$Vv,84:$Vw,85:$Vx,86:$Vy,88:$Vz,89:$VA,90:$VB,92:161},{16:$Vi,35:$Vj,50:$Vk,51:$Vl,52:47,53:$Vm,54:48,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:$Vr,62:51,63:$Vs,64:38,65:40,68:39,77:46,78:$Vt,80:41,81:$Vu,82:37,83:$Vv,84:$Vw,85:$Vx,86:$Vy,88:$Vz,89:$VA,90:$VB,92:162},o([60,61,63,107,108,111,112,125],[2,106]),{50:[1,163]},{17:[1,164],43:$Va1},{17:[1,166]},o($Vb1,[2,139],{109:$VJ,126:$VK,127:$VL,128:$VM,129:$VN}),{16:$Vi,35:$Vj,47:114,50:$Vk,51:$Vl,52:47,53:$Vm,54:48,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:$Vr,62:51,63:$Vs,64:38,65:40,68:39,77:46,78:$Vt,80:41,81:$Vu,82:37,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:167,88:$Vz,89:$VA,90:$VB,92:36,103:$VC,106:35,122:33},{4:168,18:$V1},{16:$Vi,35:$Vj,47:169,50:$Vk,51:$Vl,52:47,53:$Vm,54:48,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:$Vr,62:51,63:$Vs,64:38,65:40,68:39,69:$V41,77:46,78:$Vt,80:41,81:$Vu,82:37,83:$Vv,84:$Vw,85:$Vx,86:$Vy,88:$Vz,89:$VA,90:$VB,92:36,103:$VC,106:35,122:33},o([6,8,14,16,17,35,36,43,49,50,51,53,55,57,58,60,61,63,69,78,81,83,84,85,86,88,89,90,91,103,131,137,140,146,148,152,154,156,166,167,169,170,175,179,181,182,184,194,195,196],$V61),o($Vb1,$Vc1,{122:33,106:35,92:36,82:37,64:38,68:39,65:40,80:41,77:46,52:47,54:48,56:49,59:50,62:51,66:170,67:171,47:175,16:$Vi,30:$Vd1,35:$Vj,45:$Ve1,46:$Vf1,50:$Vk,51:$Vl,53:$Vm,55:$Vn,57:$Vo,58:$Vp,60:$Vq,61:$Vr,63:$Vs,78:$Vt,81:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,88:$Vz,89:$VA,90:$VB,103:$VC}),o($V31,[2,77]),o($V31,[2,78]),o($V31,[2,79]),o($V31,[2,80]),o($V31,[2,81]),{72:176,73:[1,177]},{73:[2,71],109:$VJ,126:$VK,127:$VL,128:$VM,129:$VN},o($Vg1,[2,7],{14:$Vc}),o($Vg1,[2,8]),o($Vh1,[2,24],{22:178,37:[1,179]}),o($V81,[2,21]),{35:[1,180]},{35:[1,181]},{35:[1,182]},o($VI,[2,152]),o($Vi1,[2,146]),o($VO,[2,134]),o($Vj1,[2,135],{109:$VJ,126:$VK}),o($Vj1,[2,136],{109:$VJ,126:$VK}),o($VO,[2,137]),o($Vj1,[2,138],{109:$VJ,126:$VK}),{59:185,60:$Vq,61:$Vr,63:[1,184],124:183,125:[1,186]},o($VP,[2,127]),{16:[1,187]},{16:[2,123]},{16:[2,124]},{16:[1,188]},{16:$Vi,35:$Vj,50:$Vk,51:$Vl,52:47,53:$Vm,54:48,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:$Vr,62:51,63:$Vs,64:38,65:40,68:39,77:46,78:$Vt,80:41,81:$Vu,82:37,83:$Vv,84:$Vw,85:$Vx,86:$Vy,88:$Vz,89:$VA,90:$VB,92:189},{16:$Vi,35:$Vj,50:$Vk,51:$Vl,52:47,53:$Vm,54:48,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:$Vr,62:51,63:$Vs,64:38,65:40,68:39,77:46,78:$Vt,80:41,81:$Vu,82:190,83:$Vv,84:$Vw,85:$Vx,86:$Vy,88:$Vz,89:$VA,90:$VB},{16:$Vi,35:$Vj,50:$Vk,51:$Vl,52:47,53:$Vm,54:48,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:$Vr,62:51,63:$Vs,64:38,65:40,68:39,77:46,78:$Vt,80:41,81:$Vu,82:37,83:$Vv,84:$Vw,85:$Vx,86:$Vy,88:$Vz,89:$VA,90:$VB,92:191},{16:$Vi,35:$Vj,50:$Vk,51:$Vl,52:47,53:$Vm,54:48,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:$Vr,62:51,63:$Vs,64:38,65:40,68:39,77:46,78:$Vt,80:41,81:$Vu,82:37,83:$Vv,84:$Vw,85:$Vx,86:$Vy,88:$Vz,89:$VA,90:$VB,92:192},o([6,8,14,17,34,36,43,49,50,51,73,74,76,79,91,93,103,107,108,109,110,111,112,114,115,116,117,118,119,123,126,127,128,129,131,135,137,140,143,144,146,148,152,154,156,159,166,167,169,170,175,179,181,182,184],[2,93],{45:$VQ,81:$VR,83:$VS,94:$VU,95:$VV,96:$VW,97:$VX,98:$VY,99:$VZ,100:$V_,101:$V$}),o([6,8,14,17,34,36,43,49,50,51,73,74,76,79,91,93,94,101,103,107,108,109,110,111,112,114,115,116,117,118,119,123,126,127,128,129,131,135,137,140,143,144,146,148,152,154,156,159,166,167,169,170,175,179,181,182,184],[2,94],{45:$VQ,81:$VR,83:$VS,95:$VV,96:$VW,97:$VX,98:$VY,99:$VZ,100:$V_}),o($Vk1,[2,95],{45:$VQ,81:$VR,83:$VS,97:$VX,98:$VY,99:$VZ,100:$V_}),o($Vk1,[2,96],{45:$VQ,81:$VR,83:$VS,97:$VX,98:$VY,99:$VZ,100:$V_}),o($Vl1,[2,97],{45:$VQ,97:$VX,98:$VY,99:$VZ,100:$V_}),o($Vl1,[2,98],{45:$VQ,97:$VX,98:$VY,99:$VZ,100:$V_}),o($V21,[2,99]),o($V21,[2,100]),o($V21,[2,101]),o($V21,[2,102]),o($V21,[2,103]),o([6,8,14,17,34,36,43,49,50,51,73,74,76,79,91,93,101,103,107,108,109,110,111,112,114,115,116,117,118,119,123,126,127,128,129,131,135,137,140,143,144,146,148,152,154,156,159,166,167,169,170,175,179,181,182,184],[2,104],{45:$VQ,81:$VR,83:$VS,94:$VU,95:$VV,96:$VW,97:$VX,98:$VY,99:$VZ,100:$V_}),o([6,8,14,16,17,34,35,36,43,45,49,50,51,53,55,57,58,60,61,63,69,73,74,76,78,79,81,83,84,85,86,88,89,90,91,93,94,95,96,97,98,99,100,101,103,105,107,108,109,110,111,112,114,115,116,117,118,119,123,126,127,128,129,131,135,137,140,143,144,146,148,152,154,156,159,166,167,169,170,175,179,181,182,184,194,195,196],[2,67]),o($V31,[2,86]),{16:$Vi,35:$Vj,47:193,50:$Vk,51:$Vl,52:47,53:$Vm,54:48,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:$Vr,62:51,63:$Vs,64:38,65:40,68:39,77:46,78:$Vt,80:41,81:$Vu,82:37,83:$Vv,84:$Vw,85:$Vx,86:$Vy,88:$Vz,89:$VA,90:$VB,92:36,103:$VC,106:35,122:33},o($V31,[2,88]),{17:[1,194],43:$Va1},{17:[1,195]},{91:[1,196],109:$VJ,126:$VK,127:$VL,128:$VM,129:$VN},{17:[1,197],43:[1,198]},o($Vb1,[2,60]),o($Vb1,[2,62]),o($Vb1,[2,63]),{16:$Vi,35:$Vj,47:199,50:$Vk,51:$Vl,52:47,53:$Vm,54:48,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:$Vr,62:51,63:$Vs,64:38,65:40,68:39,77:46,78:$Vt,80:41,81:$Vu,82:37,83:$Vv,84:$Vw,85:$Vx,86:$Vy,88:$Vz,89:$VA,90:$VB,92:36,103:$VC,106:35,122:33},o($Vb1,[2,65],{109:$VJ,126:$VK,127:$VL,128:$VM,129:$VN}),{73:[1,201],75:200,76:[1,202],79:[2,74]},{16:$Vi,35:$Vj,47:203,50:$Vk,51:$Vl,52:47,53:$Vm,54:48,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:$Vr,62:51,63:$Vs,64:38,65:40,68:39,77:46,78:$Vt,80:41,81:$Vu,82:37,83:$Vv,84:$Vw,85:$Vx,86:$Vy,88:$Vz,89:$VA,90:$VB,92:36,103:$VC,106:35,122:33},o($Vm1,[2,26],{23:204,38:[1,205]}),o($Vh1,[2,23]),o($VD,[2,19]),o($VE,[2,160]),o($VE,[2,161]),o($VO,[2,132]),o($VP,[2,126]),o($VO,[2,129]),o($VO,[2,130]),{4:206,18:$V1},{4:207,16:$Vi,18:$V1,35:$Vj,47:114,50:$Vk,51:$Vl,52:47,53:$Vm,54:48,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:$Vr,62:51,63:$Vs,64:38,65:40,68:39,77:46,78:$Vt,80:41,81:$Vu,82:37,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:208,88:$Vz,89:$VA,90:$VB,92:36,103:$VC,106:35,122:33},{45:$VQ,81:$VR,83:$VS,93:$VT,94:$VU,95:$VV,96:$VW,97:$VX,98:$VY,99:$VZ,100:$V_,101:$V$,109:[1,209]},o($VP,[2,107],{104:210,105:[1,211]}),o($VP,[2,115],{45:$VQ,81:$VR,83:$VS,93:$VT,94:$VU,95:$VV,96:$VW,97:$VX,98:$VY,99:$VZ,100:$V_,101:$V$}),o($VP,[2,113],{45:$VQ,81:$VR,83:$VS,93:$VT,94:$VU,95:$VV,96:$VW,97:$VX,98:$VY,99:$VZ,100:$V_,101:$V$}),o($Vb1,[2,140],{109:$VJ,126:$VK,127:$VL,128:$VM,129:$VN}),o($V31,[2,87]),o($V31,[2,89]),o($V31,[2,90]),o($V31,[2,58]),o($Vb1,$Vc1,{122:33,106:35,92:36,82:37,64:38,68:39,65:40,80:41,77:46,52:47,54:48,56:49,59:50,62:51,47:175,67:212,16:$Vi,30:$Vd1,35:$Vj,45:$Ve1,46:$Vf1,50:$Vk,51:$Vl,53:$Vm,55:$Vn,57:$Vo,58:$Vp,60:$Vq,61:$Vr,63:$Vs,78:$Vt,81:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,88:$Vz,89:$VA,90:$VB,103:$VC}),o($Vb1,[2,64],{109:$VJ,126:$VK,127:$VL,128:$VM,129:$VN}),{79:[1,213]},{16:$Vi,35:$Vj,47:214,50:$Vk,51:$Vl,52:47,53:$Vm,54:48,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:$Vr,62:51,63:$Vs,64:38,65:40,68:39,77:46,78:$Vt,80:41,81:$Vu,82:37,83:$Vv,84:$Vw,85:$Vx,86:$Vy,88:$Vz,89:$VA,90:$VB,92:36,103:$VC,106:35,122:33},{16:$Vi,35:$Vj,47:215,50:$Vk,51:$Vl,52:47,53:$Vm,54:48,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:$Vr,62:51,63:$Vs,64:38,65:40,68:39,77:46,78:$Vt,80:41,81:$Vu,82:37,83:$Vv,84:$Vw,85:$Vx,86:$Vy,88:$Vz,89:$VA,90:$VB,92:36,103:$VC,106:35,122:33},{74:[1,216],109:$VJ,126:$VK,127:$VL,128:$VM,129:$VN},o($Vn1,[2,28],{24:217,39:[1,218]}),o($Vm1,[2,25]),{17:[1,219]},{17:[1,220]},{17:[1,221],43:$Va1},{16:$Vi,35:$Vj,50:$Vk,51:$Vl,52:47,53:$Vm,54:48,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:$Vr,62:51,63:$Vs,64:38,65:40,68:39,77:46,78:$Vt,80:41,81:$Vu,82:37,83:$Vv,84:$Vw,85:$Vx,86:$Vy,88:$Vz,89:$VA,90:$VB,92:36,106:222},o($VP,[2,114]),{16:$Vi,35:$Vj,50:$Vk,51:$Vl,52:47,53:$Vm,54:48,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:$Vr,62:51,63:$Vs,64:38,65:40,68:39,77:46,78:$Vt,80:41,81:$Vu,82:223,83:$Vv,84:$Vw,85:$Vx,86:$Vy,88:$Vz,89:$VA,90:$VB},o($Vb1,[2,59]),o($V31,[2,76]),{74:[1,224],109:$VJ,126:$VK,127:$VL,128:$VM,129:$VN},{79:[2,75],109:$VJ,126:$VK,127:$VL,128:$VM,129:$VN},{16:$Vi,35:$Vj,47:225,50:$Vk,51:$Vl,52:47,53:$Vm,54:48,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:$Vr,62:51,63:$Vs,64:38,65:40,68:39,77:46,78:$Vt,80:41,81:$Vu,82:37,83:$Vv,84:$Vw,85:$Vx,86:$Vy,88:$Vz,89:$VA,90:$VB,92:36,103:$VC,106:35,122:33},o($Vo1,[2,29],{25:226,40:[1,227],41:[1,228]}),o($Vn1,[2,27]),o($VP,[2,128]),o($VP,[2,110]),o($VP,[2,111]),o($VP,[2,112]),o($VP,[2,108]),{16:$Vi,35:$Vj,47:229,50:$Vk,51:$Vl,52:47,53:$Vm,54:48,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:$Vr,62:51,63:$Vs,64:38,65:40,68:39,77:46,78:$Vt,80:41,81:$Vu,82:37,83:$Vv,84:$Vw,85:$Vx,86:$Vy,88:$Vz,89:$VA,90:$VB,92:36,103:$VC,106:35,122:33},o($Vp1,[2,72],{109:$VJ,126:$VK,127:$VL,128:$VM,129:$VN}),o($Vq1,[2,33],{26:230,42:[1,231]}),o($Vo1,[2,30]),o($Vo1,[2,31]),o($Vp1,[2,73],{109:$VJ,126:$VK,127:$VL,128:$VM,129:$VN}),{16:$Vi,27:232,35:$Vj,44:233,45:$Vr1,46:$Vs1,47:236,50:$Vk,51:$Vl,52:47,53:$Vm,54:48,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:$Vr,62:51,63:$Vs,64:38,65:40,68:39,77:46,78:$Vt,80:41,81:$Vu,82:37,83:$Vv,84:$Vw,85:$Vx,86:$Vy,88:$Vz,89:$VA,90:$VB,92:36,103:$VC,106:35,122:33},o($Vq1,[2,32]),o($Vt1,[2,170],{28:237,43:[1,238],159:[1,239]}),o($Vu1,[2,35]),o($Vu1,[2,36]),o($Vu1,[2,37]),o($Vu1,[2,39],{48:240,49:[1,241],50:[1,242],51:[1,243],109:$VJ,126:$VK,127:$VL,128:$VM,129:$VN}),o($Vt1,[2,12]),{16:$Vi,35:$Vj,44:244,45:$Vr1,46:$Vs1,47:236,50:$Vk,51:$Vl,52:47,53:$Vm,54:48,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:$Vr,62:51,63:$Vs,64:38,65:40,68:39,77:46,78:$Vt,80:41,81:$Vu,82:37,83:$Vv,84:$Vw,85:$Vx,86:$Vy,88:$Vz,89:$VA,90:$VB,92:36,103:$VC,106:35,122:33},{16:$Vv1,50:$V51,68:251,90:$Vw1,160:245,162:246,163:247,174:250,176:249},o($Vu1,[2,38]),{50:[1,253],51:[1,254]},o($Vu1,[2,41]),o($Vu1,[2,43]),o($Vu1,[2,34]),o([6,8,14,17,131,137,140,146,148,152,154,156],$Vx1,{161:255,43:$Vy1,184:$Vz1}),o($VA1,[2,172]),o($VA1,[2,174],{165:258,168:260,36:$VB1,166:$VC1,167:$VD1,169:$VE1,170:$VF1,175:$VG1,179:$VH1}),{164:[1,266]},o($VI1,[2,195]),o($VI1,[2,196]),o([6,8,14,17,36,43,49,50,91,131,137,140,146,148,152,154,156,166,167,169,170,175,179,181,182,194,195,196],$Vx1,{161:267,69:$V41,184:$Vz1}),{4:268,16:$Vv1,18:$V1,50:$V51,68:251,90:$Vw1,160:269,162:246,163:247,174:250,176:249},o($Vu1,[2,40]),o($Vu1,[2,42]),o($VJ1,[2,141],{130:270,131:[1,271]}),{16:$Vv1,50:$V51,68:251,90:$Vw1,162:272,163:247,174:250,176:249},{16:[1,273]},{175:[1,274]},{16:$Vv1,50:$V51,68:251,176:275},{171:276,172:$VK1,175:$VL1},{168:279,169:$VE1,170:$VF1,173:278,175:[2,183]},{175:[2,177]},{175:[2,178]},o($VM1,[2,179]),o($VM1,[2,180]),{16:$Vv1,50:$V51,68:251,163:280,174:250,176:249},o($VN1,$VO1,{185:281,68:283,49:$VP1,50:$V51}),{17:[1,284]},{17:[1,285],43:$Vy1},o($Vi1,[2,143],{132:286,133:287,137:[1,288]}),{16:$Vi,35:$Vj,47:289,50:$Vk,51:$Vl,52:47,53:$Vm,54:48,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:$Vr,62:51,63:$Vs,64:38,65:40,68:39,77:46,78:$Vt,80:41,81:$Vu,82:37,83:$Vv,84:$Vw,85:$Vx,86:$Vy,88:$Vz,89:$VA,90:$VB,92:36,103:$VC,106:35,122:33},o($VA1,[2,173]),{50:$V51,68:291,183:290},{16:$Vv1,50:$V51,68:251,176:292},{178:293,181:$VQ1},{175:[1,295]},{175:[2,182]},{175:[1,296]},{171:297,172:$VK1,175:$VL1},{36:$VB1,91:[1,298],165:258,166:$VC1,167:$VD1,168:260,169:$VE1,170:$VF1,175:$VG1,179:$VH1},o($VI1,[2,212],{191:299,192:300,193:301,194:$VR1,195:$VS1,196:$VT1}),{50:$V51,68:305},o($VN1,[2,203],{69:$V41}),o($VI1,$VO1,{68:283,185:306,49:$VP1,50:$V51}),o($VI1,[2,221]),o($VU1,[2,157],{145:307,146:[1,308]}),o($Vi1,[2,144]),{16:$Vi,35:$Vj,47:32,50:$Vk,51:$Vl,52:47,53:$Vm,54:48,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:$Vr,62:51,63:$Vs,64:38,65:40,68:39,77:46,78:$Vt,80:41,81:$Vu,82:37,83:$Vv,84:$Vw,85:$Vx,86:$Vy,88:$Vz,89:$VA,90:$VB,92:36,103:$VC,106:35,122:33,138:309,141:31},o($VJ1,[2,142],{109:$VJ,126:$VK,127:$VL,128:$VM,129:$VN}),{17:[1,310],43:[1,311]},o($Vb1,[2,197],{69:$V41}),o([6,8,14,17,36,43,91,131,137,140,146,148,152,154,156,166,167,169,170,175,179,184],[2,185],{177:312,178:313,181:$VQ1,182:$VV1}),o($VI1,[2,187]),{16:$Vi,35:$Vj,47:315,50:$Vk,51:$Vl,52:47,53:$Vm,54:48,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:$Vr,62:51,63:$Vs,64:38,65:40,68:39,77:46,78:$Vt,80:41,81:$Vu,82:37,83:$Vv,84:$Vw,85:$Vx,86:$Vy,88:$Vz,89:$VA,90:$VB,92:36,103:$VC,106:35,122:33},{16:$Vv1,50:$V51,68:251,163:316,174:250,176:249},{16:$Vv1,50:$V51,68:251,176:317},{175:[2,184]},o($VA1,[2,175]),o($VI1,[2,219]),o($VI1,[2,213]),o($VI1,[2,214]),{186:319,187:$VW1,188:$VX1},{186:322,187:$VW1,188:$VX1},{186:323,187:$VW1,188:$VX1},o($VN1,[2,202],{69:$V41}),o($VI1,[2,220]),o($Vh,$Va,{139:18,11:324,140:$Vb}),{16:$Vi,35:$Vj,47:325,50:$Vk,51:$Vl,52:47,53:$Vm,54:48,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:$Vr,62:51,63:$Vs,64:38,65:40,68:39,77:46,78:$Vt,80:41,81:$Vu,82:37,83:$Vv,84:$Vw,85:$Vx,86:$Vy,88:$Vz,89:$VA,90:$VB,92:36,103:$VC,106:35,122:33},o($Vi1,$VF,{134:326,43:$VG,135:$VH}),o([6,8,14,17,36,43,49,50,91,131,137,140,146,148,152,154,156,166,167,169,170,175,179,181,182,184,194,195,196],[2,200]),{50:$V51,68:327},o($VI1,[2,186]),o($VI1,[2,193]),{16:[1,328]},o($VI1,[2,192],{109:$VJ,126:$VK,127:$VL,128:$VM,129:$VN}),{36:$VB1,165:258,166:$VC1,167:$VD1,168:260,169:$VE1,170:$VF1,175:$VG1,177:329,178:313,179:$VH1,181:$VQ1,182:$VV1},o($VI1,[2,189]),{193:330,194:$VR1,195:$VS1,196:$VT1},{16:$VY1,154:$VZ1,189:331},o($V_1,[2,204]),o($V_1,[2,205]),{16:$VY1,154:$VZ1,189:333},{16:$VY1,154:$VZ1,189:334},o($VE,$Vf,{147:28,12:335,148:$Vg}),o($VU1,[2,158],{109:$VJ,126:$VK,127:$VL,128:$VM,129:$VN}),o($Vi1,[2,147]),o($Vb1,[2,198],{69:$V41}),{50:$V51,68:337,70:336},o($VI1,[2,188]),o($VI1,[2,215]),{16:[1,338]},{137:[1,341],140:[1,340],175:[1,339]},{16:[1,342]},{16:[1,343]},o($V$1,[2,164],{150:344,151:345,152:[1,346]}),{17:[1,347],43:$V02},o($Vb1,[2,68],{69:$V41}),{17:[2,210],50:$V51,68:337,70:350,190:349},{16:[2,207]},{16:[2,208]},{16:[2,209]},{50:$V51,68:337,70:351},{50:$V51,68:337,70:352},o($Vt1,[2,167],{153:353,154:[1,354],156:[1,355]}),o($V$1,[2,165]),{50:[1,357],65:356},o($VI1,[2,194]),{50:$V51,68:358},{17:[1,359]},{17:[2,211],43:$V02},{17:[1,360],43:$V02},{17:[1,361],43:$V02},o($Vt1,[2,171]),{155:[1,362]},{107:[1,363]},o($V$1,[2,166]),{16:$V71},o($Vb1,[2,69],{69:$V41}),o($VI1,[2,216]),o($VI1,[2,217]),o($VI1,[2,218]),o($Vt1,[2,168]),{157:[1,364]},{158:[1,365]},o($Vt1,[2,169])],
defaultActions: {11:[2,3],22:[2,1],24:[2,2],144:[2,123],145:[2,124],262:[2,177],263:[2,178],277:[2,182],297:[2,184],339:[2,207],340:[2,208],341:[2,209]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip comments */
break;
case 1:/* skip sql comments */
break;
case 2:/* skip sql comments */
break;
case 3:/* skip whitespace */
break;
case 4:return 50
break;
case 5:return 50
break;
case 6:return 50
break;
case 7:return 18
break;
case 8:return 29
break;
case 9:return 121
break;
case 10:return 30
break;
case 11:return 31
break;
case 12:return 32
break;
case 13:return 33
break;
case 14:return 36
break;
case 15:return 37
break;
case 16:return 38
break;
case 17:return 39
break;
case 18:return 40
break;
case 19:return 41
break;
case 20:return 42
break;
case 21:return 46
break;
case 22:return 49
break;
case 23:return 60
break;
case 24:return 61
break;
case 25:return 63
break;
case 26:return 'COLLATE'
break;
case 27:return 86
break;
case 28:return 88
break;
case 29:return 89
break;
case 30:return 78
break;
case 31:return 73
break;
case 32:return 74
break;
case 33:return 76
break;
case 34:return 79
break;
case 35:return 98
break;
case 36:return 99
break;
case 37:return 103
break;
case 38:return 108
break;
case 39:return 107
break;
case 40:return 110
break;
case 41:return 111
break;
case 42:return 105
break;
case 43:return 112
break;
case 44:return 123
break;
case 45:return 125
break;
case 46:return 109
break;
case 47:return 128
break;
case 48:return 129
break;
case 49:return 159
break;
case 50:return 184
break;
case 51:return 194
break;
case 52:return 187
break;
case 53:return 188
break;
case 54:return 154
break;
case 55:return 175
break;
case 56:return 140
break;
case 57:return 137
break;
case 58:return 195
break;
case 59:return 196
break;
case 60:return 166
break;
case 61:return 167
break;
case 62:return 181
break;
case 63:return 182
break;
case 64:return 169
break;
case 65:return 170
break;
case 66:return 172
break;
case 67:return 179
break;
case 68:return 131
break;
case 69:return 143
break;
case 70:return 144
break;
case 71:return 135
break;
case 72:return 136
break;
case 73:return 146
break;
case 74:return 149
break;
case 75:return 152
break;
case 76:return 155
break;
case 77:return 156
break;
case 78:return 157
break;
case 79:return 158
break;
case 80:return 164
break;
case 81:return 148
break;
case 82:return 14
break;
case 83:return 43
break;
case 84:return 34
break;
case 85:return 16
break;
case 86:return 17
break;
case 87:return 84
break;
case 88:return 119
break;
case 89:return 85
break;
case 90:return 93
break;
case 91:return 94
break;
case 92:return 81
break;
case 93:return 83
break;
case 94:return 45
break;
case 95:return 97
break;
case 96:return 100
break;
case 97:return 101
break;
case 98:return 96
break;
case 99:return 114
break;
case 100:return 115
break;
case 101:return 95
break;
case 102:return '<=>'
break;
case 103:return 116
break;
case 104:return 118
break;
case 105:return 117
break;
case 106:return 90
break;
case 107:return 91
break;
case 108:return 8
break;
case 109:return 53
break;
case 110:return 53
break;
case 111:return 55
break;
case 112:return 55
break;
case 113:return 58
break;
case 114:return 35
break;
case 115:return 57
break;
case 116:return 50
break;
case 117:return 69
break;
case 118:return 51
break;
case 119:return 51
break;
case 120:return 6
break;
case 121:return 'INVALID'
break;
}
},
rules: [/^(?:[/][*](.|\n)*?[*][/])/i,/^(?:[-][-]\s.*\n)/i,/^(?:[#]\s.*\n)/i,/^(?:\s+)/i,/^(?:[`][a-zA-Z_\u4e00-\u9fa5][a-zA-Z0-9_\u4e00-\u9fa5]*[`])/i,/^(?:[\w]+[\u4e00-\u9fa5]+[0-9a-zA-Z_\u4e00-\u9fa5]*)/i,/^(?:[\u4e00-\u9fa5][0-9a-zA-Z_\u4e00-\u9fa5]*)/i,/^(?:SELECT\b)/i,/^(?:ALL\b)/i,/^(?:ANY\b)/i,/^(?:DISTINCT\b)/i,/^(?:DISTINCTROW\b)/i,/^(?:HIGH_PRIORITY\b)/i,/^(?:MAX_STATEMENT_TIME\b)/i,/^(?:STRAIGHT_JOIN\b)/i,/^(?:SQL_SMALL_RESULT\b)/i,/^(?:SQL_BIG_RESULT\b)/i,/^(?:SQL_BUFFER_RESULT\b)/i,/^(?:SQL_CACHE\b)/i,/^(?:SQL_NO_CACHE\b)/i,/^(?:SQL_CALC_FOUND_ROWS\b)/i,/^(?:([a-zA-Z_\u4e00-\u9fa5][a-zA-Z0-9_\u4e00-\u9fa5]*\.){1,2}\*)/i,/^(?:AS\b)/i,/^(?:TRUE\b)/i,/^(?:FALSE\b)/i,/^(?:NULL\b)/i,/^(?:COLLATE\b)/i,/^(?:BINARY\b)/i,/^(?:ROW\b)/i,/^(?:EXISTS\b)/i,/^(?:CASE\b)/i,/^(?:WHEN\b)/i,/^(?:THEN\b)/i,/^(?:ELSE\b)/i,/^(?:END\b)/i,/^(?:DIV\b)/i,/^(?:MOD\b)/i,/^(?:NOT\b)/i,/^(?:BETWEEN\b)/i,/^(?:IN\b)/i,/^(?:SOUNDS\b)/i,/^(?:LIKE\b)/i,/^(?:ESCAPE\b)/i,/^(?:REGEXP\b)/i,/^(?:IS\b)/i,/^(?:UNKNOWN\b)/i,/^(?:AND\b)/i,/^(?:OR\b)/i,/^(?:XOR\b)/i,/^(?:FROM\b)/i,/^(?:PARTITION\b)/i,/^(?:USE\b)/i,/^(?:INDEX\b)/i,/^(?:KEY\b)/i,/^(?:FOR\b)/i,/^(?:JOIN\b)/i,/^(?:ORDER\s+BY\b)/i,/^(?:GROUP\s+BY\b)/i,/^(?:IGNORE\b)/i,/^(?:FORCE\b)/i,/^(?:INNER\b)/i,/^(?:CROSS\b)/i,/^(?:ON\b)/i,/^(?:USING\b)/i,/^(?:LEFT\b)/i,/^(?:RIGHT\b)/i,/^(?:OUTER\b)/i,/^(?:NATURAL\b)/i,/^(?:WHERE\b)/i,/^(?:ASC\b)/i,/^(?:DESC\b)/i,/^(?:WITH\b)/i,/^(?:ROLLUP\b)/i,/^(?:HAVING\b)/i,/^(?:OFFSET\b)/i,/^(?:PROCEDURE\b)/i,/^(?:UPDATE\b)/i,/^(?:LOCK\b)/i,/^(?:SHARE\b)/i,/^(?:MODE\b)/i,/^(?:OJ\b)/i,/^(?:LIMIT\b)/i,/^(?:UNION\b)/i,/^(?:,)/i,/^(?:=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:~)/i,/^(?:!=)/i,/^(?:!)/i,/^(?:\|)/i,/^(?:&)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\^)/i,/^(?:>>)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<<)/i,/^(?:<=>)/i,/^(?:<=)/i,/^(?:<>)/i,/^(?:<)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:;)/i,/^(?:[']([12]\d{3}(0[1-9]|1[0-2])(0[1-9]|[12]\d|3[01]))['])/i,/^(?:["]([12]\d{3}(0[1-9]|1[0-2])(0[1-9]|[12]\d|3[01]))["])/i,/^(?:['](\\.|[^'])*['])/i,/^(?:["](\\.|[^"])*["])/i,/^(?:[0][x][0-9a-fA-F]+)/i,/^(?:[-]?[0-9]+(\.[0-9]+)?)/i,/^(?:[-]?[0-9]+(\.[0-9]+)?[eE][-][0-9]+(\.[0-9]+)?)/i,/^(?:[a-zA-Z_\u4e00-\u9fa5][a-zA-Z0-9_\u4e00-\u9fa5]*)/i,/^(?:\.)/i,/^(?:['"][a-zA-Z_\u4e00-\u9fa5][a-zA-Z0-9_\u4e00-\u9fa5]*["'])/i,/^(?:[`].+[`])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();
if (!sqlParser) {
  sqlParser = {};
}




sqlParser.stringify = function(ast) {
  var sql = Sql();
  sql.travelMain(ast);
  return sql.buffer;
};

var Sql = (function() {

  function Sql() {
    this.buffer = '';
  }

  Sql.prototype.travel = function(ast) {
    if (!ast) return;

    if (typeof ast === 'string') {
      return this.append(ast);
    }

    var processor = this['travel' + ast.type];
    if (!processor) {
      throw Error("ast type " + ast.type + " not found");
    }
    processor.call(this, ast);
  };

  var noSuffixFlag = false;
  Sql.prototype.appendKeyword = function(keyword, noPrefix, noSuffix) {
    if (noSuffixFlag) {
      noPrefix = true;
      noSuffixFlag = false;
    }
    if (noPrefix) {
      this.buffer += keyword.toUpperCase();
    } else {
      this.buffer += ' ' + keyword.toUpperCase();
    }

    if (noSuffix) {
      noSuffixFlag = true;
    }
  };
  Sql.prototype.append = function(word, noPrefix, noSuffix) {
    if (noSuffixFlag) {
      noPrefix = true;
      noSuffixFlag = false;
    }
    if (noPrefix) {
      this.buffer += word;
    } else {
      this.buffer += ' ' + word;
    }

    if (noSuffix) {
      noSuffixFlag = true;
    }
  };
  Sql.prototype.travelMain = function(ast) {
    this.travel(ast.value);
    if (ast.hasSemicolon) {
      this.append(';', true);
    }
  };
  Sql.prototype.travelSelect = function(ast) {
    this.appendKeyword('select');
    if (ast.distinctOpt) {
      this.appendKeyword(ast.distinctOpt);
    }
    if (ast.highPriorityOpt) {
      this.appendKeyword(ast.highPriorityOpt);
    }
    if (ast.maxStateMentTimeOpt) {
      this.append('MAX_STATEMENT_TIME = ' + ast.maxStateMentTimeOpt);
    }
    if (ast.straightJoinOpt) {
      this.appendKeyword(ast.straightJoinOpt);
    }
    if (ast.sqlSmallResultOpt) {
      this.appendKeyword(ast.sqlSmallResultOpt);
    }
    if (ast.sqlBigResultOpt) {
      this.appendKeyword(ast.sqlBigResultOpt);
    }
    if (ast.sqlBufferResultOpt) {
      this.appendKeyword(ast.sqlBufferResultOpt);
    }
    if (ast.sqlCacheOpt) {
      this.appendKeyword(ast.sqlCacheOpt);
    }
    if (ast.sqlCalcFoundRowsOpt) {
      this.appendKeyword(ast.sqlCalcFoundRowsOpt);
    }
    if (ast.selectItems) {
      this.travelSelectExpr(ast.selectItems);
    }
    if (ast.from) {
      this.appendKeyword('from');
      this.travel(ast.from);
    }
    if (ast.partition) {
      this.travel(ast.partition);
    }
    if (ast.where) {
      this.appendKeyword('where');
      this.travel(ast.where);
    }
    if (ast.groupBy) {
      this.travel(ast.groupBy);
    }
    if (ast.having) {
      this.appendKeyword('having');
      this.travel(ast.having);
    }
    if (ast.orderBy) {
      this.travel(ast.orderBy);
    }
    if (ast.limit) {
      this.travel(ast.limit);
    }
    if (ast.procedure) {
      this.appendKeyword('procedure');
      this.travel(ast.procedure);
    }
    if (ast.updateLockMode) {
      this.appendKeyword(ast.updateLockMode);
    }
  };
  Sql.prototype.travelSelectExpr = function(ast) {
    var exprList = ast.value;
    for (var i = 0; i < exprList.length; i++) {
      if (typeof ast === 'string') {
        this.append(exprList[i]);
      } else {
        this.travel(exprList[i]);
        if (exprList[i].alias) {
          if (exprList[i].hasAs) {
            this.appendKeyword('as');
          }
          this.travel(exprList[i].alias);
        }
      }
      if (i !== exprList.length - 1) {
        this.append(',', true);
      }
    }
  };
  Sql.prototype.travelIsExpression = function(ast) {
    this.travel(ast.left);
    this.appendKeyword('in');
    if (ast.hasNot) {
      this.appendKeyword('not');
    }
    this.append(ast.right);
  };
  Sql.prototype.travelNotExpression = function(ast) {
    this.appendKeyword('not');
    this.travel(ast.value);
  };
  Sql.prototype.travelOrExpression = Sql.prototype.travelAndExpression = Sql.prototype.travelXORExpression = function(
    ast
  ) {
    this.travel(ast.left);
    this.appendKeyword(ast.operator);
    this.travel(ast.right);
  };
  Sql.prototype.travelNull = Sql.prototype.travelBoolean = Sql.prototype.travelBooleanExtra = function(
    ast
  ) {
    this.appendKeyword(ast.value);
  };
  Sql.prototype.travelNumber = function(ast) {
    this.append(ast.value);
  };
  Sql.prototype.travelString = function(ast) {
    this.append(ast.value);
  };
  Sql.prototype.travelFunctionCall = function(ast) {
    this.append(ast.name);
    this.append('(', true, true);
    var params = ast.params;
    for (var i = 0; i < params.length; i++) {
      var param = params[i];
      this.travel(param);
      if (i !== params.length - 1) {
        this.append(',', true);
      }
    }
    this.append(')', true);
  };
  Sql.prototype.travelFunctionCallParam = function(ast) {
    if (ast.distinctOpt) {
      this.appendKeyword(ast.distinctOpt);
    }
    this.travel(ast.value);
  };
  Sql.prototype.travelIdentifier = function(ast) {
    this.append(ast.value);
  };
  Sql.prototype.travelIdentifierList = function(ast) {
    var list = ast.value;
    for (var i = 0; i < list.length; i++) {
      this.travel(list[i]);
      if (i !== list.length - 1) {
        this.append(',', true);
      }
    }
  };
  Sql.prototype.travelWhenThenList = function(ast) {
    var list = ast.value;
    for (var i = 0; i < list.length; i++) {
      this.appendKeyword('when');
      this.travel(list[i].when);
      this.appendKeyword('then');
      this.travel(list[i].then);
    }
  };
  Sql.prototype.travelCaseWhen = function(ast) {
    this.appendKeyword('case');
    if (ast.caseExprOpt) {
      this.travel(ast.caseExprOpt);
    }
    this.travel(ast.whenThenList);
    if (ast.else) {
      this.appendKeyword('else');
      this.travel(ast.else);
    }
    this.appendKeyword('end');
  };
  Sql.prototype.travelPrefix = function(ast) {
    this.appendKeyword(ast.prefix);
    this.travel(ast.value);
  };
  Sql.prototype.travelSimpleExprParentheses = function(ast) {
    if (ast.hasRow) {
      this.appendKeyword('row');
    }
    this.append('(', false, true);
    this.travel(ast.value);
    this.append(')', true);
  };
  Sql.prototype.travelSubQuery = function(ast) {
    if (ast.hasExists) {
      this.appendKeyword('exists');
    }
    this.append('(', false, true);
    this.travel(ast.value);
    this.append(')', true);
  };
  Sql.prototype.travelIdentifierExpr = function(ast) {
    this.append('{');
    this.travel(ast.identifier);
    this.travel(ast.value);
    this.append('}');
  };
  Sql.prototype.travelBitExpression = function(ast) {
    this.travel(ast.left);
    this.appendKeyword(ast.operator);
    this.travel(ast.right);
  };
  Sql.prototype.travelInSubQueryPredicate = function(ast) {
    this.travel(ast.left);
    if (ast.hasNot) {
      this.appendKeyword('not');
    }
    this.appendKeyword('in');
    this.append('(', false, true);
    this.travel(ast.right);
    this.append(')');
  };
  Sql.prototype.travelInExpressionListPredicate = function(ast) {
    this.travel(ast.left);
    if (ast.hasNot) {
      this.appendKeyword('not');
    }
    this.appendKeyword('in');
    this.append('(', false, true);
    this.travel(ast.right);
    this.append(')');
  };
  Sql.prototype.travelBetweenPredicate = function(ast) {
    this.travel(ast.left);
    if (ast.hasNot) {
      this.appendKeyword('not');
    }
    this.appendKeyword('between');
    this.travel(ast.right.left);
    this.appendKeyword('and');
    this.travel(ast.right.right);
  };
  Sql.prototype.travelSoundsLikePredicate = function(ast) {
    this.travel(ast.left);
    this.appendKeyword('sounds');
    this.appendKeyword('like');
    this.travel(ast.right);
  };
  Sql.prototype.travelLikePredicate = function(ast) {
    this.travel(ast.left);
    if (ast.hasNot) {
      this.appendKeyword('not');
    }
    this.appendKeyword('like');
    this.travel(ast.right);
    if (ast.escape) {
      this.appendKeyword('escape');
      this.travel(ast.escape);
    }
  };
  Sql.prototype.travelRegexpPredicate = function(ast) {
    this.travel(ast.left);
    if (ast.hasNot) {
      this.appendKeyword('not');
    }
    this.appendKeyword('regexp');
    this.travel(ast.right);
  };
  Sql.prototype.travelIsNullBooleanPrimary = function(ast) {
    this.travel(ast.value);
    this.appendKeyword('is');
    if (ast.hasNot) {
      this.appendKeyword('not');
    }
    this.appendKeyword('null');
  };
  Sql.prototype.travelComparisonBooleanPrimary = function(ast) {
    this.travel(ast.left);
    this.append(ast.operator);
    this.travel(ast.right);
  };
  Sql.prototype.travelComparisonSubQueryBooleanPrimary = function(ast) {
    this.travel(ast.left);
    this.append(ast.operator);
    this.appendKeyword(ast.subQueryOpt);
    this.append('(', false, true);
    this.travel(ast.right);
    this.append(')');
  };
  Sql.prototype.travelExpressionList = function(ast) {
    var list = ast.value;
    for (var i = 0; i < list.length; i++) {
      this.travel(list[i]);
      if (i !== list.length - 1) {
        this.append(',', true);
      }
    }
  };
  Sql.prototype.travelGroupBy = function(ast) {
    this.appendKeyword('group by');
    var list = ast.value;
    for (var i = 0; i < list.length; i++) {
      this.travel(list[i]);
      if (i !== list.length - 1) {
        this.append(',', true);
      }
    }
  };
  Sql.prototype.travelOrderBy = function(ast) {
    this.appendKeyword('order by');
    var list = ast.value;
    for (var i = 0; i < list.length; i++) {
      this.travel(list[i]);
      if (i !== list.length - 1) {
        this.append(',', true);
      }
    }
    if (ast.rollUp) {
      this.appendKeyword('with rollup');
    }
  };
  Sql.prototype.travelGroupByOrderByItem = function(ast) {
    this.travel(ast.value);
    if (ast.sortOpt) {
      this.appendKeyword(ast.sortOpt);
    }
  };
  Sql.prototype.travelLimit = function(ast) {
    this.appendKeyword('limit');
    var list = ast.value;
    if (list.length === 1) {
      this.append(list[0]);
    } else if (list.length === 2) {
      if (ast.offsetMode) {
        this.append(list[1]);
        this.append('offset');
        this.append(list[0]);
      } else {
        this.append(list[0]);
        this.append(',', true);
        this.append(list[1]);
      }
    }
  };
  Sql.prototype.travelTableReferences = function(ast) {
    var list = ast.value;
    if (ast.TableReferences) {
      this.append('(', false, true);
    }
    for (var i = 0; i < list.length; i++) {
      this.travel(list[i]);
      if (i !== list.length - 1) {
        this.append(',', true);
      }
    }
    if (ast.TableReferences) {
      this.append(')');
    }
  };
  Sql.prototype.travelTableReference = function(ast) {
    if (ast.hasOj) {
      this.append('{');
      this.appendKeyword('oj');
      this.travel(ast.value);
      this.append('}');
    } else {
      this.travel(ast.value);
    }
  };
  Sql.prototype.travelInnerCrossJoinTable = function(ast) {
    this.travel(ast.left);
    if (ast.innerCrossOpt) {
      this.appendKeyword(ast.innerCrossOpt);
    }
    this.appendKeyword('join');
    this.travel(ast.right);
    if (ast.condition) {
      this.travel(ast.condition);
    }
  };
  Sql.prototype.travelStraightJoinTable = function(ast) {
    this.travel(ast.left);
    this.appendKeyword('straight_join');
    this.travel(ast.right);
    this.travel(ast.condition);
  };
  Sql.prototype.travelLeftRightJoinTable = function(ast) {
    this.travel(ast.left);
    this.appendKeyword(ast.leftRight);
    if (ast.outOpt) {
      this.appendKeyword(ast.outOpt);
    }
    this.appendKeyword('join');
    this.travel(ast.right);
    this.travel(ast.condition);
  };
  Sql.prototype.travelNaturalJoinTable = function(ast) {
    this.travel(ast.left);
    this.appendKeyword('natural');
    if (ast.leftRight) {
      this.appendKeyword(ast.leftRight);
    }
    if (ast.outOpt) {
      this.appendKeyword(ast.outOpt);
    }
    this.appendKeyword('join');
    this.travel(ast.right);
  };
  Sql.prototype.travelOnJoinCondition = function(ast) {
    this.appendKeyword('on');
    this.travel(ast.value);
  };
  Sql.prototype.travelUsingJoinCondition = function(ast) {
    this.appendKeyword('using');
    this.appendKeyword('(', false, true);
    this.travel(ast.value);
    this.appendKeyword(')');
  };
  Sql.prototype.travelPartitions = function(ast) {
    this.appendKeyword('partition');
    this.appendKeyword('(', false, true);
    var list = ast.value;
    for (var i = 0; i < list.length; i++) {
      this.travel(list[i]);
      if (i !== list.length - 1) {
        this.append(',', true);
      }
    }
    this.appendKeyword(')');
  };
  Sql.prototype.travelForOptIndexHint = function(ast) {
    this.appendKeyword('for');
    this.appendKeyword(ast.value);
  };
  Sql.prototype.travelIndexList = function(ast) {
    var list = ast.value;
    for (var i = 0; i < list.length; i++) {
      this.travel(list[i]);
      if (i !== list.length - 1) {
        this.append(',', true);
      }
    }
  };
  Sql.prototype.travelUseIndexHint = function(ast) {
    this.appendKeyword('use');
    this.appendKeyword(ast.indexOrKey);
    if (ast.forOpt) {
      this.travel(ast.forOpt);
    }
    this.appendKeyword('(', false, true);
    if (ast.value) {
      this.travel(ast.value);
    }
    this.appendKeyword(')');
  };
  Sql.prototype.travelIgnoreIndexHint = function(ast) {
    this.appendKeyword('ignore');
    this.appendKeyword(ast.indexOrKey);
    if (ast.forOpt) {
      this.travel(ast.forOpt);
    }
    this.appendKeyword('(', false, true);
    if (ast.value) {
      this.travel(ast.value);
    }
    this.appendKeyword(')');
  };
  Sql.prototype.travelForceIndexHint = function(ast) {
    this.appendKeyword('force');
    this.appendKeyword(ast.indexOrKey);
    if (ast.forOpt) {
      this.travel(ast.forOpt);
    }
    this.appendKeyword('(', false, true);
    if (ast.value) {
      this.travel(ast.value);
    }
    this.appendKeyword(')');
  };
  Sql.prototype.travelTableFactor = function(ast) {
    this.travel(ast.value);
    if (ast.partition) {
      this.travel(ast.partition);
    }
    if (ast.alias) {
      if (ast.hasAs) {
        this.appendKeyword('as');
      }
      this.travel(ast.alias);
    }
    if (ast.indexHintOpt) {
      this.travel(ast.indexHintOpt);
    }
  };
  Sql.prototype.travelUnion = function(ast) {
    this.travel(ast.left);
    this.appendKeyword('UNION');
    if (ast.distinctOpt) {
      this.appendKeyword(ast.distinctOpt);
    }
    this.travel(ast.right);
  };
  Sql.prototype.travelSelectParenthesized = function(ast) {
    this.appendKeyword('(');
    this.travel(ast.value);
    this.appendKeyword(')');
  };

  return new Sql()
});


export {sqlParser as parser};
