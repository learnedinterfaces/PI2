# Generated from DiffSql.g4 by ANTLR 4.10.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,107,2231,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,5,1,273,8,1,10,1,12,1,276,
        9,1,1,1,1,1,1,1,1,1,3,1,282,8,1,1,1,1,1,1,1,3,1,287,8,1,1,2,1,2,
        1,2,1,2,1,2,5,2,294,8,2,10,2,12,2,297,9,2,1,2,1,2,1,2,1,2,3,2,303,
        8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,314,8,2,1,2,1,2,1,2,
        3,2,319,8,2,3,2,321,8,2,1,3,1,3,1,3,1,3,1,3,5,3,328,8,3,10,3,12,
        3,331,9,3,1,3,1,3,1,3,1,3,3,3,337,8,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
        3,1,3,1,3,3,3,348,8,3,1,3,1,3,1,3,3,3,353,8,3,3,3,355,8,3,1,4,1,
        4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,5,6,369,8,6,10,6,12,6,
        372,9,6,1,6,1,6,1,6,1,6,3,6,378,8,6,1,6,1,6,1,6,3,6,383,8,6,1,7,
        1,7,1,7,1,7,1,7,5,7,390,8,7,10,7,12,7,393,9,7,1,7,1,7,1,7,1,7,3,
        7,399,8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,410,8,7,1,7,1,
        7,1,7,3,7,415,8,7,3,7,417,8,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,5,8,426,
        8,8,10,8,12,8,429,9,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
        8,1,8,3,8,443,8,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,451,8,8,1,9,1,9,1,
        10,1,10,1,10,1,10,1,10,5,10,460,8,10,10,10,12,10,463,9,10,1,10,1,
        10,1,10,1,10,3,10,469,8,10,1,10,1,10,1,10,3,10,474,8,10,1,11,1,11,
        1,11,1,11,1,11,5,11,481,8,11,10,11,12,11,484,9,11,1,11,1,11,1,11,
        1,11,3,11,490,8,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
        3,11,501,8,11,1,11,1,11,1,11,3,11,506,8,11,3,11,508,8,11,1,12,1,
        12,1,12,1,12,1,12,5,12,515,8,12,10,12,12,12,518,9,12,1,12,1,12,1,
        12,1,12,3,12,524,8,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
        12,3,12,535,8,12,1,12,1,12,1,12,3,12,540,8,12,3,12,542,8,12,1,13,
        1,13,1,13,1,13,1,13,5,13,549,8,13,10,13,12,13,552,9,13,1,13,1,13,
        1,13,1,13,3,13,558,8,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
        1,13,3,13,569,8,13,1,13,1,13,1,13,3,13,574,8,13,3,13,576,8,13,1,
        14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,5,15,588,8,15,10,
        15,12,15,591,9,15,1,15,1,15,1,15,1,15,3,15,597,8,15,1,15,1,15,1,
        15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,608,8,15,1,15,1,15,1,15,3,
        15,613,8,15,3,15,615,8,15,1,16,1,16,1,16,1,16,1,16,5,16,622,8,16,
        10,16,12,16,625,9,16,1,16,1,16,1,16,1,16,3,16,631,8,16,1,16,1,16,
        1,16,3,16,636,8,16,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,
        5,18,647,8,18,10,18,12,18,650,9,18,1,18,1,18,1,18,1,18,3,18,656,
        8,18,1,18,1,18,1,18,3,18,661,8,18,1,19,1,19,3,19,665,8,19,1,20,1,
        20,1,20,1,20,1,20,5,20,672,8,20,10,20,12,20,675,9,20,1,20,1,20,1,
        20,1,20,3,20,681,8,20,1,20,1,20,1,20,3,20,686,8,20,1,21,1,21,1,21,
        1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,5,23,699,8,23,10,23,12,23,
        702,9,23,1,23,1,23,1,23,1,23,3,23,708,8,23,1,23,1,23,1,23,3,23,713,
        8,23,1,24,1,24,1,24,1,24,1,24,5,24,720,8,24,10,24,12,24,723,9,24,
        1,24,1,24,1,24,1,24,3,24,729,8,24,1,24,1,24,1,24,1,24,1,24,1,24,
        1,24,1,24,1,24,3,24,740,8,24,1,24,1,24,1,24,3,24,745,8,24,3,24,747,
        8,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,5,25,756,8,25,10,25,12,25,
        759,9,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,
        1,25,3,25,773,8,25,1,25,1,25,1,25,1,25,1,25,1,25,3,25,781,8,25,1,
        26,1,26,1,27,1,27,1,27,1,27,1,27,5,27,790,8,27,10,27,12,27,793,9,
        27,1,27,1,27,1,27,1,27,3,27,799,8,27,1,27,1,27,1,27,3,27,804,8,27,
        1,28,1,28,1,28,1,28,1,28,5,28,811,8,28,10,28,12,28,814,9,28,1,28,
        1,28,1,28,1,28,3,28,820,8,28,1,28,1,28,1,28,3,28,825,8,28,1,29,1,
        29,1,29,1,29,1,29,5,29,832,8,29,10,29,12,29,835,9,29,1,29,1,29,1,
        29,1,29,3,29,841,8,29,1,29,1,29,1,29,3,29,846,8,29,1,30,1,30,1,30,
        1,30,1,30,5,30,853,8,30,10,30,12,30,856,9,30,1,30,1,30,1,30,1,30,
        3,30,862,8,30,1,30,1,30,1,30,3,30,867,8,30,1,31,1,31,1,31,1,31,3,
        31,873,8,31,1,32,1,32,1,32,1,32,1,32,5,32,880,8,32,10,32,12,32,883,
        9,32,1,32,1,32,1,32,1,32,3,32,889,8,32,1,32,1,32,1,32,3,32,894,8,
        32,1,33,1,33,1,33,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,
        36,5,36,909,8,36,10,36,12,36,912,9,36,1,36,1,36,1,36,1,36,3,36,918,
        8,36,1,36,1,36,1,36,3,36,923,8,36,1,37,1,37,1,37,1,37,1,37,5,37,
        930,8,37,10,37,12,37,933,9,37,1,37,1,37,1,37,1,37,3,37,939,8,37,
        1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,3,37,950,8,37,1,37,
        1,37,1,37,3,37,955,8,37,3,37,957,8,37,1,38,1,38,1,38,1,39,1,39,1,
        39,1,39,1,39,5,39,967,8,39,10,39,12,39,970,9,39,1,39,1,39,1,39,1,
        39,3,39,976,8,39,1,39,1,39,1,39,3,39,981,8,39,1,40,1,40,1,40,1,41,
        1,41,1,41,1,42,1,42,1,42,1,42,1,42,5,42,994,8,42,10,42,12,42,997,
        9,42,1,42,1,42,1,42,1,42,3,42,1003,8,42,1,42,1,42,1,42,3,42,1008,
        8,42,1,43,1,43,1,43,1,43,1,43,5,43,1015,8,43,10,43,12,43,1018,9,
        43,1,43,1,43,1,43,1,43,3,43,1024,8,43,1,43,1,43,1,43,1,43,1,43,1,
        43,1,43,1,43,1,43,3,43,1035,8,43,1,43,1,43,1,43,3,43,1040,8,43,3,
        43,1042,8,43,1,44,1,44,1,44,1,44,1,44,1,44,1,44,5,44,1051,8,44,10,
        44,12,44,1054,9,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,
        1,44,1,44,1,44,3,44,1068,8,44,1,44,1,44,1,44,1,44,1,44,1,44,3,44,
        1076,8,44,1,45,1,45,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,48,1,48,
        1,48,1,48,1,48,5,48,1092,8,48,10,48,12,48,1095,9,48,1,48,1,48,1,
        48,1,48,3,48,1101,8,48,1,48,1,48,1,48,3,48,1106,8,48,1,49,1,49,1,
        49,1,49,1,49,5,49,1113,8,49,10,49,12,49,1116,9,49,1,49,1,49,1,49,
        1,49,3,49,1122,8,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,
        3,49,1133,8,49,1,49,1,49,1,49,3,49,1138,8,49,3,49,1140,8,49,1,50,
        1,50,1,50,1,50,1,50,1,50,1,50,5,50,1149,8,50,10,50,12,50,1152,9,
        50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,3,
        50,1166,8,50,1,50,1,50,1,50,1,50,1,50,1,50,3,50,1174,8,50,1,51,1,
        51,1,51,1,52,1,52,1,52,1,52,1,52,5,52,1184,8,52,10,52,12,52,1187,
        9,52,1,52,1,52,1,52,1,52,3,52,1193,8,52,1,52,1,52,1,52,1,52,1,52,
        1,52,1,52,1,52,1,52,3,52,1204,8,52,1,52,1,52,1,52,3,52,1209,8,52,
        3,52,1211,8,52,1,53,1,53,1,53,1,54,1,54,3,54,1218,8,54,1,55,1,55,
        1,55,1,55,1,55,5,55,1225,8,55,10,55,12,55,1228,9,55,1,55,1,55,1,
        55,1,55,3,55,1234,8,55,1,55,1,55,1,55,3,55,1239,8,55,1,56,1,56,1,
        56,1,57,1,57,1,57,1,57,1,57,5,57,1249,8,57,10,57,12,57,1252,9,57,
        1,57,1,57,1,57,1,57,3,57,1258,8,57,1,57,1,57,1,57,3,57,1263,8,57,
        1,58,1,58,1,58,1,58,1,58,5,58,1270,8,58,10,58,12,58,1273,9,58,1,
        58,1,58,1,58,1,58,3,58,1279,8,58,1,58,1,58,1,58,3,58,1284,8,58,1,
        59,1,59,1,59,1,59,1,59,5,59,1291,8,59,10,59,12,59,1294,9,59,1,59,
        1,59,1,59,1,59,3,59,1300,8,59,1,59,1,59,1,59,3,59,1305,8,59,1,60,
        1,60,1,60,3,60,1310,8,60,1,61,1,61,3,61,1314,8,61,1,62,1,62,1,62,
        1,62,3,62,1320,8,62,1,63,1,63,3,63,1324,8,63,1,64,1,64,3,64,1328,
        8,64,1,65,1,65,1,65,1,66,1,66,1,66,1,66,1,66,5,66,1338,8,66,10,66,
        12,66,1341,9,66,1,66,1,66,1,66,1,66,3,66,1347,8,66,1,66,1,66,1,66,
        1,66,1,66,1,66,1,66,1,66,1,66,3,66,1358,8,66,1,66,1,66,1,66,3,66,
        1363,8,66,3,66,1365,8,66,1,67,1,67,1,67,1,67,1,67,1,67,1,67,5,67,
        1374,8,67,10,67,12,67,1377,9,67,1,67,1,67,1,67,1,67,1,67,1,67,1,
        67,1,67,1,67,1,67,1,67,1,67,3,67,1391,8,67,1,67,1,67,1,67,1,67,1,
        67,1,67,3,67,1399,8,67,1,68,1,68,1,68,1,69,1,69,1,69,1,69,1,69,5,
        69,1409,8,69,10,69,12,69,1412,9,69,1,69,1,69,1,69,1,69,3,69,1418,
        8,69,1,69,1,69,1,69,3,69,1423,8,69,1,70,1,70,1,70,1,70,1,70,5,70,
        1430,8,70,10,70,12,70,1433,9,70,1,70,1,70,1,70,1,70,3,70,1439,8,
        70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,3,70,1450,8,70,1,
        70,1,70,1,70,3,70,1455,8,70,3,70,1457,8,70,1,71,1,71,1,71,1,71,1,
        71,1,72,1,72,1,72,1,73,1,73,1,73,1,73,1,73,5,73,1472,8,73,10,73,
        12,73,1475,9,73,1,73,1,73,1,73,1,73,3,73,1481,8,73,1,73,1,73,1,73,
        3,73,1486,8,73,1,74,1,74,1,74,1,74,1,74,5,74,1493,8,74,10,74,12,
        74,1496,9,74,1,74,1,74,1,74,1,74,3,74,1502,8,74,1,74,1,74,1,74,1,
        74,1,74,1,74,1,74,1,74,1,74,3,74,1513,8,74,1,74,1,74,1,74,3,74,1518,
        8,74,3,74,1520,8,74,1,75,1,75,1,75,1,75,1,75,1,75,1,75,5,75,1529,
        8,75,10,75,12,75,1532,9,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,
        75,1,75,1,75,1,75,1,75,3,75,1546,8,75,1,75,1,75,1,75,1,75,1,75,1,
        75,3,75,1554,8,75,1,76,1,76,1,77,1,77,1,78,1,78,1,78,1,79,1,79,1,
        79,1,79,1,79,5,79,1568,8,79,10,79,12,79,1571,9,79,1,79,1,79,1,79,
        1,79,3,79,1577,8,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,
        3,79,1588,8,79,1,79,1,79,1,79,3,79,1593,8,79,3,79,1595,8,79,1,80,
        1,80,1,80,1,80,1,80,1,80,1,80,5,80,1604,8,80,10,80,12,80,1607,9,
        80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,3,
        80,1621,8,80,1,80,1,80,1,80,1,80,1,80,1,80,3,80,1629,8,80,1,81,1,
        81,1,81,1,82,1,82,1,82,1,83,1,83,1,83,1,83,1,83,5,83,1642,8,83,10,
        83,12,83,1645,9,83,1,83,1,83,1,83,1,83,3,83,1651,8,83,1,83,1,83,
        1,83,3,83,1656,8,83,1,84,1,84,1,84,1,84,1,84,5,84,1663,8,84,10,84,
        12,84,1666,9,84,1,84,1,84,1,84,1,84,3,84,1672,8,84,1,84,1,84,1,84,
        1,84,1,84,1,84,1,84,1,84,1,84,3,84,1683,8,84,1,84,1,84,1,84,3,84,
        1688,8,84,3,84,1690,8,84,1,85,1,85,1,85,1,85,1,85,1,85,1,85,5,85,
        1699,8,85,10,85,12,85,1702,9,85,1,85,1,85,1,85,1,85,1,85,1,85,1,
        85,1,85,1,85,1,85,1,85,1,85,3,85,1716,8,85,1,85,1,85,1,85,1,85,1,
        85,1,85,3,85,1724,8,85,1,86,1,86,1,86,1,86,1,87,1,87,1,88,1,88,1,
        88,1,88,1,88,5,88,1737,8,88,10,88,12,88,1740,9,88,1,88,1,88,1,88,
        1,88,3,88,1746,8,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,
        3,88,1757,8,88,1,88,1,88,1,88,3,88,1762,8,88,3,88,1764,8,88,1,89,
        1,89,1,89,1,90,1,90,1,90,1,91,1,91,1,91,1,92,3,92,1776,8,92,1,92,
        1,92,1,93,1,93,1,93,1,93,1,93,5,93,1785,8,93,10,93,12,93,1788,9,
        93,1,93,1,93,1,93,1,93,3,93,1794,8,93,1,93,1,93,1,93,3,93,1799,8,
        93,1,94,1,94,1,94,1,94,1,94,5,94,1806,8,94,10,94,12,94,1809,9,94,
        1,94,1,94,1,94,1,94,3,94,1815,8,94,1,94,1,94,1,94,3,94,1820,8,94,
        1,95,1,95,1,95,1,95,1,95,5,95,1827,8,95,10,95,12,95,1830,9,95,1,
        95,1,95,1,95,1,95,3,95,1836,8,95,1,95,1,95,1,95,3,95,1841,8,95,1,
        96,1,96,1,96,1,96,1,96,5,96,1848,8,96,10,96,12,96,1851,9,96,1,96,
        1,96,1,96,1,96,3,96,1857,8,96,1,96,1,96,1,96,3,96,1862,8,96,1,97,
        1,97,1,97,1,97,1,97,3,97,1869,8,97,1,98,1,98,1,98,1,98,1,98,1,98,
        1,99,1,99,1,99,1,99,1,99,5,99,1882,8,99,10,99,12,99,1885,9,99,1,
        99,1,99,1,99,1,99,3,99,1891,8,99,1,99,1,99,1,99,3,99,1896,8,99,1,
        100,1,100,1,100,1,100,1,101,1,101,1,101,1,101,1,101,5,101,1907,8,
        101,10,101,12,101,1910,9,101,1,101,1,101,1,101,1,101,3,101,1916,
        8,101,1,101,1,101,1,101,3,101,1921,8,101,1,102,1,102,1,102,1,103,
        1,103,1,103,1,103,1,103,5,103,1931,8,103,10,103,12,103,1934,9,103,
        1,103,1,103,1,103,1,103,3,103,1940,8,103,1,103,1,103,1,103,3,103,
        1945,8,103,1,104,1,104,1,104,1,104,1,104,5,104,1952,8,104,10,104,
        12,104,1955,9,104,1,104,1,104,1,104,1,104,3,104,1961,8,104,1,104,
        1,104,1,104,3,104,1966,8,104,1,105,1,105,1,105,1,105,1,105,5,105,
        1973,8,105,10,105,12,105,1976,9,105,1,105,1,105,1,105,1,105,3,105,
        1982,8,105,1,105,1,105,1,105,3,105,1987,8,105,1,106,1,106,1,106,
        1,106,1,106,5,106,1994,8,106,10,106,12,106,1997,9,106,1,106,1,106,
        1,106,1,106,3,106,2003,8,106,1,106,1,106,1,106,3,106,2008,8,106,
        1,107,1,107,1,107,1,107,1,107,5,107,2015,8,107,10,107,12,107,2018,
        9,107,1,107,1,107,1,107,1,107,3,107,2024,8,107,1,107,1,107,1,107,
        3,107,2029,8,107,1,108,1,108,1,108,1,108,1,108,5,108,2036,8,108,
        10,108,12,108,2039,9,108,1,108,1,108,1,108,1,108,3,108,2045,8,108,
        1,108,1,108,1,108,3,108,2050,8,108,1,109,1,109,1,109,1,109,1,109,
        1,109,1,109,1,109,1,109,3,109,2061,8,109,1,110,1,110,1,110,1,111,
        1,111,1,111,1,111,1,111,1,111,1,112,1,112,1,112,1,112,1,113,1,113,
        1,113,1,113,1,113,5,113,2081,8,113,10,113,12,113,2084,9,113,1,113,
        1,113,1,113,1,113,3,113,2090,8,113,1,113,1,113,1,113,1,113,1,113,
        1,113,1,113,1,113,1,113,3,113,2101,8,113,1,113,1,113,1,113,3,113,
        2106,8,113,3,113,2108,8,113,1,114,1,114,1,114,1,114,1,114,1,115,
        1,115,1,115,1,116,1,116,1,116,1,116,1,116,5,116,2123,8,116,10,116,
        12,116,2126,9,116,1,116,1,116,1,116,1,116,3,116,2132,8,116,1,116,
        1,116,1,116,1,116,1,116,1,116,1,116,1,116,1,116,3,116,2143,8,116,
        1,116,1,116,1,116,3,116,2148,8,116,3,116,2150,8,116,1,117,1,117,
        1,117,1,117,1,117,1,117,1,117,5,117,2159,8,117,10,117,12,117,2162,
        9,117,1,117,1,117,1,117,1,117,1,117,1,117,1,117,1,117,1,117,1,117,
        1,117,1,117,3,117,2176,8,117,1,117,1,117,1,117,1,117,1,117,1,117,
        3,117,2184,8,117,1,118,1,118,3,118,2188,8,118,1,119,1,119,1,120,
        1,120,1,121,1,121,1,121,1,121,1,121,1,121,1,121,1,121,1,121,1,121,
        1,121,1,121,1,121,1,121,1,121,3,121,2209,8,121,1,122,1,122,1,123,
        1,123,1,124,1,124,1,125,1,125,1,126,1,126,1,127,1,127,1,128,1,128,
        1,129,1,129,1,130,1,130,1,131,1,131,1,131,0,0,132,0,2,4,6,8,10,12,
        14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,
        58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,
        102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,
        134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,
        166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,
        198,200,202,204,206,208,210,212,214,216,218,220,222,224,226,228,
        230,232,234,236,238,240,242,244,246,248,250,252,254,256,258,260,
        262,0,5,2,0,38,38,43,43,1,0,18,19,1,0,20,21,4,0,6,6,22,32,58,58,
        68,68,2,0,22,23,72,72,2398,0,264,1,0,0,0,2,286,1,0,0,0,4,320,1,0,
        0,0,6,354,1,0,0,0,8,356,1,0,0,0,10,360,1,0,0,0,12,382,1,0,0,0,14,
        416,1,0,0,0,16,450,1,0,0,0,18,452,1,0,0,0,20,473,1,0,0,0,22,507,
        1,0,0,0,24,541,1,0,0,0,26,575,1,0,0,0,28,577,1,0,0,0,30,614,1,0,
        0,0,32,635,1,0,0,0,34,637,1,0,0,0,36,660,1,0,0,0,38,664,1,0,0,0,
        40,685,1,0,0,0,42,687,1,0,0,0,44,690,1,0,0,0,46,712,1,0,0,0,48,746,
        1,0,0,0,50,780,1,0,0,0,52,782,1,0,0,0,54,803,1,0,0,0,56,824,1,0,
        0,0,58,845,1,0,0,0,60,866,1,0,0,0,62,872,1,0,0,0,64,893,1,0,0,0,
        66,895,1,0,0,0,68,898,1,0,0,0,70,900,1,0,0,0,72,922,1,0,0,0,74,956,
        1,0,0,0,76,958,1,0,0,0,78,980,1,0,0,0,80,982,1,0,0,0,82,985,1,0,
        0,0,84,1007,1,0,0,0,86,1041,1,0,0,0,88,1075,1,0,0,0,90,1077,1,0,
        0,0,92,1079,1,0,0,0,94,1083,1,0,0,0,96,1105,1,0,0,0,98,1139,1,0,
        0,0,100,1173,1,0,0,0,102,1175,1,0,0,0,104,1210,1,0,0,0,106,1212,
        1,0,0,0,108,1217,1,0,0,0,110,1238,1,0,0,0,112,1240,1,0,0,0,114,1262,
        1,0,0,0,116,1283,1,0,0,0,118,1304,1,0,0,0,120,1309,1,0,0,0,122,1311,
        1,0,0,0,124,1315,1,0,0,0,126,1321,1,0,0,0,128,1327,1,0,0,0,130,1329,
        1,0,0,0,132,1364,1,0,0,0,134,1398,1,0,0,0,136,1400,1,0,0,0,138,1422,
        1,0,0,0,140,1456,1,0,0,0,142,1458,1,0,0,0,144,1463,1,0,0,0,146,1485,
        1,0,0,0,148,1519,1,0,0,0,150,1553,1,0,0,0,152,1555,1,0,0,0,154,1557,
        1,0,0,0,156,1559,1,0,0,0,158,1594,1,0,0,0,160,1628,1,0,0,0,162,1630,
        1,0,0,0,164,1633,1,0,0,0,166,1655,1,0,0,0,168,1689,1,0,0,0,170,1723,
        1,0,0,0,172,1725,1,0,0,0,174,1729,1,0,0,0,176,1763,1,0,0,0,178,1765,
        1,0,0,0,180,1768,1,0,0,0,182,1771,1,0,0,0,184,1775,1,0,0,0,186,1798,
        1,0,0,0,188,1819,1,0,0,0,190,1840,1,0,0,0,192,1861,1,0,0,0,194,1868,
        1,0,0,0,196,1870,1,0,0,0,198,1895,1,0,0,0,200,1897,1,0,0,0,202,1920,
        1,0,0,0,204,1922,1,0,0,0,206,1944,1,0,0,0,208,1965,1,0,0,0,210,1986,
        1,0,0,0,212,2007,1,0,0,0,214,2028,1,0,0,0,216,2049,1,0,0,0,218,2060,
        1,0,0,0,220,2062,1,0,0,0,222,2065,1,0,0,0,224,2071,1,0,0,0,226,2107,
        1,0,0,0,228,2109,1,0,0,0,230,2114,1,0,0,0,232,2149,1,0,0,0,234,2183,
        1,0,0,0,236,2187,1,0,0,0,238,2189,1,0,0,0,240,2191,1,0,0,0,242,2208,
        1,0,0,0,244,2210,1,0,0,0,246,2212,1,0,0,0,248,2214,1,0,0,0,250,2216,
        1,0,0,0,252,2218,1,0,0,0,254,2220,1,0,0,0,256,2222,1,0,0,0,258,2224,
        1,0,0,0,260,2226,1,0,0,0,262,2228,1,0,0,0,264,265,3,8,4,0,265,266,
        5,0,0,1,266,1,1,0,0,0,267,268,5,1,0,0,268,269,5,2,0,0,269,274,3,
        2,1,0,270,271,5,3,0,0,271,273,3,2,1,0,272,270,1,0,0,0,273,276,1,
        0,0,0,274,272,1,0,0,0,274,275,1,0,0,0,275,281,1,0,0,0,276,274,1,
        0,0,0,277,278,5,4,0,0,278,279,5,5,0,0,279,280,5,6,0,0,280,282,3,
        194,97,0,281,277,1,0,0,0,281,282,1,0,0,0,282,283,1,0,0,0,283,284,
        5,7,0,0,284,287,1,0,0,0,285,287,3,18,9,0,286,267,1,0,0,0,286,285,
        1,0,0,0,287,3,1,0,0,0,288,289,5,1,0,0,289,290,5,2,0,0,290,295,3,
        4,2,0,291,292,5,3,0,0,292,294,3,4,2,0,293,291,1,0,0,0,294,297,1,
        0,0,0,295,293,1,0,0,0,295,296,1,0,0,0,296,302,1,0,0,0,297,295,1,
        0,0,0,298,299,5,4,0,0,299,300,5,5,0,0,300,301,5,6,0,0,301,303,3,
        194,97,0,302,298,1,0,0,0,302,303,1,0,0,0,303,304,1,0,0,0,304,305,
        5,7,0,0,305,321,1,0,0,0,306,307,5,8,0,0,307,308,5,2,0,0,308,313,
        3,4,2,0,309,310,5,4,0,0,310,311,5,5,0,0,311,312,5,6,0,0,312,314,
        3,194,97,0,313,309,1,0,0,0,313,314,1,0,0,0,314,315,1,0,0,0,315,316,
        5,7,0,0,316,321,1,0,0,0,317,319,3,172,86,0,318,317,1,0,0,0,318,319,
        1,0,0,0,319,321,1,0,0,0,320,288,1,0,0,0,320,306,1,0,0,0,320,318,
        1,0,0,0,321,5,1,0,0,0,322,323,5,1,0,0,323,324,5,2,0,0,324,329,3,
        6,3,0,325,326,5,3,0,0,326,328,3,6,3,0,327,325,1,0,0,0,328,331,1,
        0,0,0,329,327,1,0,0,0,329,330,1,0,0,0,330,336,1,0,0,0,331,329,1,
        0,0,0,332,333,5,4,0,0,333,334,5,5,0,0,334,335,5,6,0,0,335,337,3,
        194,97,0,336,332,1,0,0,0,336,337,1,0,0,0,337,338,1,0,0,0,338,339,
        5,7,0,0,339,355,1,0,0,0,340,341,5,8,0,0,341,342,5,2,0,0,342,347,
        3,6,3,0,343,344,5,4,0,0,344,345,5,5,0,0,345,346,5,6,0,0,346,348,
        3,194,97,0,347,343,1,0,0,0,347,348,1,0,0,0,348,349,1,0,0,0,349,350,
        5,7,0,0,350,355,1,0,0,0,351,353,3,180,90,0,352,351,1,0,0,0,352,353,
        1,0,0,0,353,355,1,0,0,0,354,322,1,0,0,0,354,340,1,0,0,0,354,352,
        1,0,0,0,355,7,1,0,0,0,356,357,3,2,1,0,357,358,3,4,2,0,358,359,3,
        6,3,0,359,9,1,0,0,0,360,361,3,240,120,0,361,362,3,16,8,0,362,11,
        1,0,0,0,363,364,5,1,0,0,364,365,5,2,0,0,365,370,3,12,6,0,366,367,
        5,3,0,0,367,369,3,12,6,0,368,366,1,0,0,0,369,372,1,0,0,0,370,368,
        1,0,0,0,370,371,1,0,0,0,371,377,1,0,0,0,372,370,1,0,0,0,373,374,
        5,4,0,0,374,375,5,5,0,0,375,376,5,6,0,0,376,378,3,194,97,0,377,373,
        1,0,0,0,377,378,1,0,0,0,378,379,1,0,0,0,379,380,5,7,0,0,380,383,
        1,0,0,0,381,383,3,28,14,0,382,363,1,0,0,0,382,381,1,0,0,0,383,13,
        1,0,0,0,384,385,5,1,0,0,385,386,5,2,0,0,386,391,3,14,7,0,387,388,
        5,3,0,0,388,390,3,14,7,0,389,387,1,0,0,0,390,393,1,0,0,0,391,389,
        1,0,0,0,391,392,1,0,0,0,392,398,1,0,0,0,393,391,1,0,0,0,394,395,
        5,4,0,0,395,396,5,5,0,0,396,397,5,6,0,0,397,399,3,194,97,0,398,394,
        1,0,0,0,398,399,1,0,0,0,399,400,1,0,0,0,400,401,5,7,0,0,401,417,
        1,0,0,0,402,403,5,8,0,0,403,404,5,2,0,0,404,409,3,14,7,0,405,406,
        5,4,0,0,406,407,5,5,0,0,407,408,5,6,0,0,408,410,3,194,97,0,409,405,
        1,0,0,0,409,410,1,0,0,0,410,411,1,0,0,0,411,412,5,7,0,0,412,417,
        1,0,0,0,413,415,3,10,5,0,414,413,1,0,0,0,414,415,1,0,0,0,415,417,
        1,0,0,0,416,384,1,0,0,0,416,402,1,0,0,0,416,414,1,0,0,0,417,15,1,
        0,0,0,418,419,5,9,0,0,419,420,5,2,0,0,420,421,3,240,120,0,421,422,
        5,47,0,0,422,427,3,12,6,0,423,424,5,3,0,0,424,426,3,12,6,0,425,423,
        1,0,0,0,426,429,1,0,0,0,427,425,1,0,0,0,427,428,1,0,0,0,428,430,
        1,0,0,0,429,427,1,0,0,0,430,431,5,7,0,0,431,432,3,14,7,0,432,451,
        1,0,0,0,433,434,5,10,0,0,434,435,5,2,0,0,435,436,3,240,120,0,436,
        437,5,47,0,0,437,442,3,12,6,0,438,439,5,4,0,0,439,440,5,5,0,0,440,
        441,5,6,0,0,441,443,3,194,97,0,442,438,1,0,0,0,442,443,1,0,0,0,443,
        444,1,0,0,0,444,445,5,7,0,0,445,446,3,14,7,0,446,451,1,0,0,0,447,
        448,3,12,6,0,448,449,3,14,7,0,449,451,1,0,0,0,450,418,1,0,0,0,450,
        433,1,0,0,0,450,447,1,0,0,0,451,17,1,0,0,0,452,453,3,16,8,0,453,
        19,1,0,0,0,454,455,5,1,0,0,455,456,5,2,0,0,456,461,3,20,10,0,457,
        458,5,3,0,0,458,460,3,20,10,0,459,457,1,0,0,0,460,463,1,0,0,0,461,
        459,1,0,0,0,461,462,1,0,0,0,462,468,1,0,0,0,463,461,1,0,0,0,464,
        465,5,4,0,0,465,466,5,5,0,0,466,467,5,6,0,0,467,469,3,194,97,0,468,
        464,1,0,0,0,468,469,1,0,0,0,469,470,1,0,0,0,470,471,5,7,0,0,471,
        474,1,0,0,0,472,474,3,34,17,0,473,454,1,0,0,0,473,472,1,0,0,0,474,
        21,1,0,0,0,475,476,5,1,0,0,476,477,5,2,0,0,477,482,3,22,11,0,478,
        479,5,3,0,0,479,481,3,22,11,0,480,478,1,0,0,0,481,484,1,0,0,0,482,
        480,1,0,0,0,482,483,1,0,0,0,483,489,1,0,0,0,484,482,1,0,0,0,485,
        486,5,4,0,0,486,487,5,5,0,0,487,488,5,6,0,0,488,490,3,194,97,0,489,
        485,1,0,0,0,489,490,1,0,0,0,490,491,1,0,0,0,491,492,5,7,0,0,492,
        508,1,0,0,0,493,494,5,8,0,0,494,495,5,2,0,0,495,500,3,22,11,0,496,
        497,5,4,0,0,497,498,5,5,0,0,498,499,5,6,0,0,499,501,3,194,97,0,500,
        496,1,0,0,0,500,501,1,0,0,0,501,502,1,0,0,0,502,503,5,7,0,0,503,
        508,1,0,0,0,504,506,3,112,56,0,505,504,1,0,0,0,505,506,1,0,0,0,506,
        508,1,0,0,0,507,475,1,0,0,0,507,493,1,0,0,0,507,505,1,0,0,0,508,
        23,1,0,0,0,509,510,5,1,0,0,510,511,5,2,0,0,511,516,3,24,12,0,512,
        513,5,3,0,0,513,515,3,24,12,0,514,512,1,0,0,0,515,518,1,0,0,0,516,
        514,1,0,0,0,516,517,1,0,0,0,517,523,1,0,0,0,518,516,1,0,0,0,519,
        520,5,4,0,0,520,521,5,5,0,0,521,522,5,6,0,0,522,524,3,194,97,0,523,
        519,1,0,0,0,523,524,1,0,0,0,524,525,1,0,0,0,525,526,5,7,0,0,526,
        542,1,0,0,0,527,528,5,8,0,0,528,529,5,2,0,0,529,534,3,24,12,0,530,
        531,5,4,0,0,531,532,5,5,0,0,532,533,5,6,0,0,533,535,3,194,97,0,534,
        530,1,0,0,0,534,535,1,0,0,0,535,536,1,0,0,0,536,537,5,7,0,0,537,
        542,1,0,0,0,538,540,3,136,68,0,539,538,1,0,0,0,539,540,1,0,0,0,540,
        542,1,0,0,0,541,509,1,0,0,0,541,527,1,0,0,0,541,539,1,0,0,0,542,
        25,1,0,0,0,543,544,5,1,0,0,544,545,5,2,0,0,545,550,3,26,13,0,546,
        547,5,3,0,0,547,549,3,26,13,0,548,546,1,0,0,0,549,552,1,0,0,0,550,
        548,1,0,0,0,550,551,1,0,0,0,551,557,1,0,0,0,552,550,1,0,0,0,553,
        554,5,4,0,0,554,555,5,5,0,0,555,556,5,6,0,0,556,558,3,194,97,0,557,
        553,1,0,0,0,557,558,1,0,0,0,558,559,1,0,0,0,559,560,5,7,0,0,560,
        576,1,0,0,0,561,562,5,8,0,0,562,563,5,2,0,0,563,568,3,26,13,0,564,
        565,5,4,0,0,565,566,5,5,0,0,566,567,5,6,0,0,567,569,3,194,97,0,568,
        564,1,0,0,0,568,569,1,0,0,0,569,570,1,0,0,0,570,571,5,7,0,0,571,
        576,1,0,0,0,572,574,3,142,71,0,573,572,1,0,0,0,573,574,1,0,0,0,574,
        576,1,0,0,0,575,543,1,0,0,0,575,561,1,0,0,0,575,573,1,0,0,0,576,
        27,1,0,0,0,577,578,3,20,10,0,578,579,3,22,11,0,579,580,3,24,12,0,
        580,581,3,26,13,0,581,29,1,0,0,0,582,583,5,1,0,0,583,584,5,2,0,0,
        584,589,3,30,15,0,585,586,5,3,0,0,586,588,3,30,15,0,587,585,1,0,
        0,0,588,591,1,0,0,0,589,587,1,0,0,0,589,590,1,0,0,0,590,596,1,0,
        0,0,591,589,1,0,0,0,592,593,5,4,0,0,593,594,5,5,0,0,594,595,5,6,
        0,0,595,597,3,194,97,0,596,592,1,0,0,0,596,597,1,0,0,0,597,598,1,
        0,0,0,598,599,5,7,0,0,599,615,1,0,0,0,600,601,5,8,0,0,601,602,5,
        2,0,0,602,607,3,30,15,0,603,604,5,4,0,0,604,605,5,5,0,0,605,606,
        5,6,0,0,606,608,3,194,97,0,607,603,1,0,0,0,607,608,1,0,0,0,608,609,
        1,0,0,0,609,610,5,7,0,0,610,615,1,0,0,0,611,613,3,38,19,0,612,611,
        1,0,0,0,612,613,1,0,0,0,613,615,1,0,0,0,614,582,1,0,0,0,614,600,
        1,0,0,0,614,612,1,0,0,0,615,31,1,0,0,0,616,617,5,1,0,0,617,618,5,
        2,0,0,618,623,3,32,16,0,619,620,5,3,0,0,620,622,3,32,16,0,621,619,
        1,0,0,0,622,625,1,0,0,0,623,621,1,0,0,0,623,624,1,0,0,0,624,630,
        1,0,0,0,625,623,1,0,0,0,626,627,5,4,0,0,627,628,5,5,0,0,628,629,
        5,6,0,0,629,631,3,194,97,0,630,626,1,0,0,0,630,631,1,0,0,0,631,632,
        1,0,0,0,632,633,5,7,0,0,633,636,1,0,0,0,634,636,3,52,26,0,635,616,
        1,0,0,0,635,634,1,0,0,0,636,33,1,0,0,0,637,638,5,91,0,0,638,639,
        3,30,15,0,639,640,3,32,16,0,640,35,1,0,0,0,641,642,5,1,0,0,642,643,
        5,2,0,0,643,648,3,36,18,0,644,645,5,3,0,0,645,647,3,36,18,0,646,
        644,1,0,0,0,647,650,1,0,0,0,648,646,1,0,0,0,648,649,1,0,0,0,649,
        655,1,0,0,0,650,648,1,0,0,0,651,652,5,4,0,0,652,653,5,5,0,0,653,
        654,5,6,0,0,654,656,3,194,97,0,655,651,1,0,0,0,655,656,1,0,0,0,656,
        657,1,0,0,0,657,658,5,7,0,0,658,661,1,0,0,0,659,661,3,42,21,0,660,
        641,1,0,0,0,660,659,1,0,0,0,661,37,1,0,0,0,662,665,3,36,18,0,663,
        665,3,262,131,0,664,662,1,0,0,0,664,663,1,0,0,0,665,39,1,0,0,0,666,
        667,5,1,0,0,667,668,5,2,0,0,668,673,3,40,20,0,669,670,5,3,0,0,670,
        672,3,40,20,0,671,669,1,0,0,0,672,675,1,0,0,0,673,671,1,0,0,0,673,
        674,1,0,0,0,674,680,1,0,0,0,675,673,1,0,0,0,676,677,5,4,0,0,677,
        678,5,5,0,0,678,679,5,6,0,0,679,681,3,194,97,0,680,676,1,0,0,0,680,
        681,1,0,0,0,681,682,1,0,0,0,682,683,5,7,0,0,683,686,1,0,0,0,684,
        686,3,252,126,0,685,666,1,0,0,0,685,684,1,0,0,0,686,41,1,0,0,0,687,
        688,5,45,0,0,688,689,3,40,20,0,689,43,1,0,0,0,690,691,3,254,127,
        0,691,692,3,50,25,0,692,45,1,0,0,0,693,694,5,1,0,0,694,695,5,2,0,
        0,695,700,3,46,23,0,696,697,5,3,0,0,697,699,3,46,23,0,698,696,1,
        0,0,0,699,702,1,0,0,0,700,698,1,0,0,0,700,701,1,0,0,0,701,707,1,
        0,0,0,702,700,1,0,0,0,703,704,5,4,0,0,704,705,5,5,0,0,705,706,5,
        6,0,0,706,708,3,194,97,0,707,703,1,0,0,0,707,708,1,0,0,0,708,709,
        1,0,0,0,709,710,5,7,0,0,710,713,1,0,0,0,711,713,3,62,31,0,712,693,
        1,0,0,0,712,711,1,0,0,0,713,47,1,0,0,0,714,715,5,1,0,0,715,716,5,
        2,0,0,716,721,3,48,24,0,717,718,5,3,0,0,718,720,3,48,24,0,719,717,
        1,0,0,0,720,723,1,0,0,0,721,719,1,0,0,0,721,722,1,0,0,0,722,728,
        1,0,0,0,723,721,1,0,0,0,724,725,5,4,0,0,725,726,5,5,0,0,726,727,
        5,6,0,0,727,729,3,194,97,0,728,724,1,0,0,0,728,729,1,0,0,0,729,730,
        1,0,0,0,730,731,5,7,0,0,731,747,1,0,0,0,732,733,5,8,0,0,733,734,
        5,2,0,0,734,739,3,48,24,0,735,736,5,4,0,0,736,737,5,5,0,0,737,738,
        5,6,0,0,738,740,3,194,97,0,739,735,1,0,0,0,739,740,1,0,0,0,740,741,
        1,0,0,0,741,742,5,7,0,0,742,747,1,0,0,0,743,745,3,44,22,0,744,743,
        1,0,0,0,744,745,1,0,0,0,745,747,1,0,0,0,746,714,1,0,0,0,746,732,
        1,0,0,0,746,744,1,0,0,0,747,49,1,0,0,0,748,749,5,9,0,0,749,750,5,
        2,0,0,750,751,3,254,127,0,751,752,5,47,0,0,752,757,3,46,23,0,753,
        754,5,3,0,0,754,756,3,46,23,0,755,753,1,0,0,0,756,759,1,0,0,0,757,
        755,1,0,0,0,757,758,1,0,0,0,758,760,1,0,0,0,759,757,1,0,0,0,760,
        761,5,7,0,0,761,762,3,48,24,0,762,781,1,0,0,0,763,764,5,10,0,0,764,
        765,5,2,0,0,765,766,3,254,127,0,766,767,5,47,0,0,767,772,3,46,23,
        0,768,769,5,4,0,0,769,770,5,5,0,0,770,771,5,6,0,0,771,773,3,194,
        97,0,772,768,1,0,0,0,772,773,1,0,0,0,773,774,1,0,0,0,774,775,5,7,
        0,0,775,776,3,48,24,0,776,781,1,0,0,0,777,778,3,46,23,0,778,779,
        3,48,24,0,779,781,1,0,0,0,780,748,1,0,0,0,780,763,1,0,0,0,780,777,
        1,0,0,0,781,51,1,0,0,0,782,783,3,50,25,0,783,53,1,0,0,0,784,785,
        5,1,0,0,785,786,5,2,0,0,786,791,3,54,27,0,787,788,5,3,0,0,788,790,
        3,54,27,0,789,787,1,0,0,0,790,793,1,0,0,0,791,789,1,0,0,0,791,792,
        1,0,0,0,792,798,1,0,0,0,793,791,1,0,0,0,794,795,5,4,0,0,795,796,
        5,5,0,0,796,797,5,6,0,0,797,799,3,194,97,0,798,794,1,0,0,0,798,799,
        1,0,0,0,799,800,1,0,0,0,800,801,5,7,0,0,801,804,1,0,0,0,802,804,
        3,68,34,0,803,784,1,0,0,0,803,802,1,0,0,0,804,55,1,0,0,0,805,806,
        5,1,0,0,806,807,5,2,0,0,807,812,3,56,28,0,808,809,5,3,0,0,809,811,
        3,56,28,0,810,808,1,0,0,0,811,814,1,0,0,0,812,810,1,0,0,0,812,813,
        1,0,0,0,813,819,1,0,0,0,814,812,1,0,0,0,815,816,5,4,0,0,816,817,
        5,5,0,0,817,818,5,6,0,0,818,820,3,194,97,0,819,815,1,0,0,0,819,820,
        1,0,0,0,820,821,1,0,0,0,821,822,5,7,0,0,822,825,1,0,0,0,823,825,
        3,66,33,0,824,805,1,0,0,0,824,823,1,0,0,0,825,57,1,0,0,0,826,827,
        5,1,0,0,827,828,5,2,0,0,828,833,3,58,29,0,829,830,5,3,0,0,830,832,
        3,58,29,0,831,829,1,0,0,0,832,835,1,0,0,0,833,831,1,0,0,0,833,834,
        1,0,0,0,834,840,1,0,0,0,835,833,1,0,0,0,836,837,5,4,0,0,837,838,
        5,5,0,0,838,839,5,6,0,0,839,841,3,194,97,0,840,836,1,0,0,0,840,841,
        1,0,0,0,841,842,1,0,0,0,842,843,5,7,0,0,843,846,1,0,0,0,844,846,
        3,76,38,0,845,826,1,0,0,0,845,844,1,0,0,0,846,59,1,0,0,0,847,848,
        5,1,0,0,848,849,5,2,0,0,849,854,3,60,30,0,850,851,5,3,0,0,851,853,
        3,60,30,0,852,850,1,0,0,0,853,856,1,0,0,0,854,852,1,0,0,0,854,855,
        1,0,0,0,855,861,1,0,0,0,856,854,1,0,0,0,857,858,5,4,0,0,858,859,
        5,5,0,0,859,860,5,6,0,0,860,862,3,194,97,0,861,857,1,0,0,0,861,862,
        1,0,0,0,862,863,1,0,0,0,863,864,5,7,0,0,864,867,1,0,0,0,865,867,
        3,80,40,0,866,847,1,0,0,0,866,865,1,0,0,0,867,61,1,0,0,0,868,873,
        3,54,27,0,869,873,3,56,28,0,870,873,3,58,29,0,871,873,3,60,30,0,
        872,868,1,0,0,0,872,869,1,0,0,0,872,870,1,0,0,0,872,871,1,0,0,0,
        873,63,1,0,0,0,874,875,5,1,0,0,875,876,5,2,0,0,876,881,3,64,32,0,
        877,878,5,3,0,0,878,880,3,64,32,0,879,877,1,0,0,0,880,883,1,0,0,
        0,881,879,1,0,0,0,881,882,1,0,0,0,882,888,1,0,0,0,883,881,1,0,0,
        0,884,885,5,4,0,0,885,886,5,5,0,0,886,887,5,6,0,0,887,889,3,194,
        97,0,888,884,1,0,0,0,888,889,1,0,0,0,889,890,1,0,0,0,890,891,5,7,
        0,0,891,894,1,0,0,0,892,894,3,250,125,0,893,874,1,0,0,0,893,892,
        1,0,0,0,894,65,1,0,0,0,895,896,3,64,32,0,896,897,5,11,0,0,897,67,
        1,0,0,0,898,899,5,32,0,0,899,69,1,0,0,0,900,901,5,37,0,0,901,902,
        3,250,125,0,902,71,1,0,0,0,903,904,5,1,0,0,904,905,5,2,0,0,905,910,
        3,72,36,0,906,907,5,3,0,0,907,909,3,72,36,0,908,906,1,0,0,0,909,
        912,1,0,0,0,910,908,1,0,0,0,910,911,1,0,0,0,911,917,1,0,0,0,912,
        910,1,0,0,0,913,914,5,4,0,0,914,915,5,5,0,0,915,916,5,6,0,0,916,
        918,3,194,97,0,917,913,1,0,0,0,917,918,1,0,0,0,918,919,1,0,0,0,919,
        920,5,7,0,0,920,923,1,0,0,0,921,923,3,194,97,0,922,903,1,0,0,0,922,
        921,1,0,0,0,923,73,1,0,0,0,924,925,5,1,0,0,925,926,5,2,0,0,926,931,
        3,74,37,0,927,928,5,3,0,0,928,930,3,74,37,0,929,927,1,0,0,0,930,
        933,1,0,0,0,931,929,1,0,0,0,931,932,1,0,0,0,932,938,1,0,0,0,933,
        931,1,0,0,0,934,935,5,4,0,0,935,936,5,5,0,0,936,937,5,6,0,0,937,
        939,3,194,97,0,938,934,1,0,0,0,938,939,1,0,0,0,939,940,1,0,0,0,940,
        941,5,7,0,0,941,957,1,0,0,0,942,943,5,8,0,0,943,944,5,2,0,0,944,
        949,3,74,37,0,945,946,5,4,0,0,946,947,5,5,0,0,947,948,5,6,0,0,948,
        950,3,194,97,0,949,945,1,0,0,0,949,950,1,0,0,0,950,951,1,0,0,0,951,
        952,5,7,0,0,952,957,1,0,0,0,953,955,3,70,35,0,954,953,1,0,0,0,954,
        955,1,0,0,0,955,957,1,0,0,0,956,924,1,0,0,0,956,942,1,0,0,0,956,
        954,1,0,0,0,957,75,1,0,0,0,958,959,3,72,36,0,959,960,3,74,37,0,960,
        77,1,0,0,0,961,962,5,1,0,0,962,963,5,2,0,0,963,968,3,78,39,0,964,
        965,5,3,0,0,965,967,3,78,39,0,966,964,1,0,0,0,967,970,1,0,0,0,968,
        966,1,0,0,0,968,969,1,0,0,0,969,975,1,0,0,0,970,968,1,0,0,0,971,
        972,5,4,0,0,972,973,5,5,0,0,973,974,5,6,0,0,974,976,3,194,97,0,975,
        971,1,0,0,0,975,976,1,0,0,0,976,977,1,0,0,0,977,978,5,7,0,0,978,
        981,1,0,0,0,979,981,3,184,92,0,980,961,1,0,0,0,980,979,1,0,0,0,981,
        79,1,0,0,0,982,983,3,78,39,0,983,984,3,74,37,0,984,81,1,0,0,0,985,
        986,3,254,127,0,986,987,3,88,44,0,987,83,1,0,0,0,988,989,5,1,0,0,
        989,990,5,2,0,0,990,995,3,84,42,0,991,992,5,3,0,0,992,994,3,84,42,
        0,993,991,1,0,0,0,994,997,1,0,0,0,995,993,1,0,0,0,995,996,1,0,0,
        0,996,1002,1,0,0,0,997,995,1,0,0,0,998,999,5,4,0,0,999,1000,5,5,
        0,0,1000,1001,5,6,0,0,1001,1003,3,194,97,0,1002,998,1,0,0,0,1002,
        1003,1,0,0,0,1003,1004,1,0,0,0,1004,1005,5,7,0,0,1005,1008,1,0,0,
        0,1006,1008,3,120,60,0,1007,988,1,0,0,0,1007,1006,1,0,0,0,1008,85,
        1,0,0,0,1009,1010,5,1,0,0,1010,1011,5,2,0,0,1011,1016,3,86,43,0,
        1012,1013,5,3,0,0,1013,1015,3,86,43,0,1014,1012,1,0,0,0,1015,1018,
        1,0,0,0,1016,1014,1,0,0,0,1016,1017,1,0,0,0,1017,1023,1,0,0,0,1018,
        1016,1,0,0,0,1019,1020,5,4,0,0,1020,1021,5,5,0,0,1021,1022,5,6,0,
        0,1022,1024,3,194,97,0,1023,1019,1,0,0,0,1023,1024,1,0,0,0,1024,
        1025,1,0,0,0,1025,1026,5,7,0,0,1026,1042,1,0,0,0,1027,1028,5,8,0,
        0,1028,1029,5,2,0,0,1029,1034,3,86,43,0,1030,1031,5,4,0,0,1031,1032,
        5,5,0,0,1032,1033,5,6,0,0,1033,1035,3,194,97,0,1034,1030,1,0,0,0,
        1034,1035,1,0,0,0,1035,1036,1,0,0,0,1036,1037,5,7,0,0,1037,1042,
        1,0,0,0,1038,1040,3,82,41,0,1039,1038,1,0,0,0,1039,1040,1,0,0,0,
        1040,1042,1,0,0,0,1041,1009,1,0,0,0,1041,1027,1,0,0,0,1041,1039,
        1,0,0,0,1042,87,1,0,0,0,1043,1044,5,9,0,0,1044,1045,5,2,0,0,1045,
        1046,3,254,127,0,1046,1047,5,47,0,0,1047,1052,3,84,42,0,1048,1049,
        5,3,0,0,1049,1051,3,84,42,0,1050,1048,1,0,0,0,1051,1054,1,0,0,0,
        1052,1050,1,0,0,0,1052,1053,1,0,0,0,1053,1055,1,0,0,0,1054,1052,
        1,0,0,0,1055,1056,5,7,0,0,1056,1057,3,86,43,0,1057,1076,1,0,0,0,
        1058,1059,5,10,0,0,1059,1060,5,2,0,0,1060,1061,3,254,127,0,1061,
        1062,5,47,0,0,1062,1067,3,84,42,0,1063,1064,5,4,0,0,1064,1065,5,
        5,0,0,1065,1066,5,6,0,0,1066,1068,3,194,97,0,1067,1063,1,0,0,0,1067,
        1068,1,0,0,0,1068,1069,1,0,0,0,1069,1070,5,7,0,0,1070,1071,3,86,
        43,0,1071,1076,1,0,0,0,1072,1073,3,84,42,0,1073,1074,3,86,43,0,1074,
        1076,1,0,0,0,1075,1043,1,0,0,0,1075,1058,1,0,0,0,1075,1072,1,0,0,
        0,1076,89,1,0,0,0,1077,1078,3,88,44,0,1078,91,1,0,0,0,1079,1080,
        3,84,42,0,1080,1081,5,77,0,0,1081,1082,3,194,97,0,1082,93,1,0,0,
        0,1083,1084,3,260,130,0,1084,1085,3,100,50,0,1085,95,1,0,0,0,1086,
        1087,5,1,0,0,1087,1088,5,2,0,0,1088,1093,3,96,48,0,1089,1090,5,3,
        0,0,1090,1092,3,96,48,0,1091,1089,1,0,0,0,1092,1095,1,0,0,0,1093,
        1091,1,0,0,0,1093,1094,1,0,0,0,1094,1100,1,0,0,0,1095,1093,1,0,0,
        0,1096,1097,5,4,0,0,1097,1098,5,5,0,0,1098,1099,5,6,0,0,1099,1101,
        3,194,97,0,1100,1096,1,0,0,0,1100,1101,1,0,0,0,1101,1102,1,0,0,0,
        1102,1103,5,7,0,0,1103,1106,1,0,0,0,1104,1106,3,92,46,0,1105,1086,
        1,0,0,0,1105,1104,1,0,0,0,1106,97,1,0,0,0,1107,1108,5,1,0,0,1108,
        1109,5,2,0,0,1109,1114,3,98,49,0,1110,1111,5,3,0,0,1111,1113,3,98,
        49,0,1112,1110,1,0,0,0,1113,1116,1,0,0,0,1114,1112,1,0,0,0,1114,
        1115,1,0,0,0,1115,1121,1,0,0,0,1116,1114,1,0,0,0,1117,1118,5,4,0,
        0,1118,1119,5,5,0,0,1119,1120,5,6,0,0,1120,1122,3,194,97,0,1121,
        1117,1,0,0,0,1121,1122,1,0,0,0,1122,1123,1,0,0,0,1123,1124,5,7,0,
        0,1124,1140,1,0,0,0,1125,1126,5,8,0,0,1126,1127,5,2,0,0,1127,1132,
        3,98,49,0,1128,1129,5,4,0,0,1129,1130,5,5,0,0,1130,1131,5,6,0,0,
        1131,1133,3,194,97,0,1132,1128,1,0,0,0,1132,1133,1,0,0,0,1133,1134,
        1,0,0,0,1134,1135,5,7,0,0,1135,1140,1,0,0,0,1136,1138,3,94,47,0,
        1137,1136,1,0,0,0,1137,1138,1,0,0,0,1138,1140,1,0,0,0,1139,1107,
        1,0,0,0,1139,1125,1,0,0,0,1139,1137,1,0,0,0,1140,99,1,0,0,0,1141,
        1142,5,9,0,0,1142,1143,5,2,0,0,1143,1144,3,260,130,0,1144,1145,5,
        47,0,0,1145,1150,3,96,48,0,1146,1147,5,3,0,0,1147,1149,3,96,48,0,
        1148,1146,1,0,0,0,1149,1152,1,0,0,0,1150,1148,1,0,0,0,1150,1151,
        1,0,0,0,1151,1153,1,0,0,0,1152,1150,1,0,0,0,1153,1154,5,7,0,0,1154,
        1155,3,98,49,0,1155,1174,1,0,0,0,1156,1157,5,10,0,0,1157,1158,5,
        2,0,0,1158,1159,3,260,130,0,1159,1160,5,47,0,0,1160,1165,3,96,48,
        0,1161,1162,5,4,0,0,1162,1163,5,5,0,0,1163,1164,5,6,0,0,1164,1166,
        3,194,97,0,1165,1161,1,0,0,0,1165,1166,1,0,0,0,1166,1167,1,0,0,0,
        1167,1168,5,7,0,0,1168,1169,3,98,49,0,1169,1174,1,0,0,0,1170,1171,
        3,96,48,0,1171,1172,3,98,49,0,1172,1174,1,0,0,0,1173,1141,1,0,0,
        0,1173,1156,1,0,0,0,1173,1170,1,0,0,0,1174,101,1,0,0,0,1175,1176,
        5,65,0,0,1176,1177,3,100,50,0,1177,103,1,0,0,0,1178,1179,5,1,0,0,
        1179,1180,5,2,0,0,1180,1185,3,104,52,0,1181,1182,5,3,0,0,1182,1184,
        3,104,52,0,1183,1181,1,0,0,0,1184,1187,1,0,0,0,1185,1183,1,0,0,0,
        1185,1186,1,0,0,0,1186,1192,1,0,0,0,1187,1185,1,0,0,0,1188,1189,
        5,4,0,0,1189,1190,5,5,0,0,1190,1191,5,6,0,0,1191,1193,3,194,97,0,
        1192,1188,1,0,0,0,1192,1193,1,0,0,0,1193,1194,1,0,0,0,1194,1195,
        5,7,0,0,1195,1211,1,0,0,0,1196,1197,5,8,0,0,1197,1198,5,2,0,0,1198,
        1203,3,104,52,0,1199,1200,5,4,0,0,1200,1201,5,5,0,0,1201,1202,5,
        6,0,0,1202,1204,3,194,97,0,1203,1199,1,0,0,0,1203,1204,1,0,0,0,1204,
        1205,1,0,0,0,1205,1206,5,7,0,0,1206,1211,1,0,0,0,1207,1209,3,102,
        51,0,1208,1207,1,0,0,0,1208,1209,1,0,0,0,1209,1211,1,0,0,0,1210,
        1178,1,0,0,0,1210,1196,1,0,0,0,1210,1208,1,0,0,0,1211,105,1,0,0,
        0,1212,1213,3,84,42,0,1213,1214,3,104,52,0,1214,107,1,0,0,0,1215,
        1218,3,90,45,0,1216,1218,3,106,53,0,1217,1215,1,0,0,0,1217,1216,
        1,0,0,0,1218,109,1,0,0,0,1219,1220,5,1,0,0,1220,1221,5,2,0,0,1221,
        1226,3,110,55,0,1222,1223,5,3,0,0,1223,1225,3,110,55,0,1224,1222,
        1,0,0,0,1225,1228,1,0,0,0,1226,1224,1,0,0,0,1226,1227,1,0,0,0,1227,
        1233,1,0,0,0,1228,1226,1,0,0,0,1229,1230,5,4,0,0,1230,1231,5,5,0,
        0,1231,1232,5,6,0,0,1232,1234,3,194,97,0,1233,1229,1,0,0,0,1233,
        1234,1,0,0,0,1234,1235,1,0,0,0,1235,1236,5,7,0,0,1236,1239,1,0,0,
        0,1237,1239,3,108,54,0,1238,1219,1,0,0,0,1238,1237,1,0,0,0,1239,
        111,1,0,0,0,1240,1241,5,54,0,0,1241,1242,3,110,55,0,1242,113,1,0,
        0,0,1243,1244,5,1,0,0,1244,1245,5,2,0,0,1245,1250,3,114,57,0,1246,
        1247,5,3,0,0,1247,1249,3,114,57,0,1248,1246,1,0,0,0,1249,1252,1,
        0,0,0,1250,1248,1,0,0,0,1250,1251,1,0,0,0,1251,1257,1,0,0,0,1252,
        1250,1,0,0,0,1253,1254,5,4,0,0,1254,1255,5,5,0,0,1255,1256,5,6,0,
        0,1256,1258,3,194,97,0,1257,1253,1,0,0,0,1257,1258,1,0,0,0,1258,
        1259,1,0,0,0,1259,1260,5,7,0,0,1260,1263,1,0,0,0,1261,1263,3,126,
        63,0,1262,1243,1,0,0,0,1262,1261,1,0,0,0,1263,115,1,0,0,0,1264,1265,
        5,1,0,0,1265,1266,5,2,0,0,1266,1271,3,116,58,0,1267,1268,5,3,0,0,
        1268,1270,3,116,58,0,1269,1267,1,0,0,0,1270,1273,1,0,0,0,1271,1269,
        1,0,0,0,1271,1272,1,0,0,0,1272,1278,1,0,0,0,1273,1271,1,0,0,0,1274,
        1275,5,4,0,0,1275,1276,5,5,0,0,1276,1277,5,6,0,0,1277,1279,3,194,
        97,0,1278,1274,1,0,0,0,1278,1279,1,0,0,0,1279,1280,1,0,0,0,1280,
        1281,5,7,0,0,1281,1284,1,0,0,0,1282,1284,3,122,61,0,1283,1264,1,
        0,0,0,1283,1282,1,0,0,0,1284,117,1,0,0,0,1285,1286,5,1,0,0,1286,
        1287,5,2,0,0,1287,1292,3,118,59,0,1288,1289,5,3,0,0,1289,1291,3,
        118,59,0,1290,1288,1,0,0,0,1291,1294,1,0,0,0,1292,1290,1,0,0,0,1292,
        1293,1,0,0,0,1293,1299,1,0,0,0,1294,1292,1,0,0,0,1295,1296,5,4,0,
        0,1296,1297,5,5,0,0,1297,1298,5,6,0,0,1298,1300,3,194,97,0,1299,
        1295,1,0,0,0,1299,1300,1,0,0,0,1300,1301,1,0,0,0,1301,1302,5,7,0,
        0,1302,1305,1,0,0,0,1303,1305,3,124,62,0,1304,1285,1,0,0,0,1304,
        1303,1,0,0,0,1305,119,1,0,0,0,1306,1310,3,114,57,0,1307,1310,3,116,
        58,0,1308,1310,3,118,59,0,1309,1306,1,0,0,0,1309,1307,1,0,0,0,1309,
        1308,1,0,0,0,1310,121,1,0,0,0,1311,1313,3,250,125,0,1312,1314,3,
        70,35,0,1313,1312,1,0,0,0,1313,1314,1,0,0,0,1314,123,1,0,0,0,1315,
        1316,5,12,0,0,1316,1317,3,8,4,0,1317,1319,5,13,0,0,1318,1320,3,70,
        35,0,1319,1318,1,0,0,0,1319,1320,1,0,0,0,1320,125,1,0,0,0,1321,1323,
        3,228,114,0,1322,1324,3,70,35,0,1323,1322,1,0,0,0,1323,1324,1,0,
        0,0,1324,127,1,0,0,0,1325,1328,3,256,128,0,1326,1328,3,258,129,0,
        1327,1325,1,0,0,0,1327,1326,1,0,0,0,1328,129,1,0,0,0,1329,1330,3,
        128,64,0,1330,1331,3,134,67,0,1331,131,1,0,0,0,1332,1333,5,1,0,0,
        1333,1334,5,2,0,0,1334,1339,3,132,66,0,1335,1336,5,3,0,0,1336,1338,
        3,132,66,0,1337,1335,1,0,0,0,1338,1341,1,0,0,0,1339,1337,1,0,0,0,
        1339,1340,1,0,0,0,1340,1346,1,0,0,0,1341,1339,1,0,0,0,1342,1343,
        5,4,0,0,1343,1344,5,5,0,0,1344,1345,5,6,0,0,1345,1347,3,194,97,0,
        1346,1342,1,0,0,0,1346,1347,1,0,0,0,1347,1348,1,0,0,0,1348,1349,
        5,7,0,0,1349,1365,1,0,0,0,1350,1351,5,8,0,0,1351,1352,5,2,0,0,1352,
        1357,3,132,66,0,1353,1354,5,4,0,0,1354,1355,5,5,0,0,1355,1356,5,
        6,0,0,1356,1358,3,194,97,0,1357,1353,1,0,0,0,1357,1358,1,0,0,0,1358,
        1359,1,0,0,0,1359,1360,5,7,0,0,1360,1365,1,0,0,0,1361,1363,3,130,
        65,0,1362,1361,1,0,0,0,1362,1363,1,0,0,0,1363,1365,1,0,0,0,1364,
        1332,1,0,0,0,1364,1350,1,0,0,0,1364,1362,1,0,0,0,1365,133,1,0,0,
        0,1366,1367,5,9,0,0,1367,1368,5,2,0,0,1368,1369,3,128,64,0,1369,
        1370,5,47,0,0,1370,1375,3,72,36,0,1371,1372,5,3,0,0,1372,1374,3,
        72,36,0,1373,1371,1,0,0,0,1374,1377,1,0,0,0,1375,1373,1,0,0,0,1375,
        1376,1,0,0,0,1376,1378,1,0,0,0,1377,1375,1,0,0,0,1378,1379,5,7,0,
        0,1379,1380,3,132,66,0,1380,1399,1,0,0,0,1381,1382,5,10,0,0,1382,
        1383,5,2,0,0,1383,1384,3,128,64,0,1384,1385,5,47,0,0,1385,1390,3,
        72,36,0,1386,1387,5,4,0,0,1387,1388,5,5,0,0,1388,1389,5,6,0,0,1389,
        1391,3,194,97,0,1390,1386,1,0,0,0,1390,1391,1,0,0,0,1391,1392,1,
        0,0,0,1392,1393,5,7,0,0,1393,1394,3,132,66,0,1394,1399,1,0,0,0,1395,
        1396,3,72,36,0,1396,1397,3,132,66,0,1397,1399,1,0,0,0,1398,1366,
        1,0,0,0,1398,1381,1,0,0,0,1398,1395,1,0,0,0,1399,135,1,0,0,0,1400,
        1401,5,103,0,0,1401,1402,3,134,67,0,1402,137,1,0,0,0,1403,1404,5,
        1,0,0,1404,1405,5,2,0,0,1405,1410,3,138,69,0,1406,1407,5,3,0,0,1407,
        1409,3,138,69,0,1408,1406,1,0,0,0,1409,1412,1,0,0,0,1410,1408,1,
        0,0,0,1410,1411,1,0,0,0,1411,1417,1,0,0,0,1412,1410,1,0,0,0,1413,
        1414,5,4,0,0,1414,1415,5,5,0,0,1415,1416,5,6,0,0,1416,1418,3,194,
        97,0,1417,1413,1,0,0,0,1417,1418,1,0,0,0,1418,1419,1,0,0,0,1419,
        1420,5,7,0,0,1420,1423,1,0,0,0,1421,1423,3,152,76,0,1422,1403,1,
        0,0,0,1422,1421,1,0,0,0,1423,139,1,0,0,0,1424,1425,5,1,0,0,1425,
        1426,5,2,0,0,1426,1431,3,140,70,0,1427,1428,5,3,0,0,1428,1430,3,
        140,70,0,1429,1427,1,0,0,0,1430,1433,1,0,0,0,1431,1429,1,0,0,0,1431,
        1432,1,0,0,0,1432,1438,1,0,0,0,1433,1431,1,0,0,0,1434,1435,5,4,0,
        0,1435,1436,5,5,0,0,1436,1437,5,6,0,0,1437,1439,3,194,97,0,1438,
        1434,1,0,0,0,1438,1439,1,0,0,0,1439,1440,1,0,0,0,1440,1441,5,7,0,
        0,1441,1457,1,0,0,0,1442,1443,5,8,0,0,1443,1444,5,2,0,0,1444,1449,
        3,140,70,0,1445,1446,5,4,0,0,1446,1447,5,5,0,0,1447,1448,5,6,0,0,
        1448,1450,3,194,97,0,1449,1445,1,0,0,0,1449,1450,1,0,0,0,1450,1451,
        1,0,0,0,1451,1452,5,7,0,0,1452,1457,1,0,0,0,1453,1455,3,162,81,0,
        1454,1453,1,0,0,0,1454,1455,1,0,0,0,1455,1457,1,0,0,0,1456,1424,
        1,0,0,0,1456,1442,1,0,0,0,1456,1454,1,0,0,0,1457,141,1,0,0,0,1458,
        1459,5,56,0,0,1459,1460,5,40,0,0,1460,1461,3,138,69,0,1461,1462,
        3,140,70,0,1462,143,1,0,0,0,1463,1464,3,254,127,0,1464,1465,3,150,
        75,0,1465,145,1,0,0,0,1466,1467,5,1,0,0,1467,1468,5,2,0,0,1468,1473,
        3,146,73,0,1469,1470,5,3,0,0,1470,1472,3,146,73,0,1471,1469,1,0,
        0,0,1472,1475,1,0,0,0,1473,1471,1,0,0,0,1473,1474,1,0,0,0,1474,1480,
        1,0,0,0,1475,1473,1,0,0,0,1476,1477,5,4,0,0,1477,1478,5,5,0,0,1478,
        1479,5,6,0,0,1479,1481,3,194,97,0,1480,1476,1,0,0,0,1480,1481,1,
        0,0,0,1481,1482,1,0,0,0,1482,1483,5,7,0,0,1483,1486,1,0,0,0,1484,
        1486,3,154,77,0,1485,1466,1,0,0,0,1485,1484,1,0,0,0,1486,147,1,0,
        0,0,1487,1488,5,1,0,0,1488,1489,5,2,0,0,1489,1494,3,148,74,0,1490,
        1491,5,3,0,0,1491,1493,3,148,74,0,1492,1490,1,0,0,0,1493,1496,1,
        0,0,0,1494,1492,1,0,0,0,1494,1495,1,0,0,0,1495,1501,1,0,0,0,1496,
        1494,1,0,0,0,1497,1498,5,4,0,0,1498,1499,5,5,0,0,1499,1500,5,6,0,
        0,1500,1502,3,194,97,0,1501,1497,1,0,0,0,1501,1502,1,0,0,0,1502,
        1503,1,0,0,0,1503,1504,5,7,0,0,1504,1520,1,0,0,0,1505,1506,5,8,0,
        0,1506,1507,5,2,0,0,1507,1512,3,148,74,0,1508,1509,5,4,0,0,1509,
        1510,5,5,0,0,1510,1511,5,6,0,0,1511,1513,3,194,97,0,1512,1508,1,
        0,0,0,1512,1513,1,0,0,0,1513,1514,1,0,0,0,1514,1515,5,7,0,0,1515,
        1520,1,0,0,0,1516,1518,3,144,72,0,1517,1516,1,0,0,0,1517,1518,1,
        0,0,0,1518,1520,1,0,0,0,1519,1487,1,0,0,0,1519,1505,1,0,0,0,1519,
        1517,1,0,0,0,1520,149,1,0,0,0,1521,1522,5,9,0,0,1522,1523,5,2,0,
        0,1523,1524,3,254,127,0,1524,1525,5,47,0,0,1525,1530,3,146,73,0,
        1526,1527,5,3,0,0,1527,1529,3,146,73,0,1528,1526,1,0,0,0,1529,1532,
        1,0,0,0,1530,1528,1,0,0,0,1530,1531,1,0,0,0,1531,1533,1,0,0,0,1532,
        1530,1,0,0,0,1533,1534,5,7,0,0,1534,1535,3,148,74,0,1535,1554,1,
        0,0,0,1536,1537,5,10,0,0,1537,1538,5,2,0,0,1538,1539,3,254,127,0,
        1539,1540,5,47,0,0,1540,1545,3,146,73,0,1541,1542,5,4,0,0,1542,1543,
        5,5,0,0,1543,1544,5,6,0,0,1544,1546,3,194,97,0,1545,1541,1,0,0,0,
        1545,1546,1,0,0,0,1546,1547,1,0,0,0,1547,1548,5,7,0,0,1548,1549,
        3,148,74,0,1549,1554,1,0,0,0,1550,1551,3,146,73,0,1551,1552,3,148,
        74,0,1552,1554,1,0,0,0,1553,1521,1,0,0,0,1553,1536,1,0,0,0,1553,
        1550,1,0,0,0,1554,151,1,0,0,0,1555,1556,3,150,75,0,1556,153,1,0,
        0,0,1557,1558,3,72,36,0,1558,155,1,0,0,0,1559,1560,3,256,128,0,1560,
        1561,3,160,80,0,1561,157,1,0,0,0,1562,1563,5,1,0,0,1563,1564,5,2,
        0,0,1564,1569,3,158,79,0,1565,1566,5,3,0,0,1566,1568,3,158,79,0,
        1567,1565,1,0,0,0,1568,1571,1,0,0,0,1569,1567,1,0,0,0,1569,1570,
        1,0,0,0,1570,1576,1,0,0,0,1571,1569,1,0,0,0,1572,1573,5,4,0,0,1573,
        1574,5,5,0,0,1574,1575,5,6,0,0,1575,1577,3,194,97,0,1576,1572,1,
        0,0,0,1576,1577,1,0,0,0,1577,1578,1,0,0,0,1578,1579,5,7,0,0,1579,
        1595,1,0,0,0,1580,1581,5,8,0,0,1581,1582,5,2,0,0,1582,1587,3,158,
        79,0,1583,1584,5,4,0,0,1584,1585,5,5,0,0,1585,1586,5,6,0,0,1586,
        1588,3,194,97,0,1587,1583,1,0,0,0,1587,1588,1,0,0,0,1588,1589,1,
        0,0,0,1589,1590,5,7,0,0,1590,1595,1,0,0,0,1591,1593,3,156,78,0,1592,
        1591,1,0,0,0,1592,1593,1,0,0,0,1593,1595,1,0,0,0,1594,1562,1,0,0,
        0,1594,1580,1,0,0,0,1594,1592,1,0,0,0,1595,159,1,0,0,0,1596,1597,
        5,9,0,0,1597,1598,5,2,0,0,1598,1599,3,256,128,0,1599,1600,5,47,0,
        0,1600,1605,3,72,36,0,1601,1602,5,3,0,0,1602,1604,3,72,36,0,1603,
        1601,1,0,0,0,1604,1607,1,0,0,0,1605,1603,1,0,0,0,1605,1606,1,0,0,
        0,1606,1608,1,0,0,0,1607,1605,1,0,0,0,1608,1609,5,7,0,0,1609,1610,
        3,158,79,0,1610,1629,1,0,0,0,1611,1612,5,10,0,0,1612,1613,5,2,0,
        0,1613,1614,3,256,128,0,1614,1615,5,47,0,0,1615,1620,3,72,36,0,1616,
        1617,5,4,0,0,1617,1618,5,5,0,0,1618,1619,5,6,0,0,1619,1621,3,194,
        97,0,1620,1616,1,0,0,0,1620,1621,1,0,0,0,1621,1622,1,0,0,0,1622,
        1623,5,7,0,0,1623,1624,3,158,79,0,1624,1629,1,0,0,0,1625,1626,3,
        72,36,0,1626,1627,3,158,79,0,1627,1629,1,0,0,0,1628,1596,1,0,0,0,
        1628,1611,1,0,0,0,1628,1625,1,0,0,0,1629,161,1,0,0,0,1630,1631,5,
        57,0,0,1631,1632,3,160,80,0,1632,163,1,0,0,0,1633,1634,3,254,127,
        0,1634,1635,3,170,85,0,1635,165,1,0,0,0,1636,1637,5,1,0,0,1637,1638,
        5,2,0,0,1638,1643,3,166,83,0,1639,1640,5,3,0,0,1640,1642,3,166,83,
        0,1641,1639,1,0,0,0,1642,1645,1,0,0,0,1643,1641,1,0,0,0,1643,1644,
        1,0,0,0,1644,1650,1,0,0,0,1645,1643,1,0,0,0,1646,1647,5,4,0,0,1647,
        1648,5,5,0,0,1648,1649,5,6,0,0,1649,1651,3,194,97,0,1650,1646,1,
        0,0,0,1650,1651,1,0,0,0,1651,1652,1,0,0,0,1652,1653,5,7,0,0,1653,
        1656,1,0,0,0,1654,1656,3,178,89,0,1655,1636,1,0,0,0,1655,1654,1,
        0,0,0,1656,167,1,0,0,0,1657,1658,5,1,0,0,1658,1659,5,2,0,0,1659,
        1664,3,168,84,0,1660,1661,5,3,0,0,1661,1663,3,168,84,0,1662,1660,
        1,0,0,0,1663,1666,1,0,0,0,1664,1662,1,0,0,0,1664,1665,1,0,0,0,1665,
        1671,1,0,0,0,1666,1664,1,0,0,0,1667,1668,5,4,0,0,1668,1669,5,5,0,
        0,1669,1670,5,6,0,0,1670,1672,3,194,97,0,1671,1667,1,0,0,0,1671,
        1672,1,0,0,0,1672,1673,1,0,0,0,1673,1674,5,7,0,0,1674,1690,1,0,0,
        0,1675,1676,5,8,0,0,1676,1677,5,2,0,0,1677,1682,3,168,84,0,1678,
        1679,5,4,0,0,1679,1680,5,5,0,0,1680,1681,5,6,0,0,1681,1683,3,194,
        97,0,1682,1678,1,0,0,0,1682,1683,1,0,0,0,1683,1684,1,0,0,0,1684,
        1685,5,7,0,0,1685,1690,1,0,0,0,1686,1688,3,164,82,0,1687,1686,1,
        0,0,0,1687,1688,1,0,0,0,1688,1690,1,0,0,0,1689,1657,1,0,0,0,1689,
        1675,1,0,0,0,1689,1687,1,0,0,0,1690,169,1,0,0,0,1691,1692,5,9,0,
        0,1692,1693,5,2,0,0,1693,1694,3,254,127,0,1694,1695,5,47,0,0,1695,
        1700,3,166,83,0,1696,1697,5,3,0,0,1697,1699,3,166,83,0,1698,1696,
        1,0,0,0,1699,1702,1,0,0,0,1700,1698,1,0,0,0,1700,1701,1,0,0,0,1701,
        1703,1,0,0,0,1702,1700,1,0,0,0,1703,1704,5,7,0,0,1704,1705,3,168,
        84,0,1705,1724,1,0,0,0,1706,1707,5,10,0,0,1707,1708,5,2,0,0,1708,
        1709,3,254,127,0,1709,1710,5,47,0,0,1710,1715,3,166,83,0,1711,1712,
        5,4,0,0,1712,1713,5,5,0,0,1713,1714,5,6,0,0,1714,1716,3,194,97,0,
        1715,1711,1,0,0,0,1715,1716,1,0,0,0,1716,1717,1,0,0,0,1717,1718,
        5,7,0,0,1718,1719,3,168,84,0,1719,1724,1,0,0,0,1720,1721,3,166,83,
        0,1721,1722,3,168,84,0,1722,1724,1,0,0,0,1723,1691,1,0,0,0,1723,
        1706,1,0,0,0,1723,1720,1,0,0,0,1724,171,1,0,0,0,1725,1726,5,79,0,
        0,1726,1727,5,40,0,0,1727,1728,3,170,85,0,1728,173,1,0,0,0,1729,
        1730,7,0,0,0,1730,175,1,0,0,0,1731,1732,5,1,0,0,1732,1733,5,2,0,
        0,1733,1738,3,176,88,0,1734,1735,5,3,0,0,1735,1737,3,176,88,0,1736,
        1734,1,0,0,0,1737,1740,1,0,0,0,1738,1736,1,0,0,0,1738,1739,1,0,0,
        0,1739,1745,1,0,0,0,1740,1738,1,0,0,0,1741,1742,5,4,0,0,1742,1743,
        5,5,0,0,1743,1744,5,6,0,0,1744,1746,3,194,97,0,1745,1741,1,0,0,0,
        1745,1746,1,0,0,0,1746,1747,1,0,0,0,1747,1748,5,7,0,0,1748,1764,
        1,0,0,0,1749,1750,5,8,0,0,1750,1751,5,2,0,0,1751,1756,3,176,88,0,
        1752,1753,5,4,0,0,1753,1754,5,5,0,0,1754,1755,5,6,0,0,1755,1757,
        3,194,97,0,1756,1752,1,0,0,0,1756,1757,1,0,0,0,1757,1758,1,0,0,0,
        1758,1759,5,7,0,0,1759,1764,1,0,0,0,1760,1762,3,174,87,0,1761,1760,
        1,0,0,0,1761,1762,1,0,0,0,1762,1764,1,0,0,0,1763,1731,1,0,0,0,1763,
        1749,1,0,0,0,1763,1761,1,0,0,0,1764,177,1,0,0,0,1765,1766,3,72,36,
        0,1766,1767,3,176,88,0,1767,179,1,0,0,0,1768,1769,5,69,0,0,1769,
        1770,3,72,36,0,1770,181,1,0,0,0,1771,1772,3,250,125,0,1772,1773,
        5,14,0,0,1773,183,1,0,0,0,1774,1776,3,182,91,0,1775,1774,1,0,0,0,
        1775,1776,1,0,0,0,1776,1777,1,0,0,0,1777,1778,3,250,125,0,1778,185,
        1,0,0,0,1779,1780,5,1,0,0,1780,1781,5,2,0,0,1781,1786,3,186,93,0,
        1782,1783,5,3,0,0,1783,1785,3,186,93,0,1784,1782,1,0,0,0,1785,1788,
        1,0,0,0,1786,1784,1,0,0,0,1786,1787,1,0,0,0,1787,1793,1,0,0,0,1788,
        1786,1,0,0,0,1789,1790,5,4,0,0,1790,1791,5,5,0,0,1791,1792,5,6,0,
        0,1792,1794,3,194,97,0,1793,1789,1,0,0,0,1793,1794,1,0,0,0,1794,
        1795,1,0,0,0,1795,1796,5,7,0,0,1796,1799,1,0,0,0,1797,1799,3,196,
        98,0,1798,1779,1,0,0,0,1798,1797,1,0,0,0,1799,187,1,0,0,0,1800,1801,
        5,1,0,0,1801,1802,5,2,0,0,1802,1807,3,188,94,0,1803,1804,5,3,0,0,
        1804,1806,3,188,94,0,1805,1803,1,0,0,0,1806,1809,1,0,0,0,1807,1805,
        1,0,0,0,1807,1808,1,0,0,0,1808,1814,1,0,0,0,1809,1807,1,0,0,0,1810,
        1811,5,4,0,0,1811,1812,5,5,0,0,1812,1813,5,6,0,0,1813,1815,3,194,
        97,0,1814,1810,1,0,0,0,1814,1815,1,0,0,0,1815,1816,1,0,0,0,1816,
        1817,5,7,0,0,1817,1820,1,0,0,0,1818,1820,3,200,100,0,1819,1800,1,
        0,0,0,1819,1818,1,0,0,0,1820,189,1,0,0,0,1821,1822,5,1,0,0,1822,
        1823,5,2,0,0,1823,1828,3,190,95,0,1824,1825,5,3,0,0,1825,1827,3,
        190,95,0,1826,1824,1,0,0,0,1827,1830,1,0,0,0,1828,1826,1,0,0,0,1828,
        1829,1,0,0,0,1829,1835,1,0,0,0,1830,1828,1,0,0,0,1831,1832,5,4,0,
        0,1832,1833,5,5,0,0,1833,1834,5,6,0,0,1834,1836,3,194,97,0,1835,
        1831,1,0,0,0,1835,1836,1,0,0,0,1836,1837,1,0,0,0,1837,1838,5,7,0,
        0,1838,1841,1,0,0,0,1839,1841,3,204,102,0,1840,1821,1,0,0,0,1840,
        1839,1,0,0,0,1841,191,1,0,0,0,1842,1843,5,1,0,0,1843,1844,5,2,0,
        0,1844,1849,3,192,96,0,1845,1846,5,3,0,0,1846,1848,3,192,96,0,1847,
        1845,1,0,0,0,1848,1851,1,0,0,0,1849,1847,1,0,0,0,1849,1850,1,0,0,
        0,1850,1856,1,0,0,0,1851,1849,1,0,0,0,1852,1853,5,4,0,0,1853,1854,
        5,5,0,0,1854,1855,5,6,0,0,1855,1857,3,194,97,0,1856,1852,1,0,0,0,
        1856,1857,1,0,0,0,1857,1858,1,0,0,0,1858,1859,5,7,0,0,1859,1862,
        1,0,0,0,1860,1862,3,218,109,0,1861,1842,1,0,0,0,1861,1860,1,0,0,
        0,1862,193,1,0,0,0,1863,1869,3,186,93,0,1864,1869,3,188,94,0,1865,
        1869,3,190,95,0,1866,1869,3,192,96,0,1867,1869,3,118,59,0,1868,1863,
        1,0,0,0,1868,1864,1,0,0,0,1868,1865,1,0,0,0,1868,1866,1,0,0,0,1868,
        1867,1,0,0,0,1869,195,1,0,0,0,1870,1871,3,192,96,0,1871,1872,5,39,
        0,0,1872,1873,3,192,96,0,1873,1874,5,36,0,0,1874,1875,3,192,96,0,
        1875,197,1,0,0,0,1876,1877,5,1,0,0,1877,1878,5,2,0,0,1878,1883,3,
        198,99,0,1879,1880,5,3,0,0,1880,1882,3,198,99,0,1881,1879,1,0,0,
        0,1882,1885,1,0,0,0,1883,1881,1,0,0,0,1883,1884,1,0,0,0,1884,1890,
        1,0,0,0,1885,1883,1,0,0,0,1886,1887,5,4,0,0,1887,1888,5,5,0,0,1888,
        1889,5,6,0,0,1889,1891,3,194,97,0,1890,1886,1,0,0,0,1890,1891,1,
        0,0,0,1891,1892,1,0,0,0,1892,1893,5,7,0,0,1893,1896,1,0,0,0,1894,
        1896,3,244,122,0,1895,1876,1,0,0,0,1895,1894,1,0,0,0,1896,199,1,
        0,0,0,1897,1898,3,192,96,0,1898,1899,3,198,99,0,1899,1900,3,72,36,
        0,1900,201,1,0,0,0,1901,1902,5,1,0,0,1902,1903,5,2,0,0,1903,1908,
        3,202,101,0,1904,1905,5,3,0,0,1905,1907,3,202,101,0,1906,1904,1,
        0,0,0,1907,1910,1,0,0,0,1908,1906,1,0,0,0,1908,1909,1,0,0,0,1909,
        1915,1,0,0,0,1910,1908,1,0,0,0,1911,1912,5,4,0,0,1912,1913,5,5,0,
        0,1913,1914,5,6,0,0,1914,1916,3,194,97,0,1915,1911,1,0,0,0,1915,
        1916,1,0,0,0,1916,1917,1,0,0,0,1917,1918,5,7,0,0,1918,1921,1,0,0,
        0,1919,1921,3,246,123,0,1920,1901,1,0,0,0,1920,1919,1,0,0,0,1921,
        203,1,0,0,0,1922,1923,3,202,101,0,1923,1924,3,72,36,0,1924,205,1,
        0,0,0,1925,1926,5,1,0,0,1926,1927,5,2,0,0,1927,1932,3,206,103,0,
        1928,1929,5,3,0,0,1929,1931,3,206,103,0,1930,1928,1,0,0,0,1931,1934,
        1,0,0,0,1932,1930,1,0,0,0,1932,1933,1,0,0,0,1933,1939,1,0,0,0,1934,
        1932,1,0,0,0,1935,1936,5,4,0,0,1936,1937,5,5,0,0,1937,1938,5,6,0,
        0,1938,1940,3,194,97,0,1939,1935,1,0,0,0,1939,1940,1,0,0,0,1940,
        1941,1,0,0,0,1941,1942,5,7,0,0,1942,1945,1,0,0,0,1943,1945,3,224,
        112,0,1944,1925,1,0,0,0,1944,1943,1,0,0,0,1945,207,1,0,0,0,1946,
        1947,5,1,0,0,1947,1948,5,2,0,0,1948,1953,3,208,104,0,1949,1950,5,
        3,0,0,1950,1952,3,208,104,0,1951,1949,1,0,0,0,1952,1955,1,0,0,0,
        1953,1951,1,0,0,0,1953,1954,1,0,0,0,1954,1960,1,0,0,0,1955,1953,
        1,0,0,0,1956,1957,5,4,0,0,1957,1958,5,5,0,0,1958,1959,5,6,0,0,1959,
        1961,3,194,97,0,1960,1956,1,0,0,0,1960,1961,1,0,0,0,1961,1962,1,
        0,0,0,1962,1963,5,7,0,0,1963,1966,1,0,0,0,1964,1966,3,238,119,0,
        1965,1946,1,0,0,0,1965,1964,1,0,0,0,1966,209,1,0,0,0,1967,1968,5,
        1,0,0,1968,1969,5,2,0,0,1969,1974,3,210,105,0,1970,1971,5,3,0,0,
        1971,1973,3,210,105,0,1972,1970,1,0,0,0,1973,1976,1,0,0,0,1974,1972,
        1,0,0,0,1974,1975,1,0,0,0,1975,1981,1,0,0,0,1976,1974,1,0,0,0,1977,
        1978,5,4,0,0,1978,1979,5,5,0,0,1979,1980,5,6,0,0,1980,1982,3,194,
        97,0,1981,1977,1,0,0,0,1981,1982,1,0,0,0,1982,1983,1,0,0,0,1983,
        1984,5,7,0,0,1984,1987,1,0,0,0,1985,1987,3,228,114,0,1986,1967,1,
        0,0,0,1986,1985,1,0,0,0,1987,211,1,0,0,0,1988,1989,5,1,0,0,1989,
        1990,5,2,0,0,1990,1995,3,212,106,0,1991,1992,5,3,0,0,1992,1994,3,
        212,106,0,1993,1991,1,0,0,0,1994,1997,1,0,0,0,1995,1993,1,0,0,0,
        1995,1996,1,0,0,0,1996,2002,1,0,0,0,1997,1995,1,0,0,0,1998,1999,
        5,4,0,0,1999,2000,5,5,0,0,2000,2001,5,6,0,0,2001,2003,3,194,97,0,
        2002,1998,1,0,0,0,2002,2003,1,0,0,0,2003,2004,1,0,0,0,2004,2005,
        5,7,0,0,2005,2008,1,0,0,0,2006,2008,3,248,124,0,2007,1988,1,0,0,
        0,2007,2006,1,0,0,0,2008,213,1,0,0,0,2009,2010,5,1,0,0,2010,2011,
        5,2,0,0,2011,2016,3,214,107,0,2012,2013,5,3,0,0,2013,2015,3,214,
        107,0,2014,2012,1,0,0,0,2015,2018,1,0,0,0,2016,2014,1,0,0,0,2016,
        2017,1,0,0,0,2017,2023,1,0,0,0,2018,2016,1,0,0,0,2019,2020,5,4,0,
        0,2020,2021,5,5,0,0,2021,2022,5,6,0,0,2022,2024,3,194,97,0,2023,
        2019,1,0,0,0,2023,2024,1,0,0,0,2024,2025,1,0,0,0,2025,2026,5,7,0,
        0,2026,2029,1,0,0,0,2027,2029,3,220,110,0,2028,2009,1,0,0,0,2028,
        2027,1,0,0,0,2029,215,1,0,0,0,2030,2031,5,1,0,0,2031,2032,5,2,0,
        0,2032,2037,3,216,108,0,2033,2034,5,3,0,0,2034,2036,3,216,108,0,
        2035,2033,1,0,0,0,2036,2039,1,0,0,0,2037,2035,1,0,0,0,2037,2038,
        1,0,0,0,2038,2044,1,0,0,0,2039,2037,1,0,0,0,2040,2041,5,4,0,0,2041,
        2042,5,5,0,0,2042,2043,5,6,0,0,2043,2045,3,194,97,0,2044,2040,1,
        0,0,0,2044,2045,1,0,0,0,2045,2046,1,0,0,0,2046,2047,5,7,0,0,2047,
        2050,1,0,0,0,2048,2050,3,222,111,0,2049,2030,1,0,0,0,2049,2048,1,
        0,0,0,2050,217,1,0,0,0,2051,2061,3,206,103,0,2052,2061,3,40,20,0,
        2053,2061,3,208,104,0,2054,2061,3,210,105,0,2055,2061,3,78,39,0,
        2056,2061,3,212,106,0,2057,2061,3,64,32,0,2058,2061,3,214,107,0,
        2059,2061,3,216,108,0,2060,2051,1,0,0,0,2060,2052,1,0,0,0,2060,2053,
        1,0,0,0,2060,2054,1,0,0,0,2060,2055,1,0,0,0,2060,2056,1,0,0,0,2060,
        2057,1,0,0,0,2060,2058,1,0,0,0,2060,2059,1,0,0,0,2061,219,1,0,0,
        0,2062,2063,5,15,0,0,2063,2064,3,184,92,0,2064,221,1,0,0,0,2065,
        2066,5,16,0,0,2066,2067,3,252,126,0,2067,2068,5,47,0,0,2068,2069,
        3,252,126,0,2069,2070,5,17,0,0,2070,223,1,0,0,0,2071,2072,5,12,0,
        0,2072,2073,3,72,36,0,2073,2074,5,13,0,0,2074,225,1,0,0,0,2075,2076,
        5,1,0,0,2076,2077,5,2,0,0,2077,2082,3,226,113,0,2078,2079,5,3,0,
        0,2079,2081,3,226,113,0,2080,2078,1,0,0,0,2081,2084,1,0,0,0,2082,
        2080,1,0,0,0,2082,2083,1,0,0,0,2083,2089,1,0,0,0,2084,2082,1,0,0,
        0,2085,2086,5,4,0,0,2086,2087,5,5,0,0,2087,2088,5,6,0,0,2088,2090,
        3,194,97,0,2089,2085,1,0,0,0,2089,2090,1,0,0,0,2090,2091,1,0,0,0,
        2091,2092,5,7,0,0,2092,2108,1,0,0,0,2093,2094,5,8,0,0,2094,2095,
        5,2,0,0,2095,2100,3,226,113,0,2096,2097,5,4,0,0,2097,2098,5,5,0,
        0,2098,2099,5,6,0,0,2099,2101,3,194,97,0,2100,2096,1,0,0,0,2100,
        2101,1,0,0,0,2101,2102,1,0,0,0,2102,2103,5,7,0,0,2103,2108,1,0,0,
        0,2104,2106,3,236,118,0,2105,2104,1,0,0,0,2105,2106,1,0,0,0,2106,
        2108,1,0,0,0,2107,2075,1,0,0,0,2107,2093,1,0,0,0,2107,2105,1,0,0,
        0,2108,227,1,0,0,0,2109,2110,3,64,32,0,2110,2111,5,12,0,0,2111,2112,
        3,226,113,0,2112,2113,5,13,0,0,2113,229,1,0,0,0,2114,2115,3,254,
        127,0,2115,2116,3,234,117,0,2116,231,1,0,0,0,2117,2118,5,1,0,0,2118,
        2119,5,2,0,0,2119,2124,3,232,116,0,2120,2121,5,3,0,0,2121,2123,3,
        232,116,0,2122,2120,1,0,0,0,2123,2126,1,0,0,0,2124,2122,1,0,0,0,
        2124,2125,1,0,0,0,2125,2131,1,0,0,0,2126,2124,1,0,0,0,2127,2128,
        5,4,0,0,2128,2129,5,5,0,0,2129,2130,5,6,0,0,2130,2132,3,194,97,0,
        2131,2127,1,0,0,0,2131,2132,1,0,0,0,2132,2133,1,0,0,0,2133,2134,
        5,7,0,0,2134,2150,1,0,0,0,2135,2136,5,8,0,0,2136,2137,5,2,0,0,2137,
        2142,3,232,116,0,2138,2139,5,4,0,0,2139,2140,5,5,0,0,2140,2141,5,
        6,0,0,2141,2143,3,194,97,0,2142,2138,1,0,0,0,2142,2143,1,0,0,0,2143,
        2144,1,0,0,0,2144,2145,5,7,0,0,2145,2150,1,0,0,0,2146,2148,3,230,
        115,0,2147,2146,1,0,0,0,2147,2148,1,0,0,0,2148,2150,1,0,0,0,2149,
        2117,1,0,0,0,2149,2135,1,0,0,0,2149,2147,1,0,0,0,2150,233,1,0,0,
        0,2151,2152,5,9,0,0,2152,2153,5,2,0,0,2153,2154,3,254,127,0,2154,
        2155,5,47,0,0,2155,2160,3,72,36,0,2156,2157,5,3,0,0,2157,2159,3,
        72,36,0,2158,2156,1,0,0,0,2159,2162,1,0,0,0,2160,2158,1,0,0,0,2160,
        2161,1,0,0,0,2161,2163,1,0,0,0,2162,2160,1,0,0,0,2163,2164,5,7,0,
        0,2164,2165,3,232,116,0,2165,2184,1,0,0,0,2166,2167,5,10,0,0,2167,
        2168,5,2,0,0,2168,2169,3,254,127,0,2169,2170,5,47,0,0,2170,2175,
        3,72,36,0,2171,2172,5,4,0,0,2172,2173,5,5,0,0,2173,2174,5,6,0,0,
        2174,2176,3,194,97,0,2175,2171,1,0,0,0,2175,2176,1,0,0,0,2176,2177,
        1,0,0,0,2177,2178,5,7,0,0,2178,2179,3,232,116,0,2179,2184,1,0,0,
        0,2180,2181,3,72,36,0,2181,2182,3,232,116,0,2182,2184,1,0,0,0,2183,
        2151,1,0,0,0,2183,2166,1,0,0,0,2183,2180,1,0,0,0,2184,235,1,0,0,
        0,2185,2188,3,234,117,0,2186,2188,3,68,34,0,2187,2185,1,0,0,0,2187,
        2186,1,0,0,0,2188,237,1,0,0,0,2189,2190,7,1,0,0,2190,239,1,0,0,0,
        2191,2192,7,2,0,0,2192,241,1,0,0,0,2193,2209,5,22,0,0,2194,2209,
        5,23,0,0,2195,2209,5,32,0,0,2196,2209,5,24,0,0,2197,2209,5,25,0,
        0,2198,2209,5,6,0,0,2199,2209,5,26,0,0,2200,2209,5,27,0,0,2201,2209,
        5,28,0,0,2202,2209,5,29,0,0,2203,2209,5,30,0,0,2204,2209,5,31,0,
        0,2205,2209,5,68,0,0,2206,2209,5,58,0,0,2207,2209,3,128,64,0,2208,
        2193,1,0,0,0,2208,2194,1,0,0,0,2208,2195,1,0,0,0,2208,2196,1,0,0,
        0,2208,2197,1,0,0,0,2208,2198,1,0,0,0,2208,2199,1,0,0,0,2208,2200,
        1,0,0,0,2208,2201,1,0,0,0,2208,2202,1,0,0,0,2208,2203,1,0,0,0,2208,
        2204,1,0,0,0,2208,2205,1,0,0,0,2208,2206,1,0,0,0,2208,2207,1,0,0,
        0,2209,243,1,0,0,0,2210,2211,7,3,0,0,2211,245,1,0,0,0,2212,2213,
        7,4,0,0,2213,247,1,0,0,0,2214,2215,5,105,0,0,2215,249,1,0,0,0,2216,
        2217,5,106,0,0,2217,251,1,0,0,0,2218,2219,5,104,0,0,2219,253,1,0,
        0,0,2220,2221,5,47,0,0,2221,255,1,0,0,0,2222,2223,5,36,0,0,2223,
        257,1,0,0,0,2224,2225,5,78,0,0,2225,259,1,0,0,0,2226,2227,5,65,0,
        0,2227,261,1,0,0,0,2228,2229,5,44,0,0,2229,263,1,0,0,0,245,274,281,
        286,295,302,313,318,320,329,336,347,352,354,370,377,382,391,398,
        409,414,416,427,442,450,461,468,473,482,489,500,505,507,516,523,
        534,539,541,550,557,568,573,575,589,596,607,612,614,623,630,635,
        648,655,660,664,673,680,685,700,707,712,721,728,739,744,746,757,
        772,780,791,798,803,812,819,824,833,840,845,854,861,866,872,881,
        888,893,910,917,922,931,938,949,954,956,968,975,980,995,1002,1007,
        1016,1023,1034,1039,1041,1052,1067,1075,1093,1100,1105,1114,1121,
        1132,1137,1139,1150,1165,1173,1185,1192,1203,1208,1210,1217,1226,
        1233,1238,1250,1257,1262,1271,1278,1283,1292,1299,1304,1309,1313,
        1319,1323,1327,1339,1346,1357,1362,1364,1375,1390,1398,1410,1417,
        1422,1431,1438,1449,1454,1456,1473,1480,1485,1494,1501,1512,1517,
        1519,1530,1545,1553,1569,1576,1587,1592,1594,1605,1620,1628,1643,
        1650,1655,1664,1671,1682,1687,1689,1700,1715,1723,1738,1745,1756,
        1761,1763,1775,1786,1793,1798,1807,1814,1819,1828,1835,1840,1849,
        1856,1861,1868,1883,1890,1895,1908,1915,1920,1932,1939,1944,1953,
        1960,1965,1974,1981,1986,1995,2002,2007,2016,2023,2028,2037,2044,
        2049,2060,2082,2089,2100,2105,2107,2124,2131,2142,2147,2149,2160,
        2175,2183,2187,2208
    ]

class DiffSqlParser ( Parser ):

    grammarFileName = "DiffSql.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'Any'", "'{'", "'|'", "':'", "'default'", 
                     "'='", "'}'", "'Opt'", "'Subset'", "'Multi'", "'.*'", 
                     "'('", "')'", "'.'", "'$'", "'['", "']'", "'true'", 
                     "'false'", "'UNION'", "'union'", "'+'", "'-'", "'/'", 
                     "'=='", "'<>'", "'!='", "'<='", "'>='", "'<'", "'>'", 
                     "'*'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'E'", "','" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "STAR", "ADD", "ALL", "ALTER", "AND", "AS", "ASC", 
                      "BETWEEN", "BY", "CAST", "COLUMN", "DESC", "DISTINCT", 
                      "TOP", "E", "COMMA", "ESCAPE", "EXCEPT", "EXISTS", 
                      "EXPLAIN", "EVENT", "FORALL", "FROM", "GLOB", "GROUP", 
                      "HAVING", "IN", "INNER", "INSERT", "INTERSECT", "INTO", 
                      "IS", "ISNULL", "JOIN", "KEY", "LEFT", "LIKE", "LIMIT", 
                      "MATCH", "NO", "NOT", "NOTNULL", "NULL", "OF", "OFFSET", 
                      "ON", "OR", "ORDER", "OUTER", "PRIMARY", "QUERY", 
                      "RAISE", "REFERENCES", "REGEXP", "RENAME", "REPLACE", 
                      "RETURN", "ROW", "SAVEPOINT", "SELECT", "SET", "TABLE", 
                      "TEMP", "TEMPORARY", "THEN", "TO", "UNION", "USING", 
                      "VALUES", "VIRTUAL", "WITH", "WHERE", "NUMBER", "STRING", 
                      "NAME", "WS" ]

    RULE_root = 0
    RULE_single_select_cores = 1
    RULE_opt_orderby = 2
    RULE_opt_limit = 3
    RULE_query = 4
    RULE_compound_op_multi_select_core_compound_op = 5
    RULE_single_select_core = 6
    RULE_opt_compound_op_multi_select_core_compound_op = 7
    RULE_multi_select_core_compound_op = 8
    RULE_select_cores = 9
    RULE_single_select_clause = 10
    RULE_opt_from_clause = 11
    RULE_opt_where_clause = 12
    RULE_opt_gb_clause = 13
    RULE_select_core = 14
    RULE_opt_top_or_distinct = 15
    RULE_single_select_results = 16
    RULE_select_clause = 17
    RULE_single_top_clause = 18
    RULE_top_or_distinct = 19
    RULE_single_number = 20
    RULE_top_clause = 21
    RULE_comma_multi_select_result_comma = 22
    RULE_single_select_result = 23
    RULE_opt_comma_multi_select_result_comma = 24
    RULE_multi_select_result_comma = 25
    RULE_select_results = 26
    RULE_single_sel_res_all_star = 27
    RULE_single_sel_res_tab_star = 28
    RULE_single_sel_res_val = 29
    RULE_single_sel_res_col = 30
    RULE_select_result = 31
    RULE_single_name = 32
    RULE_sel_res_tab_star = 33
    RULE_sel_res_all_star = 34
    RULE_as_name = 35
    RULE_single_expr = 36
    RULE_opt_as_name = 37
    RULE_sel_res_val = 38
    RULE_single_col_ref = 39
    RULE_sel_res_col = 40
    RULE_comma_multi_single_source_comma = 41
    RULE_single_single_source = 42
    RULE_opt_comma_multi_single_source_comma = 43
    RULE_multi_single_source_comma = 44
    RULE_from_list = 45
    RULE_single_join = 46
    RULE_join_multi_single_join_join = 47
    RULE_single_single_join = 48
    RULE_opt_join_multi_single_join_join = 49
    RULE_multi_single_join_join = 50
    RULE_join_clause = 51
    RULE_opt_join_clause = 52
    RULE_join_source = 53
    RULE_from_source = 54
    RULE_single_from_source = 55
    RULE_from_clause = 56
    RULE_single_source_func = 57
    RULE_single_source_table = 58
    RULE_single_source_subq = 59
    RULE_single_source = 60
    RULE_source_table = 61
    RULE_source_subq = 62
    RULE_source_func = 63
    RULE_and_or = 64
    RULE_and_or_multi_expr_and_or = 65
    RULE_opt_and_or_multi_expr_and_or = 66
    RULE_multi_expr_and_or = 67
    RULE_where_clause = 68
    RULE_single_group_clause = 69
    RULE_opt_having_clause = 70
    RULE_gb_clause = 71
    RULE_comma_multi_grouping_term_comma = 72
    RULE_single_grouping_term = 73
    RULE_opt_comma_multi_grouping_term_comma = 74
    RULE_multi_grouping_term_comma = 75
    RULE_group_clause = 76
    RULE_grouping_term = 77
    RULE_and_multi_expr_and = 78
    RULE_opt_and_multi_expr_and = 79
    RULE_multi_expr_and = 80
    RULE_having_clause = 81
    RULE_comma_multi_ordering_term_comma = 82
    RULE_single_ordering_term = 83
    RULE_opt_comma_multi_ordering_term_comma = 84
    RULE_multi_ordering_term_comma = 85
    RULE_orderby = 86
    RULE_asc_desc = 87
    RULE_opt_asc_desc = 88
    RULE_ordering_term = 89
    RULE_limit = 90
    RULE_table_dot = 91
    RULE_col_ref = 92
    RULE_single_btwnexpr = 93
    RULE_single_biexpr = 94
    RULE_single_unexpr = 95
    RULE_single_value = 96
    RULE_expr = 97
    RULE_btwnexpr = 98
    RULE_single_binaryop_no_andor = 99
    RULE_biexpr = 100
    RULE_single_unaryop = 101
    RULE_unexpr = 102
    RULE_single_parenval = 103
    RULE_single_boolean = 104
    RULE_single_function = 105
    RULE_single_string = 106
    RULE_single_domain = 107
    RULE_single_range = 108
    RULE_value = 109
    RULE_domain = 110
    RULE_range = 111
    RULE_parenval = 112
    RULE_opt_arg_list = 113
    RULE_function = 114
    RULE_comma_multi_expr_comma = 115
    RULE_opt_comma_multi_expr_comma = 116
    RULE_multi_expr_comma = 117
    RULE_arg_list = 118
    RULE_boolean = 119
    RULE_compound_op = 120
    RULE_binaryop = 121
    RULE_binaryop_no_andor = 122
    RULE_unaryop = 123
    RULE_string = 124
    RULE_name = 125
    RULE_number = 126
    RULE_comma = 127
    RULE_and = 128
    RULE_or = 129
    RULE_join = 130
    RULE_distinct = 131

    ruleNames =  [ "root", "single_select_cores", "opt_orderby", "opt_limit", 
                   "query", "compound_op_multi_select_core_compound_op", 
                   "single_select_core", "opt_compound_op_multi_select_core_compound_op", 
                   "multi_select_core_compound_op", "select_cores", "single_select_clause", 
                   "opt_from_clause", "opt_where_clause", "opt_gb_clause", 
                   "select_core", "opt_top_or_distinct", "single_select_results", 
                   "select_clause", "single_top_clause", "top_or_distinct", 
                   "single_number", "top_clause", "comma_multi_select_result_comma", 
                   "single_select_result", "opt_comma_multi_select_result_comma", 
                   "multi_select_result_comma", "select_results", "single_sel_res_all_star", 
                   "single_sel_res_tab_star", "single_sel_res_val", "single_sel_res_col", 
                   "select_result", "single_name", "sel_res_tab_star", "sel_res_all_star", 
                   "as_name", "single_expr", "opt_as_name", "sel_res_val", 
                   "single_col_ref", "sel_res_col", "comma_multi_single_source_comma", 
                   "single_single_source", "opt_comma_multi_single_source_comma", 
                   "multi_single_source_comma", "from_list", "single_join", 
                   "join_multi_single_join_join", "single_single_join", 
                   "opt_join_multi_single_join_join", "multi_single_join_join", 
                   "join_clause", "opt_join_clause", "join_source", "from_source", 
                   "single_from_source", "from_clause", "single_source_func", 
                   "single_source_table", "single_source_subq", "single_source", 
                   "source_table", "source_subq", "source_func", "and_or", 
                   "and_or_multi_expr_and_or", "opt_and_or_multi_expr_and_or", 
                   "multi_expr_and_or", "where_clause", "single_group_clause", 
                   "opt_having_clause", "gb_clause", "comma_multi_grouping_term_comma", 
                   "single_grouping_term", "opt_comma_multi_grouping_term_comma", 
                   "multi_grouping_term_comma", "group_clause", "grouping_term", 
                   "and_multi_expr_and", "opt_and_multi_expr_and", "multi_expr_and", 
                   "having_clause", "comma_multi_ordering_term_comma", "single_ordering_term", 
                   "opt_comma_multi_ordering_term_comma", "multi_ordering_term_comma", 
                   "orderby", "asc_desc", "opt_asc_desc", "ordering_term", 
                   "limit", "table_dot", "col_ref", "single_btwnexpr", "single_biexpr", 
                   "single_unexpr", "single_value", "expr", "btwnexpr", 
                   "single_binaryop_no_andor", "biexpr", "single_unaryop", 
                   "unexpr", "single_parenval", "single_boolean", "single_function", 
                   "single_string", "single_domain", "single_range", "value", 
                   "domain", "range", "parenval", "opt_arg_list", "function", 
                   "comma_multi_expr_comma", "opt_comma_multi_expr_comma", 
                   "multi_expr_comma", "arg_list", "boolean", "compound_op", 
                   "binaryop", "binaryop_no_andor", "unaryop", "string", 
                   "name", "number", "comma", "and", "or", "join", "distinct" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    STAR=32
    ADD=33
    ALL=34
    ALTER=35
    AND=36
    AS=37
    ASC=38
    BETWEEN=39
    BY=40
    CAST=41
    COLUMN=42
    DESC=43
    DISTINCT=44
    TOP=45
    E=46
    COMMA=47
    ESCAPE=48
    EXCEPT=49
    EXISTS=50
    EXPLAIN=51
    EVENT=52
    FORALL=53
    FROM=54
    GLOB=55
    GROUP=56
    HAVING=57
    IN=58
    INNER=59
    INSERT=60
    INTERSECT=61
    INTO=62
    IS=63
    ISNULL=64
    JOIN=65
    KEY=66
    LEFT=67
    LIKE=68
    LIMIT=69
    MATCH=70
    NO=71
    NOT=72
    NOTNULL=73
    NULL=74
    OF=75
    OFFSET=76
    ON=77
    OR=78
    ORDER=79
    OUTER=80
    PRIMARY=81
    QUERY=82
    RAISE=83
    REFERENCES=84
    REGEXP=85
    RENAME=86
    REPLACE=87
    RETURN=88
    ROW=89
    SAVEPOINT=90
    SELECT=91
    SET=92
    TABLE=93
    TEMP=94
    TEMPORARY=95
    THEN=96
    TO=97
    UNION=98
    USING=99
    VALUES=100
    VIRTUAL=101
    WITH=102
    WHERE=103
    NUMBER=104
    STRING=105
    NAME=106
    WS=107

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class RootContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def query(self):
            return self.getTypedRuleContext(DiffSqlParser.QueryContext,0)


        def EOF(self):
            return self.getToken(DiffSqlParser.EOF, 0)

        def getRuleIndex(self):
            return DiffSqlParser.RULE_root

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoot" ):
                listener.enterRoot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoot" ):
                listener.exitRoot(self)




    def root(self):

        localctx = DiffSqlParser.RootContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_root)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 264
            self.query()
            self.state = 265
            self.match(DiffSqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Single_select_coresContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def single_select_cores(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DiffSqlParser.Single_select_coresContext)
            else:
                return self.getTypedRuleContext(DiffSqlParser.Single_select_coresContext,i)


        def expr(self):
            return self.getTypedRuleContext(DiffSqlParser.ExprContext,0)


        def select_cores(self):
            return self.getTypedRuleContext(DiffSqlParser.Select_coresContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_single_select_cores

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_select_cores" ):
                listener.enterSingle_select_cores(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_select_cores" ):
                listener.exitSingle_select_cores(self)




    def single_select_cores(self):

        localctx = DiffSqlParser.Single_select_coresContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_single_select_cores)
        self._la = 0 # Token type
        try:
            self.state = 286
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 267
                self.match(DiffSqlParser.T__0)
                self.state = 268
                self.match(DiffSqlParser.T__1)
                self.state = 269
                self.single_select_cores()
                self.state = 274
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==DiffSqlParser.T__2:
                    self.state = 270
                    self.match(DiffSqlParser.T__2)
                    self.state = 271
                    self.single_select_cores()
                    self.state = 276
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 281
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.T__3:
                    self.state = 277
                    self.match(DiffSqlParser.T__3)
                    self.state = 278
                    self.match(DiffSqlParser.T__4)
                    self.state = 279
                    self.match(DiffSqlParser.T__5)
                    self.state = 280
                    self.expr()


                self.state = 283
                self.match(DiffSqlParser.T__6)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 285
                self.select_cores()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Opt_orderbyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def opt_orderby(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DiffSqlParser.Opt_orderbyContext)
            else:
                return self.getTypedRuleContext(DiffSqlParser.Opt_orderbyContext,i)


        def expr(self):
            return self.getTypedRuleContext(DiffSqlParser.ExprContext,0)


        def orderby(self):
            return self.getTypedRuleContext(DiffSqlParser.OrderbyContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_opt_orderby

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpt_orderby" ):
                listener.enterOpt_orderby(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpt_orderby" ):
                listener.exitOpt_orderby(self)




    def opt_orderby(self):

        localctx = DiffSqlParser.Opt_orderbyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_opt_orderby)
        self._la = 0 # Token type
        try:
            self.state = 320
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 288
                self.match(DiffSqlParser.T__0)
                self.state = 289
                self.match(DiffSqlParser.T__1)
                self.state = 290
                self.opt_orderby()
                self.state = 295
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==DiffSqlParser.T__2:
                    self.state = 291
                    self.match(DiffSqlParser.T__2)
                    self.state = 292
                    self.opt_orderby()
                    self.state = 297
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 302
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.T__3:
                    self.state = 298
                    self.match(DiffSqlParser.T__3)
                    self.state = 299
                    self.match(DiffSqlParser.T__4)
                    self.state = 300
                    self.match(DiffSqlParser.T__5)
                    self.state = 301
                    self.expr()


                self.state = 304
                self.match(DiffSqlParser.T__6)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 306
                self.match(DiffSqlParser.T__7)
                self.state = 307
                self.match(DiffSqlParser.T__1)
                self.state = 308
                self.opt_orderby()
                self.state = 313
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.T__3:
                    self.state = 309
                    self.match(DiffSqlParser.T__3)
                    self.state = 310
                    self.match(DiffSqlParser.T__4)
                    self.state = 311
                    self.match(DiffSqlParser.T__5)
                    self.state = 312
                    self.expr()


                self.state = 315
                self.match(DiffSqlParser.T__6)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 318
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.ORDER:
                    self.state = 317
                    self.orderby()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Opt_limitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def opt_limit(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DiffSqlParser.Opt_limitContext)
            else:
                return self.getTypedRuleContext(DiffSqlParser.Opt_limitContext,i)


        def expr(self):
            return self.getTypedRuleContext(DiffSqlParser.ExprContext,0)


        def limit(self):
            return self.getTypedRuleContext(DiffSqlParser.LimitContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_opt_limit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpt_limit" ):
                listener.enterOpt_limit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpt_limit" ):
                listener.exitOpt_limit(self)




    def opt_limit(self):

        localctx = DiffSqlParser.Opt_limitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_opt_limit)
        self._la = 0 # Token type
        try:
            self.state = 354
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DiffSqlParser.T__0]:
                self.enterOuterAlt(localctx, 1)
                self.state = 322
                self.match(DiffSqlParser.T__0)
                self.state = 323
                self.match(DiffSqlParser.T__1)
                self.state = 324
                self.opt_limit()
                self.state = 329
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==DiffSqlParser.T__2:
                    self.state = 325
                    self.match(DiffSqlParser.T__2)
                    self.state = 326
                    self.opt_limit()
                    self.state = 331
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 336
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.T__3:
                    self.state = 332
                    self.match(DiffSqlParser.T__3)
                    self.state = 333
                    self.match(DiffSqlParser.T__4)
                    self.state = 334
                    self.match(DiffSqlParser.T__5)
                    self.state = 335
                    self.expr()


                self.state = 338
                self.match(DiffSqlParser.T__6)
                pass
            elif token in [DiffSqlParser.T__7]:
                self.enterOuterAlt(localctx, 2)
                self.state = 340
                self.match(DiffSqlParser.T__7)
                self.state = 341
                self.match(DiffSqlParser.T__1)
                self.state = 342
                self.opt_limit()
                self.state = 347
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.T__3:
                    self.state = 343
                    self.match(DiffSqlParser.T__3)
                    self.state = 344
                    self.match(DiffSqlParser.T__4)
                    self.state = 345
                    self.match(DiffSqlParser.T__5)
                    self.state = 346
                    self.expr()


                self.state = 349
                self.match(DiffSqlParser.T__6)
                pass
            elif token in [DiffSqlParser.EOF, DiffSqlParser.T__2, DiffSqlParser.T__3, DiffSqlParser.T__6, DiffSqlParser.T__12, DiffSqlParser.LIMIT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 352
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.LIMIT:
                    self.state = 351
                    self.limit()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def single_select_cores(self):
            return self.getTypedRuleContext(DiffSqlParser.Single_select_coresContext,0)


        def opt_orderby(self):
            return self.getTypedRuleContext(DiffSqlParser.Opt_orderbyContext,0)


        def opt_limit(self):
            return self.getTypedRuleContext(DiffSqlParser.Opt_limitContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_query

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery" ):
                listener.enterQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery" ):
                listener.exitQuery(self)




    def query(self):

        localctx = DiffSqlParser.QueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_query)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 356
            self.single_select_cores()
            self.state = 357
            self.opt_orderby()
            self.state = 358
            self.opt_limit()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compound_op_multi_select_core_compound_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compound_op(self):
            return self.getTypedRuleContext(DiffSqlParser.Compound_opContext,0)


        def multi_select_core_compound_op(self):
            return self.getTypedRuleContext(DiffSqlParser.Multi_select_core_compound_opContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_compound_op_multi_select_core_compound_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompound_op_multi_select_core_compound_op" ):
                listener.enterCompound_op_multi_select_core_compound_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompound_op_multi_select_core_compound_op" ):
                listener.exitCompound_op_multi_select_core_compound_op(self)




    def compound_op_multi_select_core_compound_op(self):

        localctx = DiffSqlParser.Compound_op_multi_select_core_compound_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_compound_op_multi_select_core_compound_op)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 360
            self.compound_op()
            self.state = 361
            self.multi_select_core_compound_op()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Single_select_coreContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def single_select_core(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DiffSqlParser.Single_select_coreContext)
            else:
                return self.getTypedRuleContext(DiffSqlParser.Single_select_coreContext,i)


        def expr(self):
            return self.getTypedRuleContext(DiffSqlParser.ExprContext,0)


        def select_core(self):
            return self.getTypedRuleContext(DiffSqlParser.Select_coreContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_single_select_core

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_select_core" ):
                listener.enterSingle_select_core(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_select_core" ):
                listener.exitSingle_select_core(self)




    def single_select_core(self):

        localctx = DiffSqlParser.Single_select_coreContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_single_select_core)
        self._la = 0 # Token type
        try:
            self.state = 382
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 363
                self.match(DiffSqlParser.T__0)
                self.state = 364
                self.match(DiffSqlParser.T__1)
                self.state = 365
                self.single_select_core()
                self.state = 370
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==DiffSqlParser.T__2:
                    self.state = 366
                    self.match(DiffSqlParser.T__2)
                    self.state = 367
                    self.single_select_core()
                    self.state = 372
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 377
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.T__3:
                    self.state = 373
                    self.match(DiffSqlParser.T__3)
                    self.state = 374
                    self.match(DiffSqlParser.T__4)
                    self.state = 375
                    self.match(DiffSqlParser.T__5)
                    self.state = 376
                    self.expr()


                self.state = 379
                self.match(DiffSqlParser.T__6)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 381
                self.select_core()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Opt_compound_op_multi_select_core_compound_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def opt_compound_op_multi_select_core_compound_op(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DiffSqlParser.Opt_compound_op_multi_select_core_compound_opContext)
            else:
                return self.getTypedRuleContext(DiffSqlParser.Opt_compound_op_multi_select_core_compound_opContext,i)


        def expr(self):
            return self.getTypedRuleContext(DiffSqlParser.ExprContext,0)


        def compound_op_multi_select_core_compound_op(self):
            return self.getTypedRuleContext(DiffSqlParser.Compound_op_multi_select_core_compound_opContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_opt_compound_op_multi_select_core_compound_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpt_compound_op_multi_select_core_compound_op" ):
                listener.enterOpt_compound_op_multi_select_core_compound_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpt_compound_op_multi_select_core_compound_op" ):
                listener.exitOpt_compound_op_multi_select_core_compound_op(self)




    def opt_compound_op_multi_select_core_compound_op(self):

        localctx = DiffSqlParser.Opt_compound_op_multi_select_core_compound_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_opt_compound_op_multi_select_core_compound_op)
        self._la = 0 # Token type
        try:
            self.state = 416
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 384
                self.match(DiffSqlParser.T__0)
                self.state = 385
                self.match(DiffSqlParser.T__1)
                self.state = 386
                self.opt_compound_op_multi_select_core_compound_op()
                self.state = 391
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==DiffSqlParser.T__2:
                    self.state = 387
                    self.match(DiffSqlParser.T__2)
                    self.state = 388
                    self.opt_compound_op_multi_select_core_compound_op()
                    self.state = 393
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 398
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.T__3:
                    self.state = 394
                    self.match(DiffSqlParser.T__3)
                    self.state = 395
                    self.match(DiffSqlParser.T__4)
                    self.state = 396
                    self.match(DiffSqlParser.T__5)
                    self.state = 397
                    self.expr()


                self.state = 400
                self.match(DiffSqlParser.T__6)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 402
                self.match(DiffSqlParser.T__7)
                self.state = 403
                self.match(DiffSqlParser.T__1)
                self.state = 404
                self.opt_compound_op_multi_select_core_compound_op()
                self.state = 409
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.T__3:
                    self.state = 405
                    self.match(DiffSqlParser.T__3)
                    self.state = 406
                    self.match(DiffSqlParser.T__4)
                    self.state = 407
                    self.match(DiffSqlParser.T__5)
                    self.state = 408
                    self.expr()


                self.state = 411
                self.match(DiffSqlParser.T__6)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 414
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.T__19 or _la==DiffSqlParser.T__20:
                    self.state = 413
                    self.compound_op_multi_select_core_compound_op()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Multi_select_core_compound_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compound_op(self):
            return self.getTypedRuleContext(DiffSqlParser.Compound_opContext,0)


        def COMMA(self):
            return self.getToken(DiffSqlParser.COMMA, 0)

        def single_select_core(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DiffSqlParser.Single_select_coreContext)
            else:
                return self.getTypedRuleContext(DiffSqlParser.Single_select_coreContext,i)


        def opt_compound_op_multi_select_core_compound_op(self):
            return self.getTypedRuleContext(DiffSqlParser.Opt_compound_op_multi_select_core_compound_opContext,0)


        def expr(self):
            return self.getTypedRuleContext(DiffSqlParser.ExprContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_multi_select_core_compound_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMulti_select_core_compound_op" ):
                listener.enterMulti_select_core_compound_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMulti_select_core_compound_op" ):
                listener.exitMulti_select_core_compound_op(self)




    def multi_select_core_compound_op(self):

        localctx = DiffSqlParser.Multi_select_core_compound_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_multi_select_core_compound_op)
        self._la = 0 # Token type
        try:
            self.state = 450
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DiffSqlParser.T__8]:
                self.enterOuterAlt(localctx, 1)
                self.state = 418
                self.match(DiffSqlParser.T__8)
                self.state = 419
                self.match(DiffSqlParser.T__1)
                self.state = 420
                self.compound_op()
                self.state = 421
                self.match(DiffSqlParser.COMMA)
                self.state = 422
                self.single_select_core()
                self.state = 427
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==DiffSqlParser.T__2:
                    self.state = 423
                    self.match(DiffSqlParser.T__2)
                    self.state = 424
                    self.single_select_core()
                    self.state = 429
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 430
                self.match(DiffSqlParser.T__6)
                self.state = 431
                self.opt_compound_op_multi_select_core_compound_op()
                pass
            elif token in [DiffSqlParser.T__9]:
                self.enterOuterAlt(localctx, 2)
                self.state = 433
                self.match(DiffSqlParser.T__9)
                self.state = 434
                self.match(DiffSqlParser.T__1)
                self.state = 435
                self.compound_op()
                self.state = 436
                self.match(DiffSqlParser.COMMA)
                self.state = 437
                self.single_select_core()
                self.state = 442
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.T__3:
                    self.state = 438
                    self.match(DiffSqlParser.T__3)
                    self.state = 439
                    self.match(DiffSqlParser.T__4)
                    self.state = 440
                    self.match(DiffSqlParser.T__5)
                    self.state = 441
                    self.expr()


                self.state = 444
                self.match(DiffSqlParser.T__6)
                self.state = 445
                self.opt_compound_op_multi_select_core_compound_op()
                pass
            elif token in [DiffSqlParser.T__0, DiffSqlParser.SELECT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 447
                self.single_select_core()
                self.state = 448
                self.opt_compound_op_multi_select_core_compound_op()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_coresContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multi_select_core_compound_op(self):
            return self.getTypedRuleContext(DiffSqlParser.Multi_select_core_compound_opContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_select_cores

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_cores" ):
                listener.enterSelect_cores(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_cores" ):
                listener.exitSelect_cores(self)




    def select_cores(self):

        localctx = DiffSqlParser.Select_coresContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_select_cores)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 452
            self.multi_select_core_compound_op()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Single_select_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def single_select_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DiffSqlParser.Single_select_clauseContext)
            else:
                return self.getTypedRuleContext(DiffSqlParser.Single_select_clauseContext,i)


        def expr(self):
            return self.getTypedRuleContext(DiffSqlParser.ExprContext,0)


        def select_clause(self):
            return self.getTypedRuleContext(DiffSqlParser.Select_clauseContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_single_select_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_select_clause" ):
                listener.enterSingle_select_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_select_clause" ):
                listener.exitSingle_select_clause(self)




    def single_select_clause(self):

        localctx = DiffSqlParser.Single_select_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_single_select_clause)
        self._la = 0 # Token type
        try:
            self.state = 473
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DiffSqlParser.T__0]:
                self.enterOuterAlt(localctx, 1)
                self.state = 454
                self.match(DiffSqlParser.T__0)
                self.state = 455
                self.match(DiffSqlParser.T__1)
                self.state = 456
                self.single_select_clause()
                self.state = 461
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==DiffSqlParser.T__2:
                    self.state = 457
                    self.match(DiffSqlParser.T__2)
                    self.state = 458
                    self.single_select_clause()
                    self.state = 463
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 468
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.T__3:
                    self.state = 464
                    self.match(DiffSqlParser.T__3)
                    self.state = 465
                    self.match(DiffSqlParser.T__4)
                    self.state = 466
                    self.match(DiffSqlParser.T__5)
                    self.state = 467
                    self.expr()


                self.state = 470
                self.match(DiffSqlParser.T__6)
                pass
            elif token in [DiffSqlParser.SELECT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 472
                self.select_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Opt_from_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def opt_from_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DiffSqlParser.Opt_from_clauseContext)
            else:
                return self.getTypedRuleContext(DiffSqlParser.Opt_from_clauseContext,i)


        def expr(self):
            return self.getTypedRuleContext(DiffSqlParser.ExprContext,0)


        def from_clause(self):
            return self.getTypedRuleContext(DiffSqlParser.From_clauseContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_opt_from_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpt_from_clause" ):
                listener.enterOpt_from_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpt_from_clause" ):
                listener.exitOpt_from_clause(self)




    def opt_from_clause(self):

        localctx = DiffSqlParser.Opt_from_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_opt_from_clause)
        self._la = 0 # Token type
        try:
            self.state = 507
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 475
                self.match(DiffSqlParser.T__0)
                self.state = 476
                self.match(DiffSqlParser.T__1)
                self.state = 477
                self.opt_from_clause()
                self.state = 482
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==DiffSqlParser.T__2:
                    self.state = 478
                    self.match(DiffSqlParser.T__2)
                    self.state = 479
                    self.opt_from_clause()
                    self.state = 484
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 489
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.T__3:
                    self.state = 485
                    self.match(DiffSqlParser.T__3)
                    self.state = 486
                    self.match(DiffSqlParser.T__4)
                    self.state = 487
                    self.match(DiffSqlParser.T__5)
                    self.state = 488
                    self.expr()


                self.state = 491
                self.match(DiffSqlParser.T__6)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 493
                self.match(DiffSqlParser.T__7)
                self.state = 494
                self.match(DiffSqlParser.T__1)
                self.state = 495
                self.opt_from_clause()
                self.state = 500
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.T__3:
                    self.state = 496
                    self.match(DiffSqlParser.T__3)
                    self.state = 497
                    self.match(DiffSqlParser.T__4)
                    self.state = 498
                    self.match(DiffSqlParser.T__5)
                    self.state = 499
                    self.expr()


                self.state = 502
                self.match(DiffSqlParser.T__6)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 505
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.FROM:
                    self.state = 504
                    self.from_clause()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Opt_where_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def opt_where_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DiffSqlParser.Opt_where_clauseContext)
            else:
                return self.getTypedRuleContext(DiffSqlParser.Opt_where_clauseContext,i)


        def expr(self):
            return self.getTypedRuleContext(DiffSqlParser.ExprContext,0)


        def where_clause(self):
            return self.getTypedRuleContext(DiffSqlParser.Where_clauseContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_opt_where_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpt_where_clause" ):
                listener.enterOpt_where_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpt_where_clause" ):
                listener.exitOpt_where_clause(self)




    def opt_where_clause(self):

        localctx = DiffSqlParser.Opt_where_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_opt_where_clause)
        self._la = 0 # Token type
        try:
            self.state = 541
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 509
                self.match(DiffSqlParser.T__0)
                self.state = 510
                self.match(DiffSqlParser.T__1)
                self.state = 511
                self.opt_where_clause()
                self.state = 516
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==DiffSqlParser.T__2:
                    self.state = 512
                    self.match(DiffSqlParser.T__2)
                    self.state = 513
                    self.opt_where_clause()
                    self.state = 518
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 523
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.T__3:
                    self.state = 519
                    self.match(DiffSqlParser.T__3)
                    self.state = 520
                    self.match(DiffSqlParser.T__4)
                    self.state = 521
                    self.match(DiffSqlParser.T__5)
                    self.state = 522
                    self.expr()


                self.state = 525
                self.match(DiffSqlParser.T__6)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 527
                self.match(DiffSqlParser.T__7)
                self.state = 528
                self.match(DiffSqlParser.T__1)
                self.state = 529
                self.opt_where_clause()
                self.state = 534
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.T__3:
                    self.state = 530
                    self.match(DiffSqlParser.T__3)
                    self.state = 531
                    self.match(DiffSqlParser.T__4)
                    self.state = 532
                    self.match(DiffSqlParser.T__5)
                    self.state = 533
                    self.expr()


                self.state = 536
                self.match(DiffSqlParser.T__6)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 539
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.WHERE:
                    self.state = 538
                    self.where_clause()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Opt_gb_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def opt_gb_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DiffSqlParser.Opt_gb_clauseContext)
            else:
                return self.getTypedRuleContext(DiffSqlParser.Opt_gb_clauseContext,i)


        def expr(self):
            return self.getTypedRuleContext(DiffSqlParser.ExprContext,0)


        def gb_clause(self):
            return self.getTypedRuleContext(DiffSqlParser.Gb_clauseContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_opt_gb_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpt_gb_clause" ):
                listener.enterOpt_gb_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpt_gb_clause" ):
                listener.exitOpt_gb_clause(self)




    def opt_gb_clause(self):

        localctx = DiffSqlParser.Opt_gb_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_opt_gb_clause)
        self._la = 0 # Token type
        try:
            self.state = 575
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 543
                self.match(DiffSqlParser.T__0)
                self.state = 544
                self.match(DiffSqlParser.T__1)
                self.state = 545
                self.opt_gb_clause()
                self.state = 550
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==DiffSqlParser.T__2:
                    self.state = 546
                    self.match(DiffSqlParser.T__2)
                    self.state = 547
                    self.opt_gb_clause()
                    self.state = 552
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 557
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.T__3:
                    self.state = 553
                    self.match(DiffSqlParser.T__3)
                    self.state = 554
                    self.match(DiffSqlParser.T__4)
                    self.state = 555
                    self.match(DiffSqlParser.T__5)
                    self.state = 556
                    self.expr()


                self.state = 559
                self.match(DiffSqlParser.T__6)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 561
                self.match(DiffSqlParser.T__7)
                self.state = 562
                self.match(DiffSqlParser.T__1)
                self.state = 563
                self.opt_gb_clause()
                self.state = 568
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.T__3:
                    self.state = 564
                    self.match(DiffSqlParser.T__3)
                    self.state = 565
                    self.match(DiffSqlParser.T__4)
                    self.state = 566
                    self.match(DiffSqlParser.T__5)
                    self.state = 567
                    self.expr()


                self.state = 570
                self.match(DiffSqlParser.T__6)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 573
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.GROUP:
                    self.state = 572
                    self.gb_clause()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_coreContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def single_select_clause(self):
            return self.getTypedRuleContext(DiffSqlParser.Single_select_clauseContext,0)


        def opt_from_clause(self):
            return self.getTypedRuleContext(DiffSqlParser.Opt_from_clauseContext,0)


        def opt_where_clause(self):
            return self.getTypedRuleContext(DiffSqlParser.Opt_where_clauseContext,0)


        def opt_gb_clause(self):
            return self.getTypedRuleContext(DiffSqlParser.Opt_gb_clauseContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_select_core

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_core" ):
                listener.enterSelect_core(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_core" ):
                listener.exitSelect_core(self)




    def select_core(self):

        localctx = DiffSqlParser.Select_coreContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_select_core)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 577
            self.single_select_clause()
            self.state = 578
            self.opt_from_clause()
            self.state = 579
            self.opt_where_clause()
            self.state = 580
            self.opt_gb_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Opt_top_or_distinctContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def opt_top_or_distinct(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DiffSqlParser.Opt_top_or_distinctContext)
            else:
                return self.getTypedRuleContext(DiffSqlParser.Opt_top_or_distinctContext,i)


        def expr(self):
            return self.getTypedRuleContext(DiffSqlParser.ExprContext,0)


        def top_or_distinct(self):
            return self.getTypedRuleContext(DiffSqlParser.Top_or_distinctContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_opt_top_or_distinct

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpt_top_or_distinct" ):
                listener.enterOpt_top_or_distinct(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpt_top_or_distinct" ):
                listener.exitOpt_top_or_distinct(self)




    def opt_top_or_distinct(self):

        localctx = DiffSqlParser.Opt_top_or_distinctContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_opt_top_or_distinct)
        self._la = 0 # Token type
        try:
            self.state = 614
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 582
                self.match(DiffSqlParser.T__0)
                self.state = 583
                self.match(DiffSqlParser.T__1)
                self.state = 584
                self.opt_top_or_distinct()
                self.state = 589
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==DiffSqlParser.T__2:
                    self.state = 585
                    self.match(DiffSqlParser.T__2)
                    self.state = 586
                    self.opt_top_or_distinct()
                    self.state = 591
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 596
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.T__3:
                    self.state = 592
                    self.match(DiffSqlParser.T__3)
                    self.state = 593
                    self.match(DiffSqlParser.T__4)
                    self.state = 594
                    self.match(DiffSqlParser.T__5)
                    self.state = 595
                    self.expr()


                self.state = 598
                self.match(DiffSqlParser.T__6)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 600
                self.match(DiffSqlParser.T__7)
                self.state = 601
                self.match(DiffSqlParser.T__1)
                self.state = 602
                self.opt_top_or_distinct()
                self.state = 607
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.T__3:
                    self.state = 603
                    self.match(DiffSqlParser.T__3)
                    self.state = 604
                    self.match(DiffSqlParser.T__4)
                    self.state = 605
                    self.match(DiffSqlParser.T__5)
                    self.state = 606
                    self.expr()


                self.state = 609
                self.match(DiffSqlParser.T__6)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 612
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
                if la_ == 1:
                    self.state = 611
                    self.top_or_distinct()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Single_select_resultsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def single_select_results(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DiffSqlParser.Single_select_resultsContext)
            else:
                return self.getTypedRuleContext(DiffSqlParser.Single_select_resultsContext,i)


        def expr(self):
            return self.getTypedRuleContext(DiffSqlParser.ExprContext,0)


        def select_results(self):
            return self.getTypedRuleContext(DiffSqlParser.Select_resultsContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_single_select_results

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_select_results" ):
                listener.enterSingle_select_results(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_select_results" ):
                listener.exitSingle_select_results(self)




    def single_select_results(self):

        localctx = DiffSqlParser.Single_select_resultsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_single_select_results)
        self._la = 0 # Token type
        try:
            self.state = 635
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 616
                self.match(DiffSqlParser.T__0)
                self.state = 617
                self.match(DiffSqlParser.T__1)
                self.state = 618
                self.single_select_results()
                self.state = 623
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==DiffSqlParser.T__2:
                    self.state = 619
                    self.match(DiffSqlParser.T__2)
                    self.state = 620
                    self.single_select_results()
                    self.state = 625
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 630
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.T__3:
                    self.state = 626
                    self.match(DiffSqlParser.T__3)
                    self.state = 627
                    self.match(DiffSqlParser.T__4)
                    self.state = 628
                    self.match(DiffSqlParser.T__5)
                    self.state = 629
                    self.expr()


                self.state = 632
                self.match(DiffSqlParser.T__6)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 634
                self.select_results()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(DiffSqlParser.SELECT, 0)

        def opt_top_or_distinct(self):
            return self.getTypedRuleContext(DiffSqlParser.Opt_top_or_distinctContext,0)


        def single_select_results(self):
            return self.getTypedRuleContext(DiffSqlParser.Single_select_resultsContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_select_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_clause" ):
                listener.enterSelect_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_clause" ):
                listener.exitSelect_clause(self)




    def select_clause(self):

        localctx = DiffSqlParser.Select_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_select_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 637
            self.match(DiffSqlParser.SELECT)
            self.state = 638
            self.opt_top_or_distinct()
            self.state = 639
            self.single_select_results()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Single_top_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def single_top_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DiffSqlParser.Single_top_clauseContext)
            else:
                return self.getTypedRuleContext(DiffSqlParser.Single_top_clauseContext,i)


        def expr(self):
            return self.getTypedRuleContext(DiffSqlParser.ExprContext,0)


        def top_clause(self):
            return self.getTypedRuleContext(DiffSqlParser.Top_clauseContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_single_top_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_top_clause" ):
                listener.enterSingle_top_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_top_clause" ):
                listener.exitSingle_top_clause(self)




    def single_top_clause(self):

        localctx = DiffSqlParser.Single_top_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_single_top_clause)
        self._la = 0 # Token type
        try:
            self.state = 660
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DiffSqlParser.T__0]:
                self.enterOuterAlt(localctx, 1)
                self.state = 641
                self.match(DiffSqlParser.T__0)
                self.state = 642
                self.match(DiffSqlParser.T__1)
                self.state = 643
                self.single_top_clause()
                self.state = 648
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==DiffSqlParser.T__2:
                    self.state = 644
                    self.match(DiffSqlParser.T__2)
                    self.state = 645
                    self.single_top_clause()
                    self.state = 650
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 655
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.T__3:
                    self.state = 651
                    self.match(DiffSqlParser.T__3)
                    self.state = 652
                    self.match(DiffSqlParser.T__4)
                    self.state = 653
                    self.match(DiffSqlParser.T__5)
                    self.state = 654
                    self.expr()


                self.state = 657
                self.match(DiffSqlParser.T__6)
                pass
            elif token in [DiffSqlParser.TOP]:
                self.enterOuterAlt(localctx, 2)
                self.state = 659
                self.top_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Top_or_distinctContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def single_top_clause(self):
            return self.getTypedRuleContext(DiffSqlParser.Single_top_clauseContext,0)


        def distinct(self):
            return self.getTypedRuleContext(DiffSqlParser.DistinctContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_top_or_distinct

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTop_or_distinct" ):
                listener.enterTop_or_distinct(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTop_or_distinct" ):
                listener.exitTop_or_distinct(self)




    def top_or_distinct(self):

        localctx = DiffSqlParser.Top_or_distinctContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_top_or_distinct)
        try:
            self.state = 664
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DiffSqlParser.T__0, DiffSqlParser.TOP]:
                self.enterOuterAlt(localctx, 1)
                self.state = 662
                self.single_top_clause()
                pass
            elif token in [DiffSqlParser.DISTINCT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 663
                self.distinct()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Single_numberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def single_number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DiffSqlParser.Single_numberContext)
            else:
                return self.getTypedRuleContext(DiffSqlParser.Single_numberContext,i)


        def expr(self):
            return self.getTypedRuleContext(DiffSqlParser.ExprContext,0)


        def number(self):
            return self.getTypedRuleContext(DiffSqlParser.NumberContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_single_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_number" ):
                listener.enterSingle_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_number" ):
                listener.exitSingle_number(self)




    def single_number(self):

        localctx = DiffSqlParser.Single_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_single_number)
        self._la = 0 # Token type
        try:
            self.state = 685
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DiffSqlParser.T__0]:
                self.enterOuterAlt(localctx, 1)
                self.state = 666
                self.match(DiffSqlParser.T__0)
                self.state = 667
                self.match(DiffSqlParser.T__1)
                self.state = 668
                self.single_number()
                self.state = 673
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==DiffSqlParser.T__2:
                    self.state = 669
                    self.match(DiffSqlParser.T__2)
                    self.state = 670
                    self.single_number()
                    self.state = 675
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 680
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.T__3:
                    self.state = 676
                    self.match(DiffSqlParser.T__3)
                    self.state = 677
                    self.match(DiffSqlParser.T__4)
                    self.state = 678
                    self.match(DiffSqlParser.T__5)
                    self.state = 679
                    self.expr()


                self.state = 682
                self.match(DiffSqlParser.T__6)
                pass
            elif token in [DiffSqlParser.NUMBER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 684
                self.number()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Top_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TOP(self):
            return self.getToken(DiffSqlParser.TOP, 0)

        def single_number(self):
            return self.getTypedRuleContext(DiffSqlParser.Single_numberContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_top_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTop_clause" ):
                listener.enterTop_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTop_clause" ):
                listener.exitTop_clause(self)




    def top_clause(self):

        localctx = DiffSqlParser.Top_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_top_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 687
            self.match(DiffSqlParser.TOP)
            self.state = 688
            self.single_number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comma_multi_select_result_commaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comma(self):
            return self.getTypedRuleContext(DiffSqlParser.CommaContext,0)


        def multi_select_result_comma(self):
            return self.getTypedRuleContext(DiffSqlParser.Multi_select_result_commaContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_comma_multi_select_result_comma

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComma_multi_select_result_comma" ):
                listener.enterComma_multi_select_result_comma(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComma_multi_select_result_comma" ):
                listener.exitComma_multi_select_result_comma(self)




    def comma_multi_select_result_comma(self):

        localctx = DiffSqlParser.Comma_multi_select_result_commaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_comma_multi_select_result_comma)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 690
            self.comma()
            self.state = 691
            self.multi_select_result_comma()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Single_select_resultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def single_select_result(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DiffSqlParser.Single_select_resultContext)
            else:
                return self.getTypedRuleContext(DiffSqlParser.Single_select_resultContext,i)


        def expr(self):
            return self.getTypedRuleContext(DiffSqlParser.ExprContext,0)


        def select_result(self):
            return self.getTypedRuleContext(DiffSqlParser.Select_resultContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_single_select_result

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_select_result" ):
                listener.enterSingle_select_result(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_select_result" ):
                listener.exitSingle_select_result(self)




    def single_select_result(self):

        localctx = DiffSqlParser.Single_select_resultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_single_select_result)
        self._la = 0 # Token type
        try:
            self.state = 712
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 693
                self.match(DiffSqlParser.T__0)
                self.state = 694
                self.match(DiffSqlParser.T__1)
                self.state = 695
                self.single_select_result()
                self.state = 700
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==DiffSqlParser.T__2:
                    self.state = 696
                    self.match(DiffSqlParser.T__2)
                    self.state = 697
                    self.single_select_result()
                    self.state = 702
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 707
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.T__3:
                    self.state = 703
                    self.match(DiffSqlParser.T__3)
                    self.state = 704
                    self.match(DiffSqlParser.T__4)
                    self.state = 705
                    self.match(DiffSqlParser.T__5)
                    self.state = 706
                    self.expr()


                self.state = 709
                self.match(DiffSqlParser.T__6)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 711
                self.select_result()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Opt_comma_multi_select_result_commaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def opt_comma_multi_select_result_comma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DiffSqlParser.Opt_comma_multi_select_result_commaContext)
            else:
                return self.getTypedRuleContext(DiffSqlParser.Opt_comma_multi_select_result_commaContext,i)


        def expr(self):
            return self.getTypedRuleContext(DiffSqlParser.ExprContext,0)


        def comma_multi_select_result_comma(self):
            return self.getTypedRuleContext(DiffSqlParser.Comma_multi_select_result_commaContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_opt_comma_multi_select_result_comma

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpt_comma_multi_select_result_comma" ):
                listener.enterOpt_comma_multi_select_result_comma(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpt_comma_multi_select_result_comma" ):
                listener.exitOpt_comma_multi_select_result_comma(self)




    def opt_comma_multi_select_result_comma(self):

        localctx = DiffSqlParser.Opt_comma_multi_select_result_commaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_opt_comma_multi_select_result_comma)
        self._la = 0 # Token type
        try:
            self.state = 746
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 714
                self.match(DiffSqlParser.T__0)
                self.state = 715
                self.match(DiffSqlParser.T__1)
                self.state = 716
                self.opt_comma_multi_select_result_comma()
                self.state = 721
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==DiffSqlParser.T__2:
                    self.state = 717
                    self.match(DiffSqlParser.T__2)
                    self.state = 718
                    self.opt_comma_multi_select_result_comma()
                    self.state = 723
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 728
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.T__3:
                    self.state = 724
                    self.match(DiffSqlParser.T__3)
                    self.state = 725
                    self.match(DiffSqlParser.T__4)
                    self.state = 726
                    self.match(DiffSqlParser.T__5)
                    self.state = 727
                    self.expr()


                self.state = 730
                self.match(DiffSqlParser.T__6)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 732
                self.match(DiffSqlParser.T__7)
                self.state = 733
                self.match(DiffSqlParser.T__1)
                self.state = 734
                self.opt_comma_multi_select_result_comma()
                self.state = 739
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.T__3:
                    self.state = 735
                    self.match(DiffSqlParser.T__3)
                    self.state = 736
                    self.match(DiffSqlParser.T__4)
                    self.state = 737
                    self.match(DiffSqlParser.T__5)
                    self.state = 738
                    self.expr()


                self.state = 741
                self.match(DiffSqlParser.T__6)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 744
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.COMMA:
                    self.state = 743
                    self.comma_multi_select_result_comma()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Multi_select_result_commaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comma(self):
            return self.getTypedRuleContext(DiffSqlParser.CommaContext,0)


        def COMMA(self):
            return self.getToken(DiffSqlParser.COMMA, 0)

        def single_select_result(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DiffSqlParser.Single_select_resultContext)
            else:
                return self.getTypedRuleContext(DiffSqlParser.Single_select_resultContext,i)


        def opt_comma_multi_select_result_comma(self):
            return self.getTypedRuleContext(DiffSqlParser.Opt_comma_multi_select_result_commaContext,0)


        def expr(self):
            return self.getTypedRuleContext(DiffSqlParser.ExprContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_multi_select_result_comma

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMulti_select_result_comma" ):
                listener.enterMulti_select_result_comma(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMulti_select_result_comma" ):
                listener.exitMulti_select_result_comma(self)




    def multi_select_result_comma(self):

        localctx = DiffSqlParser.Multi_select_result_commaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_multi_select_result_comma)
        self._la = 0 # Token type
        try:
            self.state = 780
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DiffSqlParser.T__8]:
                self.enterOuterAlt(localctx, 1)
                self.state = 748
                self.match(DiffSqlParser.T__8)
                self.state = 749
                self.match(DiffSqlParser.T__1)
                self.state = 750
                self.comma()
                self.state = 751
                self.match(DiffSqlParser.COMMA)
                self.state = 752
                self.single_select_result()
                self.state = 757
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==DiffSqlParser.T__2:
                    self.state = 753
                    self.match(DiffSqlParser.T__2)
                    self.state = 754
                    self.single_select_result()
                    self.state = 759
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 760
                self.match(DiffSqlParser.T__6)
                self.state = 761
                self.opt_comma_multi_select_result_comma()
                pass
            elif token in [DiffSqlParser.T__9]:
                self.enterOuterAlt(localctx, 2)
                self.state = 763
                self.match(DiffSqlParser.T__9)
                self.state = 764
                self.match(DiffSqlParser.T__1)
                self.state = 765
                self.comma()
                self.state = 766
                self.match(DiffSqlParser.COMMA)
                self.state = 767
                self.single_select_result()
                self.state = 772
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.T__3:
                    self.state = 768
                    self.match(DiffSqlParser.T__3)
                    self.state = 769
                    self.match(DiffSqlParser.T__4)
                    self.state = 770
                    self.match(DiffSqlParser.T__5)
                    self.state = 771
                    self.expr()


                self.state = 774
                self.match(DiffSqlParser.T__6)
                self.state = 775
                self.opt_comma_multi_select_result_comma()
                pass
            elif token in [DiffSqlParser.T__0, DiffSqlParser.T__11, DiffSqlParser.T__14, DiffSqlParser.T__15, DiffSqlParser.T__17, DiffSqlParser.T__18, DiffSqlParser.T__21, DiffSqlParser.T__22, DiffSqlParser.STAR, DiffSqlParser.NOT, DiffSqlParser.NUMBER, DiffSqlParser.STRING, DiffSqlParser.NAME]:
                self.enterOuterAlt(localctx, 3)
                self.state = 777
                self.single_select_result()
                self.state = 778
                self.opt_comma_multi_select_result_comma()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_resultsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multi_select_result_comma(self):
            return self.getTypedRuleContext(DiffSqlParser.Multi_select_result_commaContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_select_results

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_results" ):
                listener.enterSelect_results(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_results" ):
                listener.exitSelect_results(self)




    def select_results(self):

        localctx = DiffSqlParser.Select_resultsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_select_results)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 782
            self.multi_select_result_comma()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Single_sel_res_all_starContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def single_sel_res_all_star(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DiffSqlParser.Single_sel_res_all_starContext)
            else:
                return self.getTypedRuleContext(DiffSqlParser.Single_sel_res_all_starContext,i)


        def expr(self):
            return self.getTypedRuleContext(DiffSqlParser.ExprContext,0)


        def sel_res_all_star(self):
            return self.getTypedRuleContext(DiffSqlParser.Sel_res_all_starContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_single_sel_res_all_star

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_sel_res_all_star" ):
                listener.enterSingle_sel_res_all_star(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_sel_res_all_star" ):
                listener.exitSingle_sel_res_all_star(self)




    def single_sel_res_all_star(self):

        localctx = DiffSqlParser.Single_sel_res_all_starContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_single_sel_res_all_star)
        self._la = 0 # Token type
        try:
            self.state = 803
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DiffSqlParser.T__0]:
                self.enterOuterAlt(localctx, 1)
                self.state = 784
                self.match(DiffSqlParser.T__0)
                self.state = 785
                self.match(DiffSqlParser.T__1)
                self.state = 786
                self.single_sel_res_all_star()
                self.state = 791
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==DiffSqlParser.T__2:
                    self.state = 787
                    self.match(DiffSqlParser.T__2)
                    self.state = 788
                    self.single_sel_res_all_star()
                    self.state = 793
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 798
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.T__3:
                    self.state = 794
                    self.match(DiffSqlParser.T__3)
                    self.state = 795
                    self.match(DiffSqlParser.T__4)
                    self.state = 796
                    self.match(DiffSqlParser.T__5)
                    self.state = 797
                    self.expr()


                self.state = 800
                self.match(DiffSqlParser.T__6)
                pass
            elif token in [DiffSqlParser.STAR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 802
                self.sel_res_all_star()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Single_sel_res_tab_starContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def single_sel_res_tab_star(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DiffSqlParser.Single_sel_res_tab_starContext)
            else:
                return self.getTypedRuleContext(DiffSqlParser.Single_sel_res_tab_starContext,i)


        def expr(self):
            return self.getTypedRuleContext(DiffSqlParser.ExprContext,0)


        def sel_res_tab_star(self):
            return self.getTypedRuleContext(DiffSqlParser.Sel_res_tab_starContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_single_sel_res_tab_star

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_sel_res_tab_star" ):
                listener.enterSingle_sel_res_tab_star(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_sel_res_tab_star" ):
                listener.exitSingle_sel_res_tab_star(self)




    def single_sel_res_tab_star(self):

        localctx = DiffSqlParser.Single_sel_res_tab_starContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_single_sel_res_tab_star)
        self._la = 0 # Token type
        try:
            self.state = 824
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 805
                self.match(DiffSqlParser.T__0)
                self.state = 806
                self.match(DiffSqlParser.T__1)
                self.state = 807
                self.single_sel_res_tab_star()
                self.state = 812
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==DiffSqlParser.T__2:
                    self.state = 808
                    self.match(DiffSqlParser.T__2)
                    self.state = 809
                    self.single_sel_res_tab_star()
                    self.state = 814
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 819
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.T__3:
                    self.state = 815
                    self.match(DiffSqlParser.T__3)
                    self.state = 816
                    self.match(DiffSqlParser.T__4)
                    self.state = 817
                    self.match(DiffSqlParser.T__5)
                    self.state = 818
                    self.expr()


                self.state = 821
                self.match(DiffSqlParser.T__6)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 823
                self.sel_res_tab_star()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Single_sel_res_valContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def single_sel_res_val(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DiffSqlParser.Single_sel_res_valContext)
            else:
                return self.getTypedRuleContext(DiffSqlParser.Single_sel_res_valContext,i)


        def expr(self):
            return self.getTypedRuleContext(DiffSqlParser.ExprContext,0)


        def sel_res_val(self):
            return self.getTypedRuleContext(DiffSqlParser.Sel_res_valContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_single_sel_res_val

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_sel_res_val" ):
                listener.enterSingle_sel_res_val(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_sel_res_val" ):
                listener.exitSingle_sel_res_val(self)




    def single_sel_res_val(self):

        localctx = DiffSqlParser.Single_sel_res_valContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_single_sel_res_val)
        self._la = 0 # Token type
        try:
            self.state = 845
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 826
                self.match(DiffSqlParser.T__0)
                self.state = 827
                self.match(DiffSqlParser.T__1)
                self.state = 828
                self.single_sel_res_val()
                self.state = 833
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==DiffSqlParser.T__2:
                    self.state = 829
                    self.match(DiffSqlParser.T__2)
                    self.state = 830
                    self.single_sel_res_val()
                    self.state = 835
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 840
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.T__3:
                    self.state = 836
                    self.match(DiffSqlParser.T__3)
                    self.state = 837
                    self.match(DiffSqlParser.T__4)
                    self.state = 838
                    self.match(DiffSqlParser.T__5)
                    self.state = 839
                    self.expr()


                self.state = 842
                self.match(DiffSqlParser.T__6)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 844
                self.sel_res_val()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Single_sel_res_colContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def single_sel_res_col(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DiffSqlParser.Single_sel_res_colContext)
            else:
                return self.getTypedRuleContext(DiffSqlParser.Single_sel_res_colContext,i)


        def expr(self):
            return self.getTypedRuleContext(DiffSqlParser.ExprContext,0)


        def sel_res_col(self):
            return self.getTypedRuleContext(DiffSqlParser.Sel_res_colContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_single_sel_res_col

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_sel_res_col" ):
                listener.enterSingle_sel_res_col(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_sel_res_col" ):
                listener.exitSingle_sel_res_col(self)




    def single_sel_res_col(self):

        localctx = DiffSqlParser.Single_sel_res_colContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_single_sel_res_col)
        self._la = 0 # Token type
        try:
            self.state = 866
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 847
                self.match(DiffSqlParser.T__0)
                self.state = 848
                self.match(DiffSqlParser.T__1)
                self.state = 849
                self.single_sel_res_col()
                self.state = 854
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==DiffSqlParser.T__2:
                    self.state = 850
                    self.match(DiffSqlParser.T__2)
                    self.state = 851
                    self.single_sel_res_col()
                    self.state = 856
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 861
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.T__3:
                    self.state = 857
                    self.match(DiffSqlParser.T__3)
                    self.state = 858
                    self.match(DiffSqlParser.T__4)
                    self.state = 859
                    self.match(DiffSqlParser.T__5)
                    self.state = 860
                    self.expr()


                self.state = 863
                self.match(DiffSqlParser.T__6)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 865
                self.sel_res_col()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_resultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def single_sel_res_all_star(self):
            return self.getTypedRuleContext(DiffSqlParser.Single_sel_res_all_starContext,0)


        def single_sel_res_tab_star(self):
            return self.getTypedRuleContext(DiffSqlParser.Single_sel_res_tab_starContext,0)


        def single_sel_res_val(self):
            return self.getTypedRuleContext(DiffSqlParser.Single_sel_res_valContext,0)


        def single_sel_res_col(self):
            return self.getTypedRuleContext(DiffSqlParser.Single_sel_res_colContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_select_result

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_result" ):
                listener.enterSelect_result(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_result" ):
                listener.exitSelect_result(self)




    def select_result(self):

        localctx = DiffSqlParser.Select_resultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_select_result)
        try:
            self.state = 872
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 868
                self.single_sel_res_all_star()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 869
                self.single_sel_res_tab_star()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 870
                self.single_sel_res_val()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 871
                self.single_sel_res_col()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Single_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def single_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DiffSqlParser.Single_nameContext)
            else:
                return self.getTypedRuleContext(DiffSqlParser.Single_nameContext,i)


        def expr(self):
            return self.getTypedRuleContext(DiffSqlParser.ExprContext,0)


        def name(self):
            return self.getTypedRuleContext(DiffSqlParser.NameContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_single_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_name" ):
                listener.enterSingle_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_name" ):
                listener.exitSingle_name(self)




    def single_name(self):

        localctx = DiffSqlParser.Single_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_single_name)
        self._la = 0 # Token type
        try:
            self.state = 893
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DiffSqlParser.T__0]:
                self.enterOuterAlt(localctx, 1)
                self.state = 874
                self.match(DiffSqlParser.T__0)
                self.state = 875
                self.match(DiffSqlParser.T__1)
                self.state = 876
                self.single_name()
                self.state = 881
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==DiffSqlParser.T__2:
                    self.state = 877
                    self.match(DiffSqlParser.T__2)
                    self.state = 878
                    self.single_name()
                    self.state = 883
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 888
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.T__3:
                    self.state = 884
                    self.match(DiffSqlParser.T__3)
                    self.state = 885
                    self.match(DiffSqlParser.T__4)
                    self.state = 886
                    self.match(DiffSqlParser.T__5)
                    self.state = 887
                    self.expr()


                self.state = 890
                self.match(DiffSqlParser.T__6)
                pass
            elif token in [DiffSqlParser.NAME]:
                self.enterOuterAlt(localctx, 2)
                self.state = 892
                self.name()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sel_res_tab_starContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def single_name(self):
            return self.getTypedRuleContext(DiffSqlParser.Single_nameContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_sel_res_tab_star

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSel_res_tab_star" ):
                listener.enterSel_res_tab_star(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSel_res_tab_star" ):
                listener.exitSel_res_tab_star(self)




    def sel_res_tab_star(self):

        localctx = DiffSqlParser.Sel_res_tab_starContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_sel_res_tab_star)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 895
            self.single_name()
            self.state = 896
            self.match(DiffSqlParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sel_res_all_starContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(DiffSqlParser.STAR, 0)

        def getRuleIndex(self):
            return DiffSqlParser.RULE_sel_res_all_star

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSel_res_all_star" ):
                listener.enterSel_res_all_star(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSel_res_all_star" ):
                listener.exitSel_res_all_star(self)




    def sel_res_all_star(self):

        localctx = DiffSqlParser.Sel_res_all_starContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_sel_res_all_star)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 898
            self.match(DiffSqlParser.STAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class As_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(DiffSqlParser.AS, 0)

        def name(self):
            return self.getTypedRuleContext(DiffSqlParser.NameContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_as_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAs_name" ):
                listener.enterAs_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAs_name" ):
                listener.exitAs_name(self)




    def as_name(self):

        localctx = DiffSqlParser.As_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_as_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 900
            self.match(DiffSqlParser.AS)
            self.state = 901
            self.name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Single_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def single_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DiffSqlParser.Single_exprContext)
            else:
                return self.getTypedRuleContext(DiffSqlParser.Single_exprContext,i)


        def expr(self):
            return self.getTypedRuleContext(DiffSqlParser.ExprContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_single_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_expr" ):
                listener.enterSingle_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_expr" ):
                listener.exitSingle_expr(self)




    def single_expr(self):

        localctx = DiffSqlParser.Single_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_single_expr)
        self._la = 0 # Token type
        try:
            self.state = 922
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 903
                self.match(DiffSqlParser.T__0)
                self.state = 904
                self.match(DiffSqlParser.T__1)
                self.state = 905
                self.single_expr()
                self.state = 910
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==DiffSqlParser.T__2:
                    self.state = 906
                    self.match(DiffSqlParser.T__2)
                    self.state = 907
                    self.single_expr()
                    self.state = 912
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 917
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.T__3:
                    self.state = 913
                    self.match(DiffSqlParser.T__3)
                    self.state = 914
                    self.match(DiffSqlParser.T__4)
                    self.state = 915
                    self.match(DiffSqlParser.T__5)
                    self.state = 916
                    self.expr()


                self.state = 919
                self.match(DiffSqlParser.T__6)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 921
                self.expr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Opt_as_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def opt_as_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DiffSqlParser.Opt_as_nameContext)
            else:
                return self.getTypedRuleContext(DiffSqlParser.Opt_as_nameContext,i)


        def expr(self):
            return self.getTypedRuleContext(DiffSqlParser.ExprContext,0)


        def as_name(self):
            return self.getTypedRuleContext(DiffSqlParser.As_nameContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_opt_as_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpt_as_name" ):
                listener.enterOpt_as_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpt_as_name" ):
                listener.exitOpt_as_name(self)




    def opt_as_name(self):

        localctx = DiffSqlParser.Opt_as_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_opt_as_name)
        self._la = 0 # Token type
        try:
            self.state = 956
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 924
                self.match(DiffSqlParser.T__0)
                self.state = 925
                self.match(DiffSqlParser.T__1)
                self.state = 926
                self.opt_as_name()
                self.state = 931
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==DiffSqlParser.T__2:
                    self.state = 927
                    self.match(DiffSqlParser.T__2)
                    self.state = 928
                    self.opt_as_name()
                    self.state = 933
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 938
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.T__3:
                    self.state = 934
                    self.match(DiffSqlParser.T__3)
                    self.state = 935
                    self.match(DiffSqlParser.T__4)
                    self.state = 936
                    self.match(DiffSqlParser.T__5)
                    self.state = 937
                    self.expr()


                self.state = 940
                self.match(DiffSqlParser.T__6)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 942
                self.match(DiffSqlParser.T__7)
                self.state = 943
                self.match(DiffSqlParser.T__1)
                self.state = 944
                self.opt_as_name()
                self.state = 949
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.T__3:
                    self.state = 945
                    self.match(DiffSqlParser.T__3)
                    self.state = 946
                    self.match(DiffSqlParser.T__4)
                    self.state = 947
                    self.match(DiffSqlParser.T__5)
                    self.state = 948
                    self.expr()


                self.state = 951
                self.match(DiffSqlParser.T__6)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 954
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.AS:
                    self.state = 953
                    self.as_name()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sel_res_valContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def single_expr(self):
            return self.getTypedRuleContext(DiffSqlParser.Single_exprContext,0)


        def opt_as_name(self):
            return self.getTypedRuleContext(DiffSqlParser.Opt_as_nameContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_sel_res_val

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSel_res_val" ):
                listener.enterSel_res_val(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSel_res_val" ):
                listener.exitSel_res_val(self)




    def sel_res_val(self):

        localctx = DiffSqlParser.Sel_res_valContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_sel_res_val)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 958
            self.single_expr()
            self.state = 959
            self.opt_as_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Single_col_refContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def single_col_ref(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DiffSqlParser.Single_col_refContext)
            else:
                return self.getTypedRuleContext(DiffSqlParser.Single_col_refContext,i)


        def expr(self):
            return self.getTypedRuleContext(DiffSqlParser.ExprContext,0)


        def col_ref(self):
            return self.getTypedRuleContext(DiffSqlParser.Col_refContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_single_col_ref

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_col_ref" ):
                listener.enterSingle_col_ref(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_col_ref" ):
                listener.exitSingle_col_ref(self)




    def single_col_ref(self):

        localctx = DiffSqlParser.Single_col_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_single_col_ref)
        self._la = 0 # Token type
        try:
            self.state = 980
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DiffSqlParser.T__0]:
                self.enterOuterAlt(localctx, 1)
                self.state = 961
                self.match(DiffSqlParser.T__0)
                self.state = 962
                self.match(DiffSqlParser.T__1)
                self.state = 963
                self.single_col_ref()
                self.state = 968
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==DiffSqlParser.T__2:
                    self.state = 964
                    self.match(DiffSqlParser.T__2)
                    self.state = 965
                    self.single_col_ref()
                    self.state = 970
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 975
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.T__3:
                    self.state = 971
                    self.match(DiffSqlParser.T__3)
                    self.state = 972
                    self.match(DiffSqlParser.T__4)
                    self.state = 973
                    self.match(DiffSqlParser.T__5)
                    self.state = 974
                    self.expr()


                self.state = 977
                self.match(DiffSqlParser.T__6)
                pass
            elif token in [DiffSqlParser.NAME]:
                self.enterOuterAlt(localctx, 2)
                self.state = 979
                self.col_ref()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sel_res_colContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def single_col_ref(self):
            return self.getTypedRuleContext(DiffSqlParser.Single_col_refContext,0)


        def opt_as_name(self):
            return self.getTypedRuleContext(DiffSqlParser.Opt_as_nameContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_sel_res_col

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSel_res_col" ):
                listener.enterSel_res_col(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSel_res_col" ):
                listener.exitSel_res_col(self)




    def sel_res_col(self):

        localctx = DiffSqlParser.Sel_res_colContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_sel_res_col)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 982
            self.single_col_ref()
            self.state = 983
            self.opt_as_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comma_multi_single_source_commaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comma(self):
            return self.getTypedRuleContext(DiffSqlParser.CommaContext,0)


        def multi_single_source_comma(self):
            return self.getTypedRuleContext(DiffSqlParser.Multi_single_source_commaContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_comma_multi_single_source_comma

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComma_multi_single_source_comma" ):
                listener.enterComma_multi_single_source_comma(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComma_multi_single_source_comma" ):
                listener.exitComma_multi_single_source_comma(self)




    def comma_multi_single_source_comma(self):

        localctx = DiffSqlParser.Comma_multi_single_source_commaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_comma_multi_single_source_comma)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 985
            self.comma()
            self.state = 986
            self.multi_single_source_comma()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Single_single_sourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def single_single_source(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DiffSqlParser.Single_single_sourceContext)
            else:
                return self.getTypedRuleContext(DiffSqlParser.Single_single_sourceContext,i)


        def expr(self):
            return self.getTypedRuleContext(DiffSqlParser.ExprContext,0)


        def single_source(self):
            return self.getTypedRuleContext(DiffSqlParser.Single_sourceContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_single_single_source

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_single_source" ):
                listener.enterSingle_single_source(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_single_source" ):
                listener.exitSingle_single_source(self)




    def single_single_source(self):

        localctx = DiffSqlParser.Single_single_sourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_single_single_source)
        self._la = 0 # Token type
        try:
            self.state = 1007
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 988
                self.match(DiffSqlParser.T__0)
                self.state = 989
                self.match(DiffSqlParser.T__1)
                self.state = 990
                self.single_single_source()
                self.state = 995
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==DiffSqlParser.T__2:
                    self.state = 991
                    self.match(DiffSqlParser.T__2)
                    self.state = 992
                    self.single_single_source()
                    self.state = 997
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1002
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.T__3:
                    self.state = 998
                    self.match(DiffSqlParser.T__3)
                    self.state = 999
                    self.match(DiffSqlParser.T__4)
                    self.state = 1000
                    self.match(DiffSqlParser.T__5)
                    self.state = 1001
                    self.expr()


                self.state = 1004
                self.match(DiffSqlParser.T__6)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1006
                self.single_source()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Opt_comma_multi_single_source_commaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def opt_comma_multi_single_source_comma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DiffSqlParser.Opt_comma_multi_single_source_commaContext)
            else:
                return self.getTypedRuleContext(DiffSqlParser.Opt_comma_multi_single_source_commaContext,i)


        def expr(self):
            return self.getTypedRuleContext(DiffSqlParser.ExprContext,0)


        def comma_multi_single_source_comma(self):
            return self.getTypedRuleContext(DiffSqlParser.Comma_multi_single_source_commaContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_opt_comma_multi_single_source_comma

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpt_comma_multi_single_source_comma" ):
                listener.enterOpt_comma_multi_single_source_comma(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpt_comma_multi_single_source_comma" ):
                listener.exitOpt_comma_multi_single_source_comma(self)




    def opt_comma_multi_single_source_comma(self):

        localctx = DiffSqlParser.Opt_comma_multi_single_source_commaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_opt_comma_multi_single_source_comma)
        self._la = 0 # Token type
        try:
            self.state = 1041
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1009
                self.match(DiffSqlParser.T__0)
                self.state = 1010
                self.match(DiffSqlParser.T__1)
                self.state = 1011
                self.opt_comma_multi_single_source_comma()
                self.state = 1016
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==DiffSqlParser.T__2:
                    self.state = 1012
                    self.match(DiffSqlParser.T__2)
                    self.state = 1013
                    self.opt_comma_multi_single_source_comma()
                    self.state = 1018
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1023
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.T__3:
                    self.state = 1019
                    self.match(DiffSqlParser.T__3)
                    self.state = 1020
                    self.match(DiffSqlParser.T__4)
                    self.state = 1021
                    self.match(DiffSqlParser.T__5)
                    self.state = 1022
                    self.expr()


                self.state = 1025
                self.match(DiffSqlParser.T__6)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1027
                self.match(DiffSqlParser.T__7)
                self.state = 1028
                self.match(DiffSqlParser.T__1)
                self.state = 1029
                self.opt_comma_multi_single_source_comma()
                self.state = 1034
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.T__3:
                    self.state = 1030
                    self.match(DiffSqlParser.T__3)
                    self.state = 1031
                    self.match(DiffSqlParser.T__4)
                    self.state = 1032
                    self.match(DiffSqlParser.T__5)
                    self.state = 1033
                    self.expr()


                self.state = 1036
                self.match(DiffSqlParser.T__6)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1039
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.COMMA:
                    self.state = 1038
                    self.comma_multi_single_source_comma()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Multi_single_source_commaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comma(self):
            return self.getTypedRuleContext(DiffSqlParser.CommaContext,0)


        def COMMA(self):
            return self.getToken(DiffSqlParser.COMMA, 0)

        def single_single_source(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DiffSqlParser.Single_single_sourceContext)
            else:
                return self.getTypedRuleContext(DiffSqlParser.Single_single_sourceContext,i)


        def opt_comma_multi_single_source_comma(self):
            return self.getTypedRuleContext(DiffSqlParser.Opt_comma_multi_single_source_commaContext,0)


        def expr(self):
            return self.getTypedRuleContext(DiffSqlParser.ExprContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_multi_single_source_comma

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMulti_single_source_comma" ):
                listener.enterMulti_single_source_comma(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMulti_single_source_comma" ):
                listener.exitMulti_single_source_comma(self)




    def multi_single_source_comma(self):

        localctx = DiffSqlParser.Multi_single_source_commaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_multi_single_source_comma)
        self._la = 0 # Token type
        try:
            self.state = 1075
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DiffSqlParser.T__8]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1043
                self.match(DiffSqlParser.T__8)
                self.state = 1044
                self.match(DiffSqlParser.T__1)
                self.state = 1045
                self.comma()
                self.state = 1046
                self.match(DiffSqlParser.COMMA)
                self.state = 1047
                self.single_single_source()
                self.state = 1052
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==DiffSqlParser.T__2:
                    self.state = 1048
                    self.match(DiffSqlParser.T__2)
                    self.state = 1049
                    self.single_single_source()
                    self.state = 1054
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1055
                self.match(DiffSqlParser.T__6)
                self.state = 1056
                self.opt_comma_multi_single_source_comma()
                pass
            elif token in [DiffSqlParser.T__9]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1058
                self.match(DiffSqlParser.T__9)
                self.state = 1059
                self.match(DiffSqlParser.T__1)
                self.state = 1060
                self.comma()
                self.state = 1061
                self.match(DiffSqlParser.COMMA)
                self.state = 1062
                self.single_single_source()
                self.state = 1067
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.T__3:
                    self.state = 1063
                    self.match(DiffSqlParser.T__3)
                    self.state = 1064
                    self.match(DiffSqlParser.T__4)
                    self.state = 1065
                    self.match(DiffSqlParser.T__5)
                    self.state = 1066
                    self.expr()


                self.state = 1069
                self.match(DiffSqlParser.T__6)
                self.state = 1070
                self.opt_comma_multi_single_source_comma()
                pass
            elif token in [DiffSqlParser.T__0, DiffSqlParser.T__11, DiffSqlParser.NAME]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1072
                self.single_single_source()
                self.state = 1073
                self.opt_comma_multi_single_source_comma()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class From_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multi_single_source_comma(self):
            return self.getTypedRuleContext(DiffSqlParser.Multi_single_source_commaContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_from_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrom_list" ):
                listener.enterFrom_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrom_list" ):
                listener.exitFrom_list(self)




    def from_list(self):

        localctx = DiffSqlParser.From_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_from_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1077
            self.multi_single_source_comma()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Single_joinContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def single_single_source(self):
            return self.getTypedRuleContext(DiffSqlParser.Single_single_sourceContext,0)


        def ON(self):
            return self.getToken(DiffSqlParser.ON, 0)

        def expr(self):
            return self.getTypedRuleContext(DiffSqlParser.ExprContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_single_join

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_join" ):
                listener.enterSingle_join(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_join" ):
                listener.exitSingle_join(self)




    def single_join(self):

        localctx = DiffSqlParser.Single_joinContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_single_join)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1079
            self.single_single_source()
            self.state = 1080
            self.match(DiffSqlParser.ON)
            self.state = 1081
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_multi_single_join_joinContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def join(self):
            return self.getTypedRuleContext(DiffSqlParser.JoinContext,0)


        def multi_single_join_join(self):
            return self.getTypedRuleContext(DiffSqlParser.Multi_single_join_joinContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_join_multi_single_join_join

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_multi_single_join_join" ):
                listener.enterJoin_multi_single_join_join(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_multi_single_join_join" ):
                listener.exitJoin_multi_single_join_join(self)




    def join_multi_single_join_join(self):

        localctx = DiffSqlParser.Join_multi_single_join_joinContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_join_multi_single_join_join)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1083
            self.join()
            self.state = 1084
            self.multi_single_join_join()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Single_single_joinContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def single_single_join(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DiffSqlParser.Single_single_joinContext)
            else:
                return self.getTypedRuleContext(DiffSqlParser.Single_single_joinContext,i)


        def expr(self):
            return self.getTypedRuleContext(DiffSqlParser.ExprContext,0)


        def single_join(self):
            return self.getTypedRuleContext(DiffSqlParser.Single_joinContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_single_single_join

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_single_join" ):
                listener.enterSingle_single_join(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_single_join" ):
                listener.exitSingle_single_join(self)




    def single_single_join(self):

        localctx = DiffSqlParser.Single_single_joinContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_single_single_join)
        self._la = 0 # Token type
        try:
            self.state = 1105
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1086
                self.match(DiffSqlParser.T__0)
                self.state = 1087
                self.match(DiffSqlParser.T__1)
                self.state = 1088
                self.single_single_join()
                self.state = 1093
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==DiffSqlParser.T__2:
                    self.state = 1089
                    self.match(DiffSqlParser.T__2)
                    self.state = 1090
                    self.single_single_join()
                    self.state = 1095
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1100
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.T__3:
                    self.state = 1096
                    self.match(DiffSqlParser.T__3)
                    self.state = 1097
                    self.match(DiffSqlParser.T__4)
                    self.state = 1098
                    self.match(DiffSqlParser.T__5)
                    self.state = 1099
                    self.expr()


                self.state = 1102
                self.match(DiffSqlParser.T__6)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1104
                self.single_join()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Opt_join_multi_single_join_joinContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def opt_join_multi_single_join_join(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DiffSqlParser.Opt_join_multi_single_join_joinContext)
            else:
                return self.getTypedRuleContext(DiffSqlParser.Opt_join_multi_single_join_joinContext,i)


        def expr(self):
            return self.getTypedRuleContext(DiffSqlParser.ExprContext,0)


        def join_multi_single_join_join(self):
            return self.getTypedRuleContext(DiffSqlParser.Join_multi_single_join_joinContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_opt_join_multi_single_join_join

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpt_join_multi_single_join_join" ):
                listener.enterOpt_join_multi_single_join_join(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpt_join_multi_single_join_join" ):
                listener.exitOpt_join_multi_single_join_join(self)




    def opt_join_multi_single_join_join(self):

        localctx = DiffSqlParser.Opt_join_multi_single_join_joinContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_opt_join_multi_single_join_join)
        self._la = 0 # Token type
        try:
            self.state = 1139
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1107
                self.match(DiffSqlParser.T__0)
                self.state = 1108
                self.match(DiffSqlParser.T__1)
                self.state = 1109
                self.opt_join_multi_single_join_join()
                self.state = 1114
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==DiffSqlParser.T__2:
                    self.state = 1110
                    self.match(DiffSqlParser.T__2)
                    self.state = 1111
                    self.opt_join_multi_single_join_join()
                    self.state = 1116
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1121
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.T__3:
                    self.state = 1117
                    self.match(DiffSqlParser.T__3)
                    self.state = 1118
                    self.match(DiffSqlParser.T__4)
                    self.state = 1119
                    self.match(DiffSqlParser.T__5)
                    self.state = 1120
                    self.expr()


                self.state = 1123
                self.match(DiffSqlParser.T__6)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1125
                self.match(DiffSqlParser.T__7)
                self.state = 1126
                self.match(DiffSqlParser.T__1)
                self.state = 1127
                self.opt_join_multi_single_join_join()
                self.state = 1132
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.T__3:
                    self.state = 1128
                    self.match(DiffSqlParser.T__3)
                    self.state = 1129
                    self.match(DiffSqlParser.T__4)
                    self.state = 1130
                    self.match(DiffSqlParser.T__5)
                    self.state = 1131
                    self.expr()


                self.state = 1134
                self.match(DiffSqlParser.T__6)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1137
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.JOIN:
                    self.state = 1136
                    self.join_multi_single_join_join()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Multi_single_join_joinContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def join(self):
            return self.getTypedRuleContext(DiffSqlParser.JoinContext,0)


        def COMMA(self):
            return self.getToken(DiffSqlParser.COMMA, 0)

        def single_single_join(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DiffSqlParser.Single_single_joinContext)
            else:
                return self.getTypedRuleContext(DiffSqlParser.Single_single_joinContext,i)


        def opt_join_multi_single_join_join(self):
            return self.getTypedRuleContext(DiffSqlParser.Opt_join_multi_single_join_joinContext,0)


        def expr(self):
            return self.getTypedRuleContext(DiffSqlParser.ExprContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_multi_single_join_join

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMulti_single_join_join" ):
                listener.enterMulti_single_join_join(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMulti_single_join_join" ):
                listener.exitMulti_single_join_join(self)




    def multi_single_join_join(self):

        localctx = DiffSqlParser.Multi_single_join_joinContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_multi_single_join_join)
        self._la = 0 # Token type
        try:
            self.state = 1173
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DiffSqlParser.T__8]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1141
                self.match(DiffSqlParser.T__8)
                self.state = 1142
                self.match(DiffSqlParser.T__1)
                self.state = 1143
                self.join()
                self.state = 1144
                self.match(DiffSqlParser.COMMA)
                self.state = 1145
                self.single_single_join()
                self.state = 1150
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==DiffSqlParser.T__2:
                    self.state = 1146
                    self.match(DiffSqlParser.T__2)
                    self.state = 1147
                    self.single_single_join()
                    self.state = 1152
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1153
                self.match(DiffSqlParser.T__6)
                self.state = 1154
                self.opt_join_multi_single_join_join()
                pass
            elif token in [DiffSqlParser.T__9]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1156
                self.match(DiffSqlParser.T__9)
                self.state = 1157
                self.match(DiffSqlParser.T__1)
                self.state = 1158
                self.join()
                self.state = 1159
                self.match(DiffSqlParser.COMMA)
                self.state = 1160
                self.single_single_join()
                self.state = 1165
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.T__3:
                    self.state = 1161
                    self.match(DiffSqlParser.T__3)
                    self.state = 1162
                    self.match(DiffSqlParser.T__4)
                    self.state = 1163
                    self.match(DiffSqlParser.T__5)
                    self.state = 1164
                    self.expr()


                self.state = 1167
                self.match(DiffSqlParser.T__6)
                self.state = 1168
                self.opt_join_multi_single_join_join()
                pass
            elif token in [DiffSqlParser.T__0, DiffSqlParser.T__11, DiffSqlParser.NAME]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1170
                self.single_single_join()
                self.state = 1171
                self.opt_join_multi_single_join_join()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JOIN(self):
            return self.getToken(DiffSqlParser.JOIN, 0)

        def multi_single_join_join(self):
            return self.getTypedRuleContext(DiffSqlParser.Multi_single_join_joinContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_join_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_clause" ):
                listener.enterJoin_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_clause" ):
                listener.exitJoin_clause(self)




    def join_clause(self):

        localctx = DiffSqlParser.Join_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_join_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1175
            self.match(DiffSqlParser.JOIN)
            self.state = 1176
            self.multi_single_join_join()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Opt_join_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def opt_join_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DiffSqlParser.Opt_join_clauseContext)
            else:
                return self.getTypedRuleContext(DiffSqlParser.Opt_join_clauseContext,i)


        def expr(self):
            return self.getTypedRuleContext(DiffSqlParser.ExprContext,0)


        def join_clause(self):
            return self.getTypedRuleContext(DiffSqlParser.Join_clauseContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_opt_join_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpt_join_clause" ):
                listener.enterOpt_join_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpt_join_clause" ):
                listener.exitOpt_join_clause(self)




    def opt_join_clause(self):

        localctx = DiffSqlParser.Opt_join_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_opt_join_clause)
        self._la = 0 # Token type
        try:
            self.state = 1210
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1178
                self.match(DiffSqlParser.T__0)
                self.state = 1179
                self.match(DiffSqlParser.T__1)
                self.state = 1180
                self.opt_join_clause()
                self.state = 1185
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==DiffSqlParser.T__2:
                    self.state = 1181
                    self.match(DiffSqlParser.T__2)
                    self.state = 1182
                    self.opt_join_clause()
                    self.state = 1187
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1192
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.T__3:
                    self.state = 1188
                    self.match(DiffSqlParser.T__3)
                    self.state = 1189
                    self.match(DiffSqlParser.T__4)
                    self.state = 1190
                    self.match(DiffSqlParser.T__5)
                    self.state = 1191
                    self.expr()


                self.state = 1194
                self.match(DiffSqlParser.T__6)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1196
                self.match(DiffSqlParser.T__7)
                self.state = 1197
                self.match(DiffSqlParser.T__1)
                self.state = 1198
                self.opt_join_clause()
                self.state = 1203
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.T__3:
                    self.state = 1199
                    self.match(DiffSqlParser.T__3)
                    self.state = 1200
                    self.match(DiffSqlParser.T__4)
                    self.state = 1201
                    self.match(DiffSqlParser.T__5)
                    self.state = 1202
                    self.expr()


                self.state = 1205
                self.match(DiffSqlParser.T__6)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1208
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.JOIN:
                    self.state = 1207
                    self.join_clause()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_sourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def single_single_source(self):
            return self.getTypedRuleContext(DiffSqlParser.Single_single_sourceContext,0)


        def opt_join_clause(self):
            return self.getTypedRuleContext(DiffSqlParser.Opt_join_clauseContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_join_source

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_source" ):
                listener.enterJoin_source(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_source" ):
                listener.exitJoin_source(self)




    def join_source(self):

        localctx = DiffSqlParser.Join_sourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_join_source)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1212
            self.single_single_source()
            self.state = 1213
            self.opt_join_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class From_sourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def from_list(self):
            return self.getTypedRuleContext(DiffSqlParser.From_listContext,0)


        def join_source(self):
            return self.getTypedRuleContext(DiffSqlParser.Join_sourceContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_from_source

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrom_source" ):
                listener.enterFrom_source(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrom_source" ):
                listener.exitFrom_source(self)




    def from_source(self):

        localctx = DiffSqlParser.From_sourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_from_source)
        try:
            self.state = 1217
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1215
                self.from_list()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1216
                self.join_source()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Single_from_sourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def single_from_source(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DiffSqlParser.Single_from_sourceContext)
            else:
                return self.getTypedRuleContext(DiffSqlParser.Single_from_sourceContext,i)


        def expr(self):
            return self.getTypedRuleContext(DiffSqlParser.ExprContext,0)


        def from_source(self):
            return self.getTypedRuleContext(DiffSqlParser.From_sourceContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_single_from_source

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_from_source" ):
                listener.enterSingle_from_source(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_from_source" ):
                listener.exitSingle_from_source(self)




    def single_from_source(self):

        localctx = DiffSqlParser.Single_from_sourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_single_from_source)
        self._la = 0 # Token type
        try:
            self.state = 1238
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1219
                self.match(DiffSqlParser.T__0)
                self.state = 1220
                self.match(DiffSqlParser.T__1)
                self.state = 1221
                self.single_from_source()
                self.state = 1226
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==DiffSqlParser.T__2:
                    self.state = 1222
                    self.match(DiffSqlParser.T__2)
                    self.state = 1223
                    self.single_from_source()
                    self.state = 1228
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1233
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.T__3:
                    self.state = 1229
                    self.match(DiffSqlParser.T__3)
                    self.state = 1230
                    self.match(DiffSqlParser.T__4)
                    self.state = 1231
                    self.match(DiffSqlParser.T__5)
                    self.state = 1232
                    self.expr()


                self.state = 1235
                self.match(DiffSqlParser.T__6)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1237
                self.from_source()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class From_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(DiffSqlParser.FROM, 0)

        def single_from_source(self):
            return self.getTypedRuleContext(DiffSqlParser.Single_from_sourceContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_from_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrom_clause" ):
                listener.enterFrom_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrom_clause" ):
                listener.exitFrom_clause(self)




    def from_clause(self):

        localctx = DiffSqlParser.From_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_from_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1240
            self.match(DiffSqlParser.FROM)
            self.state = 1241
            self.single_from_source()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Single_source_funcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def single_source_func(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DiffSqlParser.Single_source_funcContext)
            else:
                return self.getTypedRuleContext(DiffSqlParser.Single_source_funcContext,i)


        def expr(self):
            return self.getTypedRuleContext(DiffSqlParser.ExprContext,0)


        def source_func(self):
            return self.getTypedRuleContext(DiffSqlParser.Source_funcContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_single_source_func

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_source_func" ):
                listener.enterSingle_source_func(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_source_func" ):
                listener.exitSingle_source_func(self)




    def single_source_func(self):

        localctx = DiffSqlParser.Single_source_funcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_single_source_func)
        self._la = 0 # Token type
        try:
            self.state = 1262
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,128,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1243
                self.match(DiffSqlParser.T__0)
                self.state = 1244
                self.match(DiffSqlParser.T__1)
                self.state = 1245
                self.single_source_func()
                self.state = 1250
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==DiffSqlParser.T__2:
                    self.state = 1246
                    self.match(DiffSqlParser.T__2)
                    self.state = 1247
                    self.single_source_func()
                    self.state = 1252
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1257
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.T__3:
                    self.state = 1253
                    self.match(DiffSqlParser.T__3)
                    self.state = 1254
                    self.match(DiffSqlParser.T__4)
                    self.state = 1255
                    self.match(DiffSqlParser.T__5)
                    self.state = 1256
                    self.expr()


                self.state = 1259
                self.match(DiffSqlParser.T__6)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1261
                self.source_func()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Single_source_tableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def single_source_table(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DiffSqlParser.Single_source_tableContext)
            else:
                return self.getTypedRuleContext(DiffSqlParser.Single_source_tableContext,i)


        def expr(self):
            return self.getTypedRuleContext(DiffSqlParser.ExprContext,0)


        def source_table(self):
            return self.getTypedRuleContext(DiffSqlParser.Source_tableContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_single_source_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_source_table" ):
                listener.enterSingle_source_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_source_table" ):
                listener.exitSingle_source_table(self)




    def single_source_table(self):

        localctx = DiffSqlParser.Single_source_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_single_source_table)
        self._la = 0 # Token type
        try:
            self.state = 1283
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DiffSqlParser.T__0]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1264
                self.match(DiffSqlParser.T__0)
                self.state = 1265
                self.match(DiffSqlParser.T__1)
                self.state = 1266
                self.single_source_table()
                self.state = 1271
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==DiffSqlParser.T__2:
                    self.state = 1267
                    self.match(DiffSqlParser.T__2)
                    self.state = 1268
                    self.single_source_table()
                    self.state = 1273
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1278
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.T__3:
                    self.state = 1274
                    self.match(DiffSqlParser.T__3)
                    self.state = 1275
                    self.match(DiffSqlParser.T__4)
                    self.state = 1276
                    self.match(DiffSqlParser.T__5)
                    self.state = 1277
                    self.expr()


                self.state = 1280
                self.match(DiffSqlParser.T__6)
                pass
            elif token in [DiffSqlParser.NAME]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1282
                self.source_table()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Single_source_subqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def single_source_subq(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DiffSqlParser.Single_source_subqContext)
            else:
                return self.getTypedRuleContext(DiffSqlParser.Single_source_subqContext,i)


        def expr(self):
            return self.getTypedRuleContext(DiffSqlParser.ExprContext,0)


        def source_subq(self):
            return self.getTypedRuleContext(DiffSqlParser.Source_subqContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_single_source_subq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_source_subq" ):
                listener.enterSingle_source_subq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_source_subq" ):
                listener.exitSingle_source_subq(self)




    def single_source_subq(self):

        localctx = DiffSqlParser.Single_source_subqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_single_source_subq)
        self._la = 0 # Token type
        try:
            self.state = 1304
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DiffSqlParser.T__0]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1285
                self.match(DiffSqlParser.T__0)
                self.state = 1286
                self.match(DiffSqlParser.T__1)
                self.state = 1287
                self.single_source_subq()
                self.state = 1292
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==DiffSqlParser.T__2:
                    self.state = 1288
                    self.match(DiffSqlParser.T__2)
                    self.state = 1289
                    self.single_source_subq()
                    self.state = 1294
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1299
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.T__3:
                    self.state = 1295
                    self.match(DiffSqlParser.T__3)
                    self.state = 1296
                    self.match(DiffSqlParser.T__4)
                    self.state = 1297
                    self.match(DiffSqlParser.T__5)
                    self.state = 1298
                    self.expr()


                self.state = 1301
                self.match(DiffSqlParser.T__6)
                pass
            elif token in [DiffSqlParser.T__11]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1303
                self.source_subq()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Single_sourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def single_source_func(self):
            return self.getTypedRuleContext(DiffSqlParser.Single_source_funcContext,0)


        def single_source_table(self):
            return self.getTypedRuleContext(DiffSqlParser.Single_source_tableContext,0)


        def single_source_subq(self):
            return self.getTypedRuleContext(DiffSqlParser.Single_source_subqContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_single_source

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_source" ):
                listener.enterSingle_source(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_source" ):
                listener.exitSingle_source(self)




    def single_source(self):

        localctx = DiffSqlParser.Single_sourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_single_source)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1309
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
            if la_ == 1:
                self.state = 1306
                self.single_source_func()
                pass

            elif la_ == 2:
                self.state = 1307
                self.single_source_table()
                pass

            elif la_ == 3:
                self.state = 1308
                self.single_source_subq()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Source_tableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(DiffSqlParser.NameContext,0)


        def as_name(self):
            return self.getTypedRuleContext(DiffSqlParser.As_nameContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_source_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSource_table" ):
                listener.enterSource_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSource_table" ):
                listener.exitSource_table(self)




    def source_table(self):

        localctx = DiffSqlParser.Source_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_source_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1311
            self.name()
            self.state = 1313
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==DiffSqlParser.AS:
                self.state = 1312
                self.as_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Source_subqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def query(self):
            return self.getTypedRuleContext(DiffSqlParser.QueryContext,0)


        def as_name(self):
            return self.getTypedRuleContext(DiffSqlParser.As_nameContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_source_subq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSource_subq" ):
                listener.enterSource_subq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSource_subq" ):
                listener.exitSource_subq(self)




    def source_subq(self):

        localctx = DiffSqlParser.Source_subqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_source_subq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1315
            self.match(DiffSqlParser.T__11)
            self.state = 1316
            self.query()
            self.state = 1317
            self.match(DiffSqlParser.T__12)
            self.state = 1319
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
            if la_ == 1:
                self.state = 1318
                self.as_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Source_funcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function(self):
            return self.getTypedRuleContext(DiffSqlParser.FunctionContext,0)


        def as_name(self):
            return self.getTypedRuleContext(DiffSqlParser.As_nameContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_source_func

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSource_func" ):
                listener.enterSource_func(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSource_func" ):
                listener.exitSource_func(self)




    def source_func(self):

        localctx = DiffSqlParser.Source_funcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_source_func)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1321
            self.function()
            self.state = 1323
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==DiffSqlParser.AS:
                self.state = 1322
                self.as_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class And_orContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def and_(self):
            return self.getTypedRuleContext(DiffSqlParser.AndContext,0)


        def or_(self):
            return self.getTypedRuleContext(DiffSqlParser.OrContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_and_or

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnd_or" ):
                listener.enterAnd_or(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnd_or" ):
                listener.exitAnd_or(self)




    def and_or(self):

        localctx = DiffSqlParser.And_orContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_and_or)
        try:
            self.state = 1327
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DiffSqlParser.AND]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1325
                self.and_()
                pass
            elif token in [DiffSqlParser.OR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1326
                self.or_()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class And_or_multi_expr_and_orContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def and_or(self):
            return self.getTypedRuleContext(DiffSqlParser.And_orContext,0)


        def multi_expr_and_or(self):
            return self.getTypedRuleContext(DiffSqlParser.Multi_expr_and_orContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_and_or_multi_expr_and_or

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnd_or_multi_expr_and_or" ):
                listener.enterAnd_or_multi_expr_and_or(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnd_or_multi_expr_and_or" ):
                listener.exitAnd_or_multi_expr_and_or(self)




    def and_or_multi_expr_and_or(self):

        localctx = DiffSqlParser.And_or_multi_expr_and_orContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_and_or_multi_expr_and_or)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1329
            self.and_or()
            self.state = 1330
            self.multi_expr_and_or()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Opt_and_or_multi_expr_and_orContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def opt_and_or_multi_expr_and_or(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DiffSqlParser.Opt_and_or_multi_expr_and_orContext)
            else:
                return self.getTypedRuleContext(DiffSqlParser.Opt_and_or_multi_expr_and_orContext,i)


        def expr(self):
            return self.getTypedRuleContext(DiffSqlParser.ExprContext,0)


        def and_or_multi_expr_and_or(self):
            return self.getTypedRuleContext(DiffSqlParser.And_or_multi_expr_and_orContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_opt_and_or_multi_expr_and_or

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpt_and_or_multi_expr_and_or" ):
                listener.enterOpt_and_or_multi_expr_and_or(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpt_and_or_multi_expr_and_or" ):
                listener.exitOpt_and_or_multi_expr_and_or(self)




    def opt_and_or_multi_expr_and_or(self):

        localctx = DiffSqlParser.Opt_and_or_multi_expr_and_orContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_opt_and_or_multi_expr_and_or)
        self._la = 0 # Token type
        try:
            self.state = 1364
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,144,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1332
                self.match(DiffSqlParser.T__0)
                self.state = 1333
                self.match(DiffSqlParser.T__1)
                self.state = 1334
                self.opt_and_or_multi_expr_and_or()
                self.state = 1339
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==DiffSqlParser.T__2:
                    self.state = 1335
                    self.match(DiffSqlParser.T__2)
                    self.state = 1336
                    self.opt_and_or_multi_expr_and_or()
                    self.state = 1341
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1346
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.T__3:
                    self.state = 1342
                    self.match(DiffSqlParser.T__3)
                    self.state = 1343
                    self.match(DiffSqlParser.T__4)
                    self.state = 1344
                    self.match(DiffSqlParser.T__5)
                    self.state = 1345
                    self.expr()


                self.state = 1348
                self.match(DiffSqlParser.T__6)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1350
                self.match(DiffSqlParser.T__7)
                self.state = 1351
                self.match(DiffSqlParser.T__1)
                self.state = 1352
                self.opt_and_or_multi_expr_and_or()
                self.state = 1357
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.T__3:
                    self.state = 1353
                    self.match(DiffSqlParser.T__3)
                    self.state = 1354
                    self.match(DiffSqlParser.T__4)
                    self.state = 1355
                    self.match(DiffSqlParser.T__5)
                    self.state = 1356
                    self.expr()


                self.state = 1359
                self.match(DiffSqlParser.T__6)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1362
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.AND or _la==DiffSqlParser.OR:
                    self.state = 1361
                    self.and_or_multi_expr_and_or()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Multi_expr_and_orContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def and_or(self):
            return self.getTypedRuleContext(DiffSqlParser.And_orContext,0)


        def COMMA(self):
            return self.getToken(DiffSqlParser.COMMA, 0)

        def single_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DiffSqlParser.Single_exprContext)
            else:
                return self.getTypedRuleContext(DiffSqlParser.Single_exprContext,i)


        def opt_and_or_multi_expr_and_or(self):
            return self.getTypedRuleContext(DiffSqlParser.Opt_and_or_multi_expr_and_orContext,0)


        def expr(self):
            return self.getTypedRuleContext(DiffSqlParser.ExprContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_multi_expr_and_or

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMulti_expr_and_or" ):
                listener.enterMulti_expr_and_or(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMulti_expr_and_or" ):
                listener.exitMulti_expr_and_or(self)




    def multi_expr_and_or(self):

        localctx = DiffSqlParser.Multi_expr_and_orContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_multi_expr_and_or)
        self._la = 0 # Token type
        try:
            self.state = 1398
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DiffSqlParser.T__8]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1366
                self.match(DiffSqlParser.T__8)
                self.state = 1367
                self.match(DiffSqlParser.T__1)
                self.state = 1368
                self.and_or()
                self.state = 1369
                self.match(DiffSqlParser.COMMA)
                self.state = 1370
                self.single_expr()
                self.state = 1375
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==DiffSqlParser.T__2:
                    self.state = 1371
                    self.match(DiffSqlParser.T__2)
                    self.state = 1372
                    self.single_expr()
                    self.state = 1377
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1378
                self.match(DiffSqlParser.T__6)
                self.state = 1379
                self.opt_and_or_multi_expr_and_or()
                pass
            elif token in [DiffSqlParser.T__9]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1381
                self.match(DiffSqlParser.T__9)
                self.state = 1382
                self.match(DiffSqlParser.T__1)
                self.state = 1383
                self.and_or()
                self.state = 1384
                self.match(DiffSqlParser.COMMA)
                self.state = 1385
                self.single_expr()
                self.state = 1390
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.T__3:
                    self.state = 1386
                    self.match(DiffSqlParser.T__3)
                    self.state = 1387
                    self.match(DiffSqlParser.T__4)
                    self.state = 1388
                    self.match(DiffSqlParser.T__5)
                    self.state = 1389
                    self.expr()


                self.state = 1392
                self.match(DiffSqlParser.T__6)
                self.state = 1393
                self.opt_and_or_multi_expr_and_or()
                pass
            elif token in [DiffSqlParser.T__0, DiffSqlParser.T__11, DiffSqlParser.T__14, DiffSqlParser.T__15, DiffSqlParser.T__17, DiffSqlParser.T__18, DiffSqlParser.T__21, DiffSqlParser.T__22, DiffSqlParser.NOT, DiffSqlParser.NUMBER, DiffSqlParser.STRING, DiffSqlParser.NAME]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1395
                self.single_expr()
                self.state = 1396
                self.opt_and_or_multi_expr_and_or()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Where_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(DiffSqlParser.WHERE, 0)

        def multi_expr_and_or(self):
            return self.getTypedRuleContext(DiffSqlParser.Multi_expr_and_orContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_where_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhere_clause" ):
                listener.enterWhere_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhere_clause" ):
                listener.exitWhere_clause(self)




    def where_clause(self):

        localctx = DiffSqlParser.Where_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_where_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1400
            self.match(DiffSqlParser.WHERE)
            self.state = 1401
            self.multi_expr_and_or()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Single_group_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def single_group_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DiffSqlParser.Single_group_clauseContext)
            else:
                return self.getTypedRuleContext(DiffSqlParser.Single_group_clauseContext,i)


        def expr(self):
            return self.getTypedRuleContext(DiffSqlParser.ExprContext,0)


        def group_clause(self):
            return self.getTypedRuleContext(DiffSqlParser.Group_clauseContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_single_group_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_group_clause" ):
                listener.enterSingle_group_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_group_clause" ):
                listener.exitSingle_group_clause(self)




    def single_group_clause(self):

        localctx = DiffSqlParser.Single_group_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_single_group_clause)
        self._la = 0 # Token type
        try:
            self.state = 1422
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,150,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1403
                self.match(DiffSqlParser.T__0)
                self.state = 1404
                self.match(DiffSqlParser.T__1)
                self.state = 1405
                self.single_group_clause()
                self.state = 1410
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==DiffSqlParser.T__2:
                    self.state = 1406
                    self.match(DiffSqlParser.T__2)
                    self.state = 1407
                    self.single_group_clause()
                    self.state = 1412
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1417
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.T__3:
                    self.state = 1413
                    self.match(DiffSqlParser.T__3)
                    self.state = 1414
                    self.match(DiffSqlParser.T__4)
                    self.state = 1415
                    self.match(DiffSqlParser.T__5)
                    self.state = 1416
                    self.expr()


                self.state = 1419
                self.match(DiffSqlParser.T__6)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1421
                self.group_clause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Opt_having_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def opt_having_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DiffSqlParser.Opt_having_clauseContext)
            else:
                return self.getTypedRuleContext(DiffSqlParser.Opt_having_clauseContext,i)


        def expr(self):
            return self.getTypedRuleContext(DiffSqlParser.ExprContext,0)


        def having_clause(self):
            return self.getTypedRuleContext(DiffSqlParser.Having_clauseContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_opt_having_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpt_having_clause" ):
                listener.enterOpt_having_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpt_having_clause" ):
                listener.exitOpt_having_clause(self)




    def opt_having_clause(self):

        localctx = DiffSqlParser.Opt_having_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_opt_having_clause)
        self._la = 0 # Token type
        try:
            self.state = 1456
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,155,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1424
                self.match(DiffSqlParser.T__0)
                self.state = 1425
                self.match(DiffSqlParser.T__1)
                self.state = 1426
                self.opt_having_clause()
                self.state = 1431
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==DiffSqlParser.T__2:
                    self.state = 1427
                    self.match(DiffSqlParser.T__2)
                    self.state = 1428
                    self.opt_having_clause()
                    self.state = 1433
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1438
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.T__3:
                    self.state = 1434
                    self.match(DiffSqlParser.T__3)
                    self.state = 1435
                    self.match(DiffSqlParser.T__4)
                    self.state = 1436
                    self.match(DiffSqlParser.T__5)
                    self.state = 1437
                    self.expr()


                self.state = 1440
                self.match(DiffSqlParser.T__6)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1442
                self.match(DiffSqlParser.T__7)
                self.state = 1443
                self.match(DiffSqlParser.T__1)
                self.state = 1444
                self.opt_having_clause()
                self.state = 1449
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.T__3:
                    self.state = 1445
                    self.match(DiffSqlParser.T__3)
                    self.state = 1446
                    self.match(DiffSqlParser.T__4)
                    self.state = 1447
                    self.match(DiffSqlParser.T__5)
                    self.state = 1448
                    self.expr()


                self.state = 1451
                self.match(DiffSqlParser.T__6)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1454
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.HAVING:
                    self.state = 1453
                    self.having_clause()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Gb_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUP(self):
            return self.getToken(DiffSqlParser.GROUP, 0)

        def BY(self):
            return self.getToken(DiffSqlParser.BY, 0)

        def single_group_clause(self):
            return self.getTypedRuleContext(DiffSqlParser.Single_group_clauseContext,0)


        def opt_having_clause(self):
            return self.getTypedRuleContext(DiffSqlParser.Opt_having_clauseContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_gb_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGb_clause" ):
                listener.enterGb_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGb_clause" ):
                listener.exitGb_clause(self)




    def gb_clause(self):

        localctx = DiffSqlParser.Gb_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_gb_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1458
            self.match(DiffSqlParser.GROUP)
            self.state = 1459
            self.match(DiffSqlParser.BY)
            self.state = 1460
            self.single_group_clause()
            self.state = 1461
            self.opt_having_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comma_multi_grouping_term_commaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comma(self):
            return self.getTypedRuleContext(DiffSqlParser.CommaContext,0)


        def multi_grouping_term_comma(self):
            return self.getTypedRuleContext(DiffSqlParser.Multi_grouping_term_commaContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_comma_multi_grouping_term_comma

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComma_multi_grouping_term_comma" ):
                listener.enterComma_multi_grouping_term_comma(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComma_multi_grouping_term_comma" ):
                listener.exitComma_multi_grouping_term_comma(self)




    def comma_multi_grouping_term_comma(self):

        localctx = DiffSqlParser.Comma_multi_grouping_term_commaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_comma_multi_grouping_term_comma)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1463
            self.comma()
            self.state = 1464
            self.multi_grouping_term_comma()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Single_grouping_termContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def single_grouping_term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DiffSqlParser.Single_grouping_termContext)
            else:
                return self.getTypedRuleContext(DiffSqlParser.Single_grouping_termContext,i)


        def expr(self):
            return self.getTypedRuleContext(DiffSqlParser.ExprContext,0)


        def grouping_term(self):
            return self.getTypedRuleContext(DiffSqlParser.Grouping_termContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_single_grouping_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_grouping_term" ):
                listener.enterSingle_grouping_term(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_grouping_term" ):
                listener.exitSingle_grouping_term(self)




    def single_grouping_term(self):

        localctx = DiffSqlParser.Single_grouping_termContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_single_grouping_term)
        self._la = 0 # Token type
        try:
            self.state = 1485
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1466
                self.match(DiffSqlParser.T__0)
                self.state = 1467
                self.match(DiffSqlParser.T__1)
                self.state = 1468
                self.single_grouping_term()
                self.state = 1473
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==DiffSqlParser.T__2:
                    self.state = 1469
                    self.match(DiffSqlParser.T__2)
                    self.state = 1470
                    self.single_grouping_term()
                    self.state = 1475
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1480
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.T__3:
                    self.state = 1476
                    self.match(DiffSqlParser.T__3)
                    self.state = 1477
                    self.match(DiffSqlParser.T__4)
                    self.state = 1478
                    self.match(DiffSqlParser.T__5)
                    self.state = 1479
                    self.expr()


                self.state = 1482
                self.match(DiffSqlParser.T__6)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1484
                self.grouping_term()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Opt_comma_multi_grouping_term_commaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def opt_comma_multi_grouping_term_comma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DiffSqlParser.Opt_comma_multi_grouping_term_commaContext)
            else:
                return self.getTypedRuleContext(DiffSqlParser.Opt_comma_multi_grouping_term_commaContext,i)


        def expr(self):
            return self.getTypedRuleContext(DiffSqlParser.ExprContext,0)


        def comma_multi_grouping_term_comma(self):
            return self.getTypedRuleContext(DiffSqlParser.Comma_multi_grouping_term_commaContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_opt_comma_multi_grouping_term_comma

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpt_comma_multi_grouping_term_comma" ):
                listener.enterOpt_comma_multi_grouping_term_comma(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpt_comma_multi_grouping_term_comma" ):
                listener.exitOpt_comma_multi_grouping_term_comma(self)




    def opt_comma_multi_grouping_term_comma(self):

        localctx = DiffSqlParser.Opt_comma_multi_grouping_term_commaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_opt_comma_multi_grouping_term_comma)
        self._la = 0 # Token type
        try:
            self.state = 1519
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,163,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1487
                self.match(DiffSqlParser.T__0)
                self.state = 1488
                self.match(DiffSqlParser.T__1)
                self.state = 1489
                self.opt_comma_multi_grouping_term_comma()
                self.state = 1494
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==DiffSqlParser.T__2:
                    self.state = 1490
                    self.match(DiffSqlParser.T__2)
                    self.state = 1491
                    self.opt_comma_multi_grouping_term_comma()
                    self.state = 1496
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1501
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.T__3:
                    self.state = 1497
                    self.match(DiffSqlParser.T__3)
                    self.state = 1498
                    self.match(DiffSqlParser.T__4)
                    self.state = 1499
                    self.match(DiffSqlParser.T__5)
                    self.state = 1500
                    self.expr()


                self.state = 1503
                self.match(DiffSqlParser.T__6)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1505
                self.match(DiffSqlParser.T__7)
                self.state = 1506
                self.match(DiffSqlParser.T__1)
                self.state = 1507
                self.opt_comma_multi_grouping_term_comma()
                self.state = 1512
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.T__3:
                    self.state = 1508
                    self.match(DiffSqlParser.T__3)
                    self.state = 1509
                    self.match(DiffSqlParser.T__4)
                    self.state = 1510
                    self.match(DiffSqlParser.T__5)
                    self.state = 1511
                    self.expr()


                self.state = 1514
                self.match(DiffSqlParser.T__6)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1517
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.COMMA:
                    self.state = 1516
                    self.comma_multi_grouping_term_comma()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Multi_grouping_term_commaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comma(self):
            return self.getTypedRuleContext(DiffSqlParser.CommaContext,0)


        def COMMA(self):
            return self.getToken(DiffSqlParser.COMMA, 0)

        def single_grouping_term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DiffSqlParser.Single_grouping_termContext)
            else:
                return self.getTypedRuleContext(DiffSqlParser.Single_grouping_termContext,i)


        def opt_comma_multi_grouping_term_comma(self):
            return self.getTypedRuleContext(DiffSqlParser.Opt_comma_multi_grouping_term_commaContext,0)


        def expr(self):
            return self.getTypedRuleContext(DiffSqlParser.ExprContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_multi_grouping_term_comma

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMulti_grouping_term_comma" ):
                listener.enterMulti_grouping_term_comma(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMulti_grouping_term_comma" ):
                listener.exitMulti_grouping_term_comma(self)




    def multi_grouping_term_comma(self):

        localctx = DiffSqlParser.Multi_grouping_term_commaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_multi_grouping_term_comma)
        self._la = 0 # Token type
        try:
            self.state = 1553
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DiffSqlParser.T__8]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1521
                self.match(DiffSqlParser.T__8)
                self.state = 1522
                self.match(DiffSqlParser.T__1)
                self.state = 1523
                self.comma()
                self.state = 1524
                self.match(DiffSqlParser.COMMA)
                self.state = 1525
                self.single_grouping_term()
                self.state = 1530
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==DiffSqlParser.T__2:
                    self.state = 1526
                    self.match(DiffSqlParser.T__2)
                    self.state = 1527
                    self.single_grouping_term()
                    self.state = 1532
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1533
                self.match(DiffSqlParser.T__6)
                self.state = 1534
                self.opt_comma_multi_grouping_term_comma()
                pass
            elif token in [DiffSqlParser.T__9]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1536
                self.match(DiffSqlParser.T__9)
                self.state = 1537
                self.match(DiffSqlParser.T__1)
                self.state = 1538
                self.comma()
                self.state = 1539
                self.match(DiffSqlParser.COMMA)
                self.state = 1540
                self.single_grouping_term()
                self.state = 1545
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.T__3:
                    self.state = 1541
                    self.match(DiffSqlParser.T__3)
                    self.state = 1542
                    self.match(DiffSqlParser.T__4)
                    self.state = 1543
                    self.match(DiffSqlParser.T__5)
                    self.state = 1544
                    self.expr()


                self.state = 1547
                self.match(DiffSqlParser.T__6)
                self.state = 1548
                self.opt_comma_multi_grouping_term_comma()
                pass
            elif token in [DiffSqlParser.T__0, DiffSqlParser.T__11, DiffSqlParser.T__14, DiffSqlParser.T__15, DiffSqlParser.T__17, DiffSqlParser.T__18, DiffSqlParser.T__21, DiffSqlParser.T__22, DiffSqlParser.NOT, DiffSqlParser.NUMBER, DiffSqlParser.STRING, DiffSqlParser.NAME]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1550
                self.single_grouping_term()
                self.state = 1551
                self.opt_comma_multi_grouping_term_comma()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multi_grouping_term_comma(self):
            return self.getTypedRuleContext(DiffSqlParser.Multi_grouping_term_commaContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_group_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_clause" ):
                listener.enterGroup_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_clause" ):
                listener.exitGroup_clause(self)




    def group_clause(self):

        localctx = DiffSqlParser.Group_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_group_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1555
            self.multi_grouping_term_comma()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Grouping_termContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def single_expr(self):
            return self.getTypedRuleContext(DiffSqlParser.Single_exprContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_grouping_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrouping_term" ):
                listener.enterGrouping_term(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrouping_term" ):
                listener.exitGrouping_term(self)




    def grouping_term(self):

        localctx = DiffSqlParser.Grouping_termContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_grouping_term)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1557
            self.single_expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class And_multi_expr_andContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def and_(self):
            return self.getTypedRuleContext(DiffSqlParser.AndContext,0)


        def multi_expr_and(self):
            return self.getTypedRuleContext(DiffSqlParser.Multi_expr_andContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_and_multi_expr_and

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnd_multi_expr_and" ):
                listener.enterAnd_multi_expr_and(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnd_multi_expr_and" ):
                listener.exitAnd_multi_expr_and(self)




    def and_multi_expr_and(self):

        localctx = DiffSqlParser.And_multi_expr_andContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_and_multi_expr_and)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1559
            self.and_()
            self.state = 1560
            self.multi_expr_and()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Opt_and_multi_expr_andContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def opt_and_multi_expr_and(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DiffSqlParser.Opt_and_multi_expr_andContext)
            else:
                return self.getTypedRuleContext(DiffSqlParser.Opt_and_multi_expr_andContext,i)


        def expr(self):
            return self.getTypedRuleContext(DiffSqlParser.ExprContext,0)


        def and_multi_expr_and(self):
            return self.getTypedRuleContext(DiffSqlParser.And_multi_expr_andContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_opt_and_multi_expr_and

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpt_and_multi_expr_and" ):
                listener.enterOpt_and_multi_expr_and(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpt_and_multi_expr_and" ):
                listener.exitOpt_and_multi_expr_and(self)




    def opt_and_multi_expr_and(self):

        localctx = DiffSqlParser.Opt_and_multi_expr_andContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_opt_and_multi_expr_and)
        self._la = 0 # Token type
        try:
            self.state = 1594
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,171,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1562
                self.match(DiffSqlParser.T__0)
                self.state = 1563
                self.match(DiffSqlParser.T__1)
                self.state = 1564
                self.opt_and_multi_expr_and()
                self.state = 1569
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==DiffSqlParser.T__2:
                    self.state = 1565
                    self.match(DiffSqlParser.T__2)
                    self.state = 1566
                    self.opt_and_multi_expr_and()
                    self.state = 1571
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1576
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.T__3:
                    self.state = 1572
                    self.match(DiffSqlParser.T__3)
                    self.state = 1573
                    self.match(DiffSqlParser.T__4)
                    self.state = 1574
                    self.match(DiffSqlParser.T__5)
                    self.state = 1575
                    self.expr()


                self.state = 1578
                self.match(DiffSqlParser.T__6)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1580
                self.match(DiffSqlParser.T__7)
                self.state = 1581
                self.match(DiffSqlParser.T__1)
                self.state = 1582
                self.opt_and_multi_expr_and()
                self.state = 1587
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.T__3:
                    self.state = 1583
                    self.match(DiffSqlParser.T__3)
                    self.state = 1584
                    self.match(DiffSqlParser.T__4)
                    self.state = 1585
                    self.match(DiffSqlParser.T__5)
                    self.state = 1586
                    self.expr()


                self.state = 1589
                self.match(DiffSqlParser.T__6)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1592
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.AND:
                    self.state = 1591
                    self.and_multi_expr_and()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Multi_expr_andContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def and_(self):
            return self.getTypedRuleContext(DiffSqlParser.AndContext,0)


        def COMMA(self):
            return self.getToken(DiffSqlParser.COMMA, 0)

        def single_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DiffSqlParser.Single_exprContext)
            else:
                return self.getTypedRuleContext(DiffSqlParser.Single_exprContext,i)


        def opt_and_multi_expr_and(self):
            return self.getTypedRuleContext(DiffSqlParser.Opt_and_multi_expr_andContext,0)


        def expr(self):
            return self.getTypedRuleContext(DiffSqlParser.ExprContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_multi_expr_and

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMulti_expr_and" ):
                listener.enterMulti_expr_and(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMulti_expr_and" ):
                listener.exitMulti_expr_and(self)




    def multi_expr_and(self):

        localctx = DiffSqlParser.Multi_expr_andContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_multi_expr_and)
        self._la = 0 # Token type
        try:
            self.state = 1628
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DiffSqlParser.T__8]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1596
                self.match(DiffSqlParser.T__8)
                self.state = 1597
                self.match(DiffSqlParser.T__1)
                self.state = 1598
                self.and_()
                self.state = 1599
                self.match(DiffSqlParser.COMMA)
                self.state = 1600
                self.single_expr()
                self.state = 1605
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==DiffSqlParser.T__2:
                    self.state = 1601
                    self.match(DiffSqlParser.T__2)
                    self.state = 1602
                    self.single_expr()
                    self.state = 1607
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1608
                self.match(DiffSqlParser.T__6)
                self.state = 1609
                self.opt_and_multi_expr_and()
                pass
            elif token in [DiffSqlParser.T__9]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1611
                self.match(DiffSqlParser.T__9)
                self.state = 1612
                self.match(DiffSqlParser.T__1)
                self.state = 1613
                self.and_()
                self.state = 1614
                self.match(DiffSqlParser.COMMA)
                self.state = 1615
                self.single_expr()
                self.state = 1620
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.T__3:
                    self.state = 1616
                    self.match(DiffSqlParser.T__3)
                    self.state = 1617
                    self.match(DiffSqlParser.T__4)
                    self.state = 1618
                    self.match(DiffSqlParser.T__5)
                    self.state = 1619
                    self.expr()


                self.state = 1622
                self.match(DiffSqlParser.T__6)
                self.state = 1623
                self.opt_and_multi_expr_and()
                pass
            elif token in [DiffSqlParser.T__0, DiffSqlParser.T__11, DiffSqlParser.T__14, DiffSqlParser.T__15, DiffSqlParser.T__17, DiffSqlParser.T__18, DiffSqlParser.T__21, DiffSqlParser.T__22, DiffSqlParser.NOT, DiffSqlParser.NUMBER, DiffSqlParser.STRING, DiffSqlParser.NAME]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1625
                self.single_expr()
                self.state = 1626
                self.opt_and_multi_expr_and()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Having_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HAVING(self):
            return self.getToken(DiffSqlParser.HAVING, 0)

        def multi_expr_and(self):
            return self.getTypedRuleContext(DiffSqlParser.Multi_expr_andContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_having_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHaving_clause" ):
                listener.enterHaving_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHaving_clause" ):
                listener.exitHaving_clause(self)




    def having_clause(self):

        localctx = DiffSqlParser.Having_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_having_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1630
            self.match(DiffSqlParser.HAVING)
            self.state = 1631
            self.multi_expr_and()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comma_multi_ordering_term_commaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comma(self):
            return self.getTypedRuleContext(DiffSqlParser.CommaContext,0)


        def multi_ordering_term_comma(self):
            return self.getTypedRuleContext(DiffSqlParser.Multi_ordering_term_commaContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_comma_multi_ordering_term_comma

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComma_multi_ordering_term_comma" ):
                listener.enterComma_multi_ordering_term_comma(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComma_multi_ordering_term_comma" ):
                listener.exitComma_multi_ordering_term_comma(self)




    def comma_multi_ordering_term_comma(self):

        localctx = DiffSqlParser.Comma_multi_ordering_term_commaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_comma_multi_ordering_term_comma)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1633
            self.comma()
            self.state = 1634
            self.multi_ordering_term_comma()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Single_ordering_termContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def single_ordering_term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DiffSqlParser.Single_ordering_termContext)
            else:
                return self.getTypedRuleContext(DiffSqlParser.Single_ordering_termContext,i)


        def expr(self):
            return self.getTypedRuleContext(DiffSqlParser.ExprContext,0)


        def ordering_term(self):
            return self.getTypedRuleContext(DiffSqlParser.Ordering_termContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_single_ordering_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_ordering_term" ):
                listener.enterSingle_ordering_term(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_ordering_term" ):
                listener.exitSingle_ordering_term(self)




    def single_ordering_term(self):

        localctx = DiffSqlParser.Single_ordering_termContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_single_ordering_term)
        self._la = 0 # Token type
        try:
            self.state = 1655
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,177,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1636
                self.match(DiffSqlParser.T__0)
                self.state = 1637
                self.match(DiffSqlParser.T__1)
                self.state = 1638
                self.single_ordering_term()
                self.state = 1643
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==DiffSqlParser.T__2:
                    self.state = 1639
                    self.match(DiffSqlParser.T__2)
                    self.state = 1640
                    self.single_ordering_term()
                    self.state = 1645
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1650
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.T__3:
                    self.state = 1646
                    self.match(DiffSqlParser.T__3)
                    self.state = 1647
                    self.match(DiffSqlParser.T__4)
                    self.state = 1648
                    self.match(DiffSqlParser.T__5)
                    self.state = 1649
                    self.expr()


                self.state = 1652
                self.match(DiffSqlParser.T__6)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1654
                self.ordering_term()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Opt_comma_multi_ordering_term_commaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def opt_comma_multi_ordering_term_comma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DiffSqlParser.Opt_comma_multi_ordering_term_commaContext)
            else:
                return self.getTypedRuleContext(DiffSqlParser.Opt_comma_multi_ordering_term_commaContext,i)


        def expr(self):
            return self.getTypedRuleContext(DiffSqlParser.ExprContext,0)


        def comma_multi_ordering_term_comma(self):
            return self.getTypedRuleContext(DiffSqlParser.Comma_multi_ordering_term_commaContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_opt_comma_multi_ordering_term_comma

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpt_comma_multi_ordering_term_comma" ):
                listener.enterOpt_comma_multi_ordering_term_comma(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpt_comma_multi_ordering_term_comma" ):
                listener.exitOpt_comma_multi_ordering_term_comma(self)




    def opt_comma_multi_ordering_term_comma(self):

        localctx = DiffSqlParser.Opt_comma_multi_ordering_term_commaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_opt_comma_multi_ordering_term_comma)
        self._la = 0 # Token type
        try:
            self.state = 1689
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,182,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1657
                self.match(DiffSqlParser.T__0)
                self.state = 1658
                self.match(DiffSqlParser.T__1)
                self.state = 1659
                self.opt_comma_multi_ordering_term_comma()
                self.state = 1664
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==DiffSqlParser.T__2:
                    self.state = 1660
                    self.match(DiffSqlParser.T__2)
                    self.state = 1661
                    self.opt_comma_multi_ordering_term_comma()
                    self.state = 1666
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1671
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.T__3:
                    self.state = 1667
                    self.match(DiffSqlParser.T__3)
                    self.state = 1668
                    self.match(DiffSqlParser.T__4)
                    self.state = 1669
                    self.match(DiffSqlParser.T__5)
                    self.state = 1670
                    self.expr()


                self.state = 1673
                self.match(DiffSqlParser.T__6)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1675
                self.match(DiffSqlParser.T__7)
                self.state = 1676
                self.match(DiffSqlParser.T__1)
                self.state = 1677
                self.opt_comma_multi_ordering_term_comma()
                self.state = 1682
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.T__3:
                    self.state = 1678
                    self.match(DiffSqlParser.T__3)
                    self.state = 1679
                    self.match(DiffSqlParser.T__4)
                    self.state = 1680
                    self.match(DiffSqlParser.T__5)
                    self.state = 1681
                    self.expr()


                self.state = 1684
                self.match(DiffSqlParser.T__6)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1687
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.COMMA:
                    self.state = 1686
                    self.comma_multi_ordering_term_comma()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Multi_ordering_term_commaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comma(self):
            return self.getTypedRuleContext(DiffSqlParser.CommaContext,0)


        def COMMA(self):
            return self.getToken(DiffSqlParser.COMMA, 0)

        def single_ordering_term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DiffSqlParser.Single_ordering_termContext)
            else:
                return self.getTypedRuleContext(DiffSqlParser.Single_ordering_termContext,i)


        def opt_comma_multi_ordering_term_comma(self):
            return self.getTypedRuleContext(DiffSqlParser.Opt_comma_multi_ordering_term_commaContext,0)


        def expr(self):
            return self.getTypedRuleContext(DiffSqlParser.ExprContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_multi_ordering_term_comma

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMulti_ordering_term_comma" ):
                listener.enterMulti_ordering_term_comma(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMulti_ordering_term_comma" ):
                listener.exitMulti_ordering_term_comma(self)




    def multi_ordering_term_comma(self):

        localctx = DiffSqlParser.Multi_ordering_term_commaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_multi_ordering_term_comma)
        self._la = 0 # Token type
        try:
            self.state = 1723
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DiffSqlParser.T__8]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1691
                self.match(DiffSqlParser.T__8)
                self.state = 1692
                self.match(DiffSqlParser.T__1)
                self.state = 1693
                self.comma()
                self.state = 1694
                self.match(DiffSqlParser.COMMA)
                self.state = 1695
                self.single_ordering_term()
                self.state = 1700
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==DiffSqlParser.T__2:
                    self.state = 1696
                    self.match(DiffSqlParser.T__2)
                    self.state = 1697
                    self.single_ordering_term()
                    self.state = 1702
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1703
                self.match(DiffSqlParser.T__6)
                self.state = 1704
                self.opt_comma_multi_ordering_term_comma()
                pass
            elif token in [DiffSqlParser.T__9]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1706
                self.match(DiffSqlParser.T__9)
                self.state = 1707
                self.match(DiffSqlParser.T__1)
                self.state = 1708
                self.comma()
                self.state = 1709
                self.match(DiffSqlParser.COMMA)
                self.state = 1710
                self.single_ordering_term()
                self.state = 1715
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.T__3:
                    self.state = 1711
                    self.match(DiffSqlParser.T__3)
                    self.state = 1712
                    self.match(DiffSqlParser.T__4)
                    self.state = 1713
                    self.match(DiffSqlParser.T__5)
                    self.state = 1714
                    self.expr()


                self.state = 1717
                self.match(DiffSqlParser.T__6)
                self.state = 1718
                self.opt_comma_multi_ordering_term_comma()
                pass
            elif token in [DiffSqlParser.T__0, DiffSqlParser.T__11, DiffSqlParser.T__14, DiffSqlParser.T__15, DiffSqlParser.T__17, DiffSqlParser.T__18, DiffSqlParser.T__21, DiffSqlParser.T__22, DiffSqlParser.NOT, DiffSqlParser.NUMBER, DiffSqlParser.STRING, DiffSqlParser.NAME]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1720
                self.single_ordering_term()
                self.state = 1721
                self.opt_comma_multi_ordering_term_comma()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderbyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(DiffSqlParser.ORDER, 0)

        def BY(self):
            return self.getToken(DiffSqlParser.BY, 0)

        def multi_ordering_term_comma(self):
            return self.getTypedRuleContext(DiffSqlParser.Multi_ordering_term_commaContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_orderby

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderby" ):
                listener.enterOrderby(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderby" ):
                listener.exitOrderby(self)




    def orderby(self):

        localctx = DiffSqlParser.OrderbyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_orderby)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1725
            self.match(DiffSqlParser.ORDER)
            self.state = 1726
            self.match(DiffSqlParser.BY)
            self.state = 1727
            self.multi_ordering_term_comma()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Asc_descContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASC(self):
            return self.getToken(DiffSqlParser.ASC, 0)

        def DESC(self):
            return self.getToken(DiffSqlParser.DESC, 0)

        def getRuleIndex(self):
            return DiffSqlParser.RULE_asc_desc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsc_desc" ):
                listener.enterAsc_desc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsc_desc" ):
                listener.exitAsc_desc(self)




    def asc_desc(self):

        localctx = DiffSqlParser.Asc_descContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_asc_desc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1729
            _la = self._input.LA(1)
            if not(_la==DiffSqlParser.ASC or _la==DiffSqlParser.DESC):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Opt_asc_descContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def opt_asc_desc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DiffSqlParser.Opt_asc_descContext)
            else:
                return self.getTypedRuleContext(DiffSqlParser.Opt_asc_descContext,i)


        def expr(self):
            return self.getTypedRuleContext(DiffSqlParser.ExprContext,0)


        def asc_desc(self):
            return self.getTypedRuleContext(DiffSqlParser.Asc_descContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_opt_asc_desc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpt_asc_desc" ):
                listener.enterOpt_asc_desc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpt_asc_desc" ):
                listener.exitOpt_asc_desc(self)




    def opt_asc_desc(self):

        localctx = DiffSqlParser.Opt_asc_descContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_opt_asc_desc)
        self._la = 0 # Token type
        try:
            self.state = 1763
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,190,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1731
                self.match(DiffSqlParser.T__0)
                self.state = 1732
                self.match(DiffSqlParser.T__1)
                self.state = 1733
                self.opt_asc_desc()
                self.state = 1738
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==DiffSqlParser.T__2:
                    self.state = 1734
                    self.match(DiffSqlParser.T__2)
                    self.state = 1735
                    self.opt_asc_desc()
                    self.state = 1740
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1745
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.T__3:
                    self.state = 1741
                    self.match(DiffSqlParser.T__3)
                    self.state = 1742
                    self.match(DiffSqlParser.T__4)
                    self.state = 1743
                    self.match(DiffSqlParser.T__5)
                    self.state = 1744
                    self.expr()


                self.state = 1747
                self.match(DiffSqlParser.T__6)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1749
                self.match(DiffSqlParser.T__7)
                self.state = 1750
                self.match(DiffSqlParser.T__1)
                self.state = 1751
                self.opt_asc_desc()
                self.state = 1756
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.T__3:
                    self.state = 1752
                    self.match(DiffSqlParser.T__3)
                    self.state = 1753
                    self.match(DiffSqlParser.T__4)
                    self.state = 1754
                    self.match(DiffSqlParser.T__5)
                    self.state = 1755
                    self.expr()


                self.state = 1758
                self.match(DiffSqlParser.T__6)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1761
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.ASC or _la==DiffSqlParser.DESC:
                    self.state = 1760
                    self.asc_desc()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ordering_termContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def single_expr(self):
            return self.getTypedRuleContext(DiffSqlParser.Single_exprContext,0)


        def opt_asc_desc(self):
            return self.getTypedRuleContext(DiffSqlParser.Opt_asc_descContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_ordering_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrdering_term" ):
                listener.enterOrdering_term(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrdering_term" ):
                listener.exitOrdering_term(self)




    def ordering_term(self):

        localctx = DiffSqlParser.Ordering_termContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_ordering_term)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1765
            self.single_expr()
            self.state = 1766
            self.opt_asc_desc()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LimitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT(self):
            return self.getToken(DiffSqlParser.LIMIT, 0)

        def single_expr(self):
            return self.getTypedRuleContext(DiffSqlParser.Single_exprContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_limit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimit" ):
                listener.enterLimit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimit" ):
                listener.exitLimit(self)




    def limit(self):

        localctx = DiffSqlParser.LimitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_limit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1768
            self.match(DiffSqlParser.LIMIT)
            self.state = 1769
            self.single_expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_dotContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(DiffSqlParser.NameContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_table_dot

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_dot" ):
                listener.enterTable_dot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_dot" ):
                listener.exitTable_dot(self)




    def table_dot(self):

        localctx = DiffSqlParser.Table_dotContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_table_dot)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1771
            self.name()
            self.state = 1772
            self.match(DiffSqlParser.T__13)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Col_refContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(DiffSqlParser.NameContext,0)


        def table_dot(self):
            return self.getTypedRuleContext(DiffSqlParser.Table_dotContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_col_ref

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCol_ref" ):
                listener.enterCol_ref(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCol_ref" ):
                listener.exitCol_ref(self)




    def col_ref(self):

        localctx = DiffSqlParser.Col_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_col_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1775
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,191,self._ctx)
            if la_ == 1:
                self.state = 1774
                self.table_dot()


            self.state = 1777
            self.name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Single_btwnexprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def single_btwnexpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DiffSqlParser.Single_btwnexprContext)
            else:
                return self.getTypedRuleContext(DiffSqlParser.Single_btwnexprContext,i)


        def expr(self):
            return self.getTypedRuleContext(DiffSqlParser.ExprContext,0)


        def btwnexpr(self):
            return self.getTypedRuleContext(DiffSqlParser.BtwnexprContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_single_btwnexpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_btwnexpr" ):
                listener.enterSingle_btwnexpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_btwnexpr" ):
                listener.exitSingle_btwnexpr(self)




    def single_btwnexpr(self):

        localctx = DiffSqlParser.Single_btwnexprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_single_btwnexpr)
        self._la = 0 # Token type
        try:
            self.state = 1798
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,194,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1779
                self.match(DiffSqlParser.T__0)
                self.state = 1780
                self.match(DiffSqlParser.T__1)
                self.state = 1781
                self.single_btwnexpr()
                self.state = 1786
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==DiffSqlParser.T__2:
                    self.state = 1782
                    self.match(DiffSqlParser.T__2)
                    self.state = 1783
                    self.single_btwnexpr()
                    self.state = 1788
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1793
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.T__3:
                    self.state = 1789
                    self.match(DiffSqlParser.T__3)
                    self.state = 1790
                    self.match(DiffSqlParser.T__4)
                    self.state = 1791
                    self.match(DiffSqlParser.T__5)
                    self.state = 1792
                    self.expr()


                self.state = 1795
                self.match(DiffSqlParser.T__6)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1797
                self.btwnexpr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Single_biexprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def single_biexpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DiffSqlParser.Single_biexprContext)
            else:
                return self.getTypedRuleContext(DiffSqlParser.Single_biexprContext,i)


        def expr(self):
            return self.getTypedRuleContext(DiffSqlParser.ExprContext,0)


        def biexpr(self):
            return self.getTypedRuleContext(DiffSqlParser.BiexprContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_single_biexpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_biexpr" ):
                listener.enterSingle_biexpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_biexpr" ):
                listener.exitSingle_biexpr(self)




    def single_biexpr(self):

        localctx = DiffSqlParser.Single_biexprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_single_biexpr)
        self._la = 0 # Token type
        try:
            self.state = 1819
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,197,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1800
                self.match(DiffSqlParser.T__0)
                self.state = 1801
                self.match(DiffSqlParser.T__1)
                self.state = 1802
                self.single_biexpr()
                self.state = 1807
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==DiffSqlParser.T__2:
                    self.state = 1803
                    self.match(DiffSqlParser.T__2)
                    self.state = 1804
                    self.single_biexpr()
                    self.state = 1809
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1814
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.T__3:
                    self.state = 1810
                    self.match(DiffSqlParser.T__3)
                    self.state = 1811
                    self.match(DiffSqlParser.T__4)
                    self.state = 1812
                    self.match(DiffSqlParser.T__5)
                    self.state = 1813
                    self.expr()


                self.state = 1816
                self.match(DiffSqlParser.T__6)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1818
                self.biexpr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Single_unexprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def single_unexpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DiffSqlParser.Single_unexprContext)
            else:
                return self.getTypedRuleContext(DiffSqlParser.Single_unexprContext,i)


        def expr(self):
            return self.getTypedRuleContext(DiffSqlParser.ExprContext,0)


        def unexpr(self):
            return self.getTypedRuleContext(DiffSqlParser.UnexprContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_single_unexpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_unexpr" ):
                listener.enterSingle_unexpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_unexpr" ):
                listener.exitSingle_unexpr(self)




    def single_unexpr(self):

        localctx = DiffSqlParser.Single_unexprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_single_unexpr)
        self._la = 0 # Token type
        try:
            self.state = 1840
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,200,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1821
                self.match(DiffSqlParser.T__0)
                self.state = 1822
                self.match(DiffSqlParser.T__1)
                self.state = 1823
                self.single_unexpr()
                self.state = 1828
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==DiffSqlParser.T__2:
                    self.state = 1824
                    self.match(DiffSqlParser.T__2)
                    self.state = 1825
                    self.single_unexpr()
                    self.state = 1830
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1835
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.T__3:
                    self.state = 1831
                    self.match(DiffSqlParser.T__3)
                    self.state = 1832
                    self.match(DiffSqlParser.T__4)
                    self.state = 1833
                    self.match(DiffSqlParser.T__5)
                    self.state = 1834
                    self.expr()


                self.state = 1837
                self.match(DiffSqlParser.T__6)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1839
                self.unexpr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Single_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def single_value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DiffSqlParser.Single_valueContext)
            else:
                return self.getTypedRuleContext(DiffSqlParser.Single_valueContext,i)


        def expr(self):
            return self.getTypedRuleContext(DiffSqlParser.ExprContext,0)


        def value(self):
            return self.getTypedRuleContext(DiffSqlParser.ValueContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_single_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_value" ):
                listener.enterSingle_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_value" ):
                listener.exitSingle_value(self)




    def single_value(self):

        localctx = DiffSqlParser.Single_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_single_value)
        self._la = 0 # Token type
        try:
            self.state = 1861
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,203,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1842
                self.match(DiffSqlParser.T__0)
                self.state = 1843
                self.match(DiffSqlParser.T__1)
                self.state = 1844
                self.single_value()
                self.state = 1849
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==DiffSqlParser.T__2:
                    self.state = 1845
                    self.match(DiffSqlParser.T__2)
                    self.state = 1846
                    self.single_value()
                    self.state = 1851
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1856
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.T__3:
                    self.state = 1852
                    self.match(DiffSqlParser.T__3)
                    self.state = 1853
                    self.match(DiffSqlParser.T__4)
                    self.state = 1854
                    self.match(DiffSqlParser.T__5)
                    self.state = 1855
                    self.expr()


                self.state = 1858
                self.match(DiffSqlParser.T__6)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1860
                self.value()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def single_btwnexpr(self):
            return self.getTypedRuleContext(DiffSqlParser.Single_btwnexprContext,0)


        def single_biexpr(self):
            return self.getTypedRuleContext(DiffSqlParser.Single_biexprContext,0)


        def single_unexpr(self):
            return self.getTypedRuleContext(DiffSqlParser.Single_unexprContext,0)


        def single_value(self):
            return self.getTypedRuleContext(DiffSqlParser.Single_valueContext,0)


        def single_source_subq(self):
            return self.getTypedRuleContext(DiffSqlParser.Single_source_subqContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)




    def expr(self):

        localctx = DiffSqlParser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_expr)
        try:
            self.state = 1868
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,204,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1863
                self.single_btwnexpr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1864
                self.single_biexpr()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1865
                self.single_unexpr()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1866
                self.single_value()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1867
                self.single_source_subq()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BtwnexprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def single_value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DiffSqlParser.Single_valueContext)
            else:
                return self.getTypedRuleContext(DiffSqlParser.Single_valueContext,i)


        def BETWEEN(self):
            return self.getToken(DiffSqlParser.BETWEEN, 0)

        def AND(self):
            return self.getToken(DiffSqlParser.AND, 0)

        def getRuleIndex(self):
            return DiffSqlParser.RULE_btwnexpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBtwnexpr" ):
                listener.enterBtwnexpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBtwnexpr" ):
                listener.exitBtwnexpr(self)




    def btwnexpr(self):

        localctx = DiffSqlParser.BtwnexprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_btwnexpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1870
            self.single_value()
            self.state = 1871
            self.match(DiffSqlParser.BETWEEN)
            self.state = 1872
            self.single_value()
            self.state = 1873
            self.match(DiffSqlParser.AND)
            self.state = 1874
            self.single_value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Single_binaryop_no_andorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def single_binaryop_no_andor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DiffSqlParser.Single_binaryop_no_andorContext)
            else:
                return self.getTypedRuleContext(DiffSqlParser.Single_binaryop_no_andorContext,i)


        def expr(self):
            return self.getTypedRuleContext(DiffSqlParser.ExprContext,0)


        def binaryop_no_andor(self):
            return self.getTypedRuleContext(DiffSqlParser.Binaryop_no_andorContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_single_binaryop_no_andor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_binaryop_no_andor" ):
                listener.enterSingle_binaryop_no_andor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_binaryop_no_andor" ):
                listener.exitSingle_binaryop_no_andor(self)




    def single_binaryop_no_andor(self):

        localctx = DiffSqlParser.Single_binaryop_no_andorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_single_binaryop_no_andor)
        self._la = 0 # Token type
        try:
            self.state = 1895
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DiffSqlParser.T__0]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1876
                self.match(DiffSqlParser.T__0)
                self.state = 1877
                self.match(DiffSqlParser.T__1)
                self.state = 1878
                self.single_binaryop_no_andor()
                self.state = 1883
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==DiffSqlParser.T__2:
                    self.state = 1879
                    self.match(DiffSqlParser.T__2)
                    self.state = 1880
                    self.single_binaryop_no_andor()
                    self.state = 1885
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1890
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.T__3:
                    self.state = 1886
                    self.match(DiffSqlParser.T__3)
                    self.state = 1887
                    self.match(DiffSqlParser.T__4)
                    self.state = 1888
                    self.match(DiffSqlParser.T__5)
                    self.state = 1889
                    self.expr()


                self.state = 1892
                self.match(DiffSqlParser.T__6)
                pass
            elif token in [DiffSqlParser.T__5, DiffSqlParser.T__21, DiffSqlParser.T__22, DiffSqlParser.T__23, DiffSqlParser.T__24, DiffSqlParser.T__25, DiffSqlParser.T__26, DiffSqlParser.T__27, DiffSqlParser.T__28, DiffSqlParser.T__29, DiffSqlParser.T__30, DiffSqlParser.STAR, DiffSqlParser.IN, DiffSqlParser.LIKE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1894
                self.binaryop_no_andor()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BiexprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def single_value(self):
            return self.getTypedRuleContext(DiffSqlParser.Single_valueContext,0)


        def single_binaryop_no_andor(self):
            return self.getTypedRuleContext(DiffSqlParser.Single_binaryop_no_andorContext,0)


        def single_expr(self):
            return self.getTypedRuleContext(DiffSqlParser.Single_exprContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_biexpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBiexpr" ):
                listener.enterBiexpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBiexpr" ):
                listener.exitBiexpr(self)




    def biexpr(self):

        localctx = DiffSqlParser.BiexprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_biexpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1897
            self.single_value()
            self.state = 1898
            self.single_binaryop_no_andor()
            self.state = 1899
            self.single_expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Single_unaryopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def single_unaryop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DiffSqlParser.Single_unaryopContext)
            else:
                return self.getTypedRuleContext(DiffSqlParser.Single_unaryopContext,i)


        def expr(self):
            return self.getTypedRuleContext(DiffSqlParser.ExprContext,0)


        def unaryop(self):
            return self.getTypedRuleContext(DiffSqlParser.UnaryopContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_single_unaryop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_unaryop" ):
                listener.enterSingle_unaryop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_unaryop" ):
                listener.exitSingle_unaryop(self)




    def single_unaryop(self):

        localctx = DiffSqlParser.Single_unaryopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_single_unaryop)
        self._la = 0 # Token type
        try:
            self.state = 1920
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DiffSqlParser.T__0]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1901
                self.match(DiffSqlParser.T__0)
                self.state = 1902
                self.match(DiffSqlParser.T__1)
                self.state = 1903
                self.single_unaryop()
                self.state = 1908
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==DiffSqlParser.T__2:
                    self.state = 1904
                    self.match(DiffSqlParser.T__2)
                    self.state = 1905
                    self.single_unaryop()
                    self.state = 1910
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1915
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.T__3:
                    self.state = 1911
                    self.match(DiffSqlParser.T__3)
                    self.state = 1912
                    self.match(DiffSqlParser.T__4)
                    self.state = 1913
                    self.match(DiffSqlParser.T__5)
                    self.state = 1914
                    self.expr()


                self.state = 1917
                self.match(DiffSqlParser.T__6)
                pass
            elif token in [DiffSqlParser.T__21, DiffSqlParser.T__22, DiffSqlParser.NOT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1919
                self.unaryop()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnexprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def single_unaryop(self):
            return self.getTypedRuleContext(DiffSqlParser.Single_unaryopContext,0)


        def single_expr(self):
            return self.getTypedRuleContext(DiffSqlParser.Single_exprContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_unexpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnexpr" ):
                listener.enterUnexpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnexpr" ):
                listener.exitUnexpr(self)




    def unexpr(self):

        localctx = DiffSqlParser.UnexprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_unexpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1922
            self.single_unaryop()
            self.state = 1923
            self.single_expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Single_parenvalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def single_parenval(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DiffSqlParser.Single_parenvalContext)
            else:
                return self.getTypedRuleContext(DiffSqlParser.Single_parenvalContext,i)


        def expr(self):
            return self.getTypedRuleContext(DiffSqlParser.ExprContext,0)


        def parenval(self):
            return self.getTypedRuleContext(DiffSqlParser.ParenvalContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_single_parenval

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_parenval" ):
                listener.enterSingle_parenval(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_parenval" ):
                listener.exitSingle_parenval(self)




    def single_parenval(self):

        localctx = DiffSqlParser.Single_parenvalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_single_parenval)
        self._la = 0 # Token type
        try:
            self.state = 1944
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DiffSqlParser.T__0]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1925
                self.match(DiffSqlParser.T__0)
                self.state = 1926
                self.match(DiffSqlParser.T__1)
                self.state = 1927
                self.single_parenval()
                self.state = 1932
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==DiffSqlParser.T__2:
                    self.state = 1928
                    self.match(DiffSqlParser.T__2)
                    self.state = 1929
                    self.single_parenval()
                    self.state = 1934
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1939
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.T__3:
                    self.state = 1935
                    self.match(DiffSqlParser.T__3)
                    self.state = 1936
                    self.match(DiffSqlParser.T__4)
                    self.state = 1937
                    self.match(DiffSqlParser.T__5)
                    self.state = 1938
                    self.expr()


                self.state = 1941
                self.match(DiffSqlParser.T__6)
                pass
            elif token in [DiffSqlParser.T__11]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1943
                self.parenval()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Single_booleanContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def single_boolean(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DiffSqlParser.Single_booleanContext)
            else:
                return self.getTypedRuleContext(DiffSqlParser.Single_booleanContext,i)


        def expr(self):
            return self.getTypedRuleContext(DiffSqlParser.ExprContext,0)


        def boolean(self):
            return self.getTypedRuleContext(DiffSqlParser.BooleanContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_single_boolean

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_boolean" ):
                listener.enterSingle_boolean(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_boolean" ):
                listener.exitSingle_boolean(self)




    def single_boolean(self):

        localctx = DiffSqlParser.Single_booleanContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_single_boolean)
        self._la = 0 # Token type
        try:
            self.state = 1965
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DiffSqlParser.T__0]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1946
                self.match(DiffSqlParser.T__0)
                self.state = 1947
                self.match(DiffSqlParser.T__1)
                self.state = 1948
                self.single_boolean()
                self.state = 1953
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==DiffSqlParser.T__2:
                    self.state = 1949
                    self.match(DiffSqlParser.T__2)
                    self.state = 1950
                    self.single_boolean()
                    self.state = 1955
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1960
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.T__3:
                    self.state = 1956
                    self.match(DiffSqlParser.T__3)
                    self.state = 1957
                    self.match(DiffSqlParser.T__4)
                    self.state = 1958
                    self.match(DiffSqlParser.T__5)
                    self.state = 1959
                    self.expr()


                self.state = 1962
                self.match(DiffSqlParser.T__6)
                pass
            elif token in [DiffSqlParser.T__17, DiffSqlParser.T__18]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1964
                self.boolean()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Single_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def single_function(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DiffSqlParser.Single_functionContext)
            else:
                return self.getTypedRuleContext(DiffSqlParser.Single_functionContext,i)


        def expr(self):
            return self.getTypedRuleContext(DiffSqlParser.ExprContext,0)


        def function(self):
            return self.getTypedRuleContext(DiffSqlParser.FunctionContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_single_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_function" ):
                listener.enterSingle_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_function" ):
                listener.exitSingle_function(self)




    def single_function(self):

        localctx = DiffSqlParser.Single_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_single_function)
        self._la = 0 # Token type
        try:
            self.state = 1986
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,219,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1967
                self.match(DiffSqlParser.T__0)
                self.state = 1968
                self.match(DiffSqlParser.T__1)
                self.state = 1969
                self.single_function()
                self.state = 1974
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==DiffSqlParser.T__2:
                    self.state = 1970
                    self.match(DiffSqlParser.T__2)
                    self.state = 1971
                    self.single_function()
                    self.state = 1976
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1981
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.T__3:
                    self.state = 1977
                    self.match(DiffSqlParser.T__3)
                    self.state = 1978
                    self.match(DiffSqlParser.T__4)
                    self.state = 1979
                    self.match(DiffSqlParser.T__5)
                    self.state = 1980
                    self.expr()


                self.state = 1983
                self.match(DiffSqlParser.T__6)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1985
                self.function()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Single_stringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def single_string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DiffSqlParser.Single_stringContext)
            else:
                return self.getTypedRuleContext(DiffSqlParser.Single_stringContext,i)


        def expr(self):
            return self.getTypedRuleContext(DiffSqlParser.ExprContext,0)


        def string(self):
            return self.getTypedRuleContext(DiffSqlParser.StringContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_single_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_string" ):
                listener.enterSingle_string(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_string" ):
                listener.exitSingle_string(self)




    def single_string(self):

        localctx = DiffSqlParser.Single_stringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_single_string)
        self._la = 0 # Token type
        try:
            self.state = 2007
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DiffSqlParser.T__0]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1988
                self.match(DiffSqlParser.T__0)
                self.state = 1989
                self.match(DiffSqlParser.T__1)
                self.state = 1990
                self.single_string()
                self.state = 1995
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==DiffSqlParser.T__2:
                    self.state = 1991
                    self.match(DiffSqlParser.T__2)
                    self.state = 1992
                    self.single_string()
                    self.state = 1997
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2002
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.T__3:
                    self.state = 1998
                    self.match(DiffSqlParser.T__3)
                    self.state = 1999
                    self.match(DiffSqlParser.T__4)
                    self.state = 2000
                    self.match(DiffSqlParser.T__5)
                    self.state = 2001
                    self.expr()


                self.state = 2004
                self.match(DiffSqlParser.T__6)
                pass
            elif token in [DiffSqlParser.STRING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2006
                self.string()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Single_domainContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def single_domain(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DiffSqlParser.Single_domainContext)
            else:
                return self.getTypedRuleContext(DiffSqlParser.Single_domainContext,i)


        def expr(self):
            return self.getTypedRuleContext(DiffSqlParser.ExprContext,0)


        def domain(self):
            return self.getTypedRuleContext(DiffSqlParser.DomainContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_single_domain

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_domain" ):
                listener.enterSingle_domain(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_domain" ):
                listener.exitSingle_domain(self)




    def single_domain(self):

        localctx = DiffSqlParser.Single_domainContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_single_domain)
        self._la = 0 # Token type
        try:
            self.state = 2028
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DiffSqlParser.T__0]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2009
                self.match(DiffSqlParser.T__0)
                self.state = 2010
                self.match(DiffSqlParser.T__1)
                self.state = 2011
                self.single_domain()
                self.state = 2016
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==DiffSqlParser.T__2:
                    self.state = 2012
                    self.match(DiffSqlParser.T__2)
                    self.state = 2013
                    self.single_domain()
                    self.state = 2018
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2023
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.T__3:
                    self.state = 2019
                    self.match(DiffSqlParser.T__3)
                    self.state = 2020
                    self.match(DiffSqlParser.T__4)
                    self.state = 2021
                    self.match(DiffSqlParser.T__5)
                    self.state = 2022
                    self.expr()


                self.state = 2025
                self.match(DiffSqlParser.T__6)
                pass
            elif token in [DiffSqlParser.T__14]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2027
                self.domain()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Single_rangeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def single_range(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DiffSqlParser.Single_rangeContext)
            else:
                return self.getTypedRuleContext(DiffSqlParser.Single_rangeContext,i)


        def expr(self):
            return self.getTypedRuleContext(DiffSqlParser.ExprContext,0)


        def range_(self):
            return self.getTypedRuleContext(DiffSqlParser.RangeContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_single_range

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_range" ):
                listener.enterSingle_range(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_range" ):
                listener.exitSingle_range(self)




    def single_range(self):

        localctx = DiffSqlParser.Single_rangeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_single_range)
        self._la = 0 # Token type
        try:
            self.state = 2049
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DiffSqlParser.T__0]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2030
                self.match(DiffSqlParser.T__0)
                self.state = 2031
                self.match(DiffSqlParser.T__1)
                self.state = 2032
                self.single_range()
                self.state = 2037
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==DiffSqlParser.T__2:
                    self.state = 2033
                    self.match(DiffSqlParser.T__2)
                    self.state = 2034
                    self.single_range()
                    self.state = 2039
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2044
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.T__3:
                    self.state = 2040
                    self.match(DiffSqlParser.T__3)
                    self.state = 2041
                    self.match(DiffSqlParser.T__4)
                    self.state = 2042
                    self.match(DiffSqlParser.T__5)
                    self.state = 2043
                    self.expr()


                self.state = 2046
                self.match(DiffSqlParser.T__6)
                pass
            elif token in [DiffSqlParser.T__15]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2048
                self.range_()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def single_parenval(self):
            return self.getTypedRuleContext(DiffSqlParser.Single_parenvalContext,0)


        def single_number(self):
            return self.getTypedRuleContext(DiffSqlParser.Single_numberContext,0)


        def single_boolean(self):
            return self.getTypedRuleContext(DiffSqlParser.Single_booleanContext,0)


        def single_function(self):
            return self.getTypedRuleContext(DiffSqlParser.Single_functionContext,0)


        def single_col_ref(self):
            return self.getTypedRuleContext(DiffSqlParser.Single_col_refContext,0)


        def single_string(self):
            return self.getTypedRuleContext(DiffSqlParser.Single_stringContext,0)


        def single_name(self):
            return self.getTypedRuleContext(DiffSqlParser.Single_nameContext,0)


        def single_domain(self):
            return self.getTypedRuleContext(DiffSqlParser.Single_domainContext,0)


        def single_range(self):
            return self.getTypedRuleContext(DiffSqlParser.Single_rangeContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue" ):
                listener.enterValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue" ):
                listener.exitValue(self)




    def value(self):

        localctx = DiffSqlParser.ValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_value)
        try:
            self.state = 2060
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,229,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2051
                self.single_parenval()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2052
                self.single_number()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2053
                self.single_boolean()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2054
                self.single_function()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2055
                self.single_col_ref()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2056
                self.single_string()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2057
                self.single_name()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2058
                self.single_domain()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2059
                self.single_range()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DomainContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def col_ref(self):
            return self.getTypedRuleContext(DiffSqlParser.Col_refContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_domain

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDomain" ):
                listener.enterDomain(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDomain" ):
                listener.exitDomain(self)




    def domain(self):

        localctx = DiffSqlParser.DomainContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_domain)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2062
            self.match(DiffSqlParser.T__14)
            self.state = 2063
            self.col_ref()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RangeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DiffSqlParser.NumberContext)
            else:
                return self.getTypedRuleContext(DiffSqlParser.NumberContext,i)


        def COMMA(self):
            return self.getToken(DiffSqlParser.COMMA, 0)

        def getRuleIndex(self):
            return DiffSqlParser.RULE_range

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRange" ):
                listener.enterRange(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRange" ):
                listener.exitRange(self)




    def range_(self):

        localctx = DiffSqlParser.RangeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_range)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2065
            self.match(DiffSqlParser.T__15)
            self.state = 2066
            self.number()
            self.state = 2067
            self.match(DiffSqlParser.COMMA)
            self.state = 2068
            self.number()
            self.state = 2069
            self.match(DiffSqlParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParenvalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def single_expr(self):
            return self.getTypedRuleContext(DiffSqlParser.Single_exprContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_parenval

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenval" ):
                listener.enterParenval(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenval" ):
                listener.exitParenval(self)




    def parenval(self):

        localctx = DiffSqlParser.ParenvalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_parenval)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2071
            self.match(DiffSqlParser.T__11)
            self.state = 2072
            self.single_expr()
            self.state = 2073
            self.match(DiffSqlParser.T__12)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Opt_arg_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def opt_arg_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DiffSqlParser.Opt_arg_listContext)
            else:
                return self.getTypedRuleContext(DiffSqlParser.Opt_arg_listContext,i)


        def expr(self):
            return self.getTypedRuleContext(DiffSqlParser.ExprContext,0)


        def arg_list(self):
            return self.getTypedRuleContext(DiffSqlParser.Arg_listContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_opt_arg_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpt_arg_list" ):
                listener.enterOpt_arg_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpt_arg_list" ):
                listener.exitOpt_arg_list(self)




    def opt_arg_list(self):

        localctx = DiffSqlParser.Opt_arg_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_opt_arg_list)
        self._la = 0 # Token type
        try:
            self.state = 2107
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,234,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2075
                self.match(DiffSqlParser.T__0)
                self.state = 2076
                self.match(DiffSqlParser.T__1)
                self.state = 2077
                self.opt_arg_list()
                self.state = 2082
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==DiffSqlParser.T__2:
                    self.state = 2078
                    self.match(DiffSqlParser.T__2)
                    self.state = 2079
                    self.opt_arg_list()
                    self.state = 2084
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2089
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.T__3:
                    self.state = 2085
                    self.match(DiffSqlParser.T__3)
                    self.state = 2086
                    self.match(DiffSqlParser.T__4)
                    self.state = 2087
                    self.match(DiffSqlParser.T__5)
                    self.state = 2088
                    self.expr()


                self.state = 2091
                self.match(DiffSqlParser.T__6)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2093
                self.match(DiffSqlParser.T__7)
                self.state = 2094
                self.match(DiffSqlParser.T__1)
                self.state = 2095
                self.opt_arg_list()
                self.state = 2100
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.T__3:
                    self.state = 2096
                    self.match(DiffSqlParser.T__3)
                    self.state = 2097
                    self.match(DiffSqlParser.T__4)
                    self.state = 2098
                    self.match(DiffSqlParser.T__5)
                    self.state = 2099
                    self.expr()


                self.state = 2102
                self.match(DiffSqlParser.T__6)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2105
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << DiffSqlParser.T__0) | (1 << DiffSqlParser.T__8) | (1 << DiffSqlParser.T__9) | (1 << DiffSqlParser.T__11) | (1 << DiffSqlParser.T__14) | (1 << DiffSqlParser.T__15) | (1 << DiffSqlParser.T__17) | (1 << DiffSqlParser.T__18) | (1 << DiffSqlParser.T__21) | (1 << DiffSqlParser.T__22) | (1 << DiffSqlParser.STAR))) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (DiffSqlParser.NOT - 72)) | (1 << (DiffSqlParser.NUMBER - 72)) | (1 << (DiffSqlParser.STRING - 72)) | (1 << (DiffSqlParser.NAME - 72)))) != 0):
                    self.state = 2104
                    self.arg_list()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def single_name(self):
            return self.getTypedRuleContext(DiffSqlParser.Single_nameContext,0)


        def opt_arg_list(self):
            return self.getTypedRuleContext(DiffSqlParser.Opt_arg_listContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction" ):
                listener.enterFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction" ):
                listener.exitFunction(self)




    def function(self):

        localctx = DiffSqlParser.FunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_function)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2109
            self.single_name()
            self.state = 2110
            self.match(DiffSqlParser.T__11)
            self.state = 2111
            self.opt_arg_list()
            self.state = 2112
            self.match(DiffSqlParser.T__12)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comma_multi_expr_commaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comma(self):
            return self.getTypedRuleContext(DiffSqlParser.CommaContext,0)


        def multi_expr_comma(self):
            return self.getTypedRuleContext(DiffSqlParser.Multi_expr_commaContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_comma_multi_expr_comma

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComma_multi_expr_comma" ):
                listener.enterComma_multi_expr_comma(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComma_multi_expr_comma" ):
                listener.exitComma_multi_expr_comma(self)




    def comma_multi_expr_comma(self):

        localctx = DiffSqlParser.Comma_multi_expr_commaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_comma_multi_expr_comma)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2114
            self.comma()
            self.state = 2115
            self.multi_expr_comma()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Opt_comma_multi_expr_commaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def opt_comma_multi_expr_comma(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DiffSqlParser.Opt_comma_multi_expr_commaContext)
            else:
                return self.getTypedRuleContext(DiffSqlParser.Opt_comma_multi_expr_commaContext,i)


        def expr(self):
            return self.getTypedRuleContext(DiffSqlParser.ExprContext,0)


        def comma_multi_expr_comma(self):
            return self.getTypedRuleContext(DiffSqlParser.Comma_multi_expr_commaContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_opt_comma_multi_expr_comma

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpt_comma_multi_expr_comma" ):
                listener.enterOpt_comma_multi_expr_comma(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpt_comma_multi_expr_comma" ):
                listener.exitOpt_comma_multi_expr_comma(self)




    def opt_comma_multi_expr_comma(self):

        localctx = DiffSqlParser.Opt_comma_multi_expr_commaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_opt_comma_multi_expr_comma)
        self._la = 0 # Token type
        try:
            self.state = 2149
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DiffSqlParser.T__0]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2117
                self.match(DiffSqlParser.T__0)
                self.state = 2118
                self.match(DiffSqlParser.T__1)
                self.state = 2119
                self.opt_comma_multi_expr_comma()
                self.state = 2124
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==DiffSqlParser.T__2:
                    self.state = 2120
                    self.match(DiffSqlParser.T__2)
                    self.state = 2121
                    self.opt_comma_multi_expr_comma()
                    self.state = 2126
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2131
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.T__3:
                    self.state = 2127
                    self.match(DiffSqlParser.T__3)
                    self.state = 2128
                    self.match(DiffSqlParser.T__4)
                    self.state = 2129
                    self.match(DiffSqlParser.T__5)
                    self.state = 2130
                    self.expr()


                self.state = 2133
                self.match(DiffSqlParser.T__6)
                pass
            elif token in [DiffSqlParser.T__7]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2135
                self.match(DiffSqlParser.T__7)
                self.state = 2136
                self.match(DiffSqlParser.T__1)
                self.state = 2137
                self.opt_comma_multi_expr_comma()
                self.state = 2142
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.T__3:
                    self.state = 2138
                    self.match(DiffSqlParser.T__3)
                    self.state = 2139
                    self.match(DiffSqlParser.T__4)
                    self.state = 2140
                    self.match(DiffSqlParser.T__5)
                    self.state = 2141
                    self.expr()


                self.state = 2144
                self.match(DiffSqlParser.T__6)
                pass
            elif token in [DiffSqlParser.T__2, DiffSqlParser.T__3, DiffSqlParser.T__6, DiffSqlParser.T__12, DiffSqlParser.COMMA]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2147
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.COMMA:
                    self.state = 2146
                    self.comma_multi_expr_comma()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Multi_expr_commaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comma(self):
            return self.getTypedRuleContext(DiffSqlParser.CommaContext,0)


        def COMMA(self):
            return self.getToken(DiffSqlParser.COMMA, 0)

        def single_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DiffSqlParser.Single_exprContext)
            else:
                return self.getTypedRuleContext(DiffSqlParser.Single_exprContext,i)


        def opt_comma_multi_expr_comma(self):
            return self.getTypedRuleContext(DiffSqlParser.Opt_comma_multi_expr_commaContext,0)


        def expr(self):
            return self.getTypedRuleContext(DiffSqlParser.ExprContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_multi_expr_comma

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMulti_expr_comma" ):
                listener.enterMulti_expr_comma(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMulti_expr_comma" ):
                listener.exitMulti_expr_comma(self)




    def multi_expr_comma(self):

        localctx = DiffSqlParser.Multi_expr_commaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_multi_expr_comma)
        self._la = 0 # Token type
        try:
            self.state = 2183
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DiffSqlParser.T__8]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2151
                self.match(DiffSqlParser.T__8)
                self.state = 2152
                self.match(DiffSqlParser.T__1)
                self.state = 2153
                self.comma()
                self.state = 2154
                self.match(DiffSqlParser.COMMA)
                self.state = 2155
                self.single_expr()
                self.state = 2160
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==DiffSqlParser.T__2:
                    self.state = 2156
                    self.match(DiffSqlParser.T__2)
                    self.state = 2157
                    self.single_expr()
                    self.state = 2162
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2163
                self.match(DiffSqlParser.T__6)
                self.state = 2164
                self.opt_comma_multi_expr_comma()
                pass
            elif token in [DiffSqlParser.T__9]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2166
                self.match(DiffSqlParser.T__9)
                self.state = 2167
                self.match(DiffSqlParser.T__1)
                self.state = 2168
                self.comma()
                self.state = 2169
                self.match(DiffSqlParser.COMMA)
                self.state = 2170
                self.single_expr()
                self.state = 2175
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DiffSqlParser.T__3:
                    self.state = 2171
                    self.match(DiffSqlParser.T__3)
                    self.state = 2172
                    self.match(DiffSqlParser.T__4)
                    self.state = 2173
                    self.match(DiffSqlParser.T__5)
                    self.state = 2174
                    self.expr()


                self.state = 2177
                self.match(DiffSqlParser.T__6)
                self.state = 2178
                self.opt_comma_multi_expr_comma()
                pass
            elif token in [DiffSqlParser.T__0, DiffSqlParser.T__11, DiffSqlParser.T__14, DiffSqlParser.T__15, DiffSqlParser.T__17, DiffSqlParser.T__18, DiffSqlParser.T__21, DiffSqlParser.T__22, DiffSqlParser.NOT, DiffSqlParser.NUMBER, DiffSqlParser.STRING, DiffSqlParser.NAME]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2180
                self.single_expr()
                self.state = 2181
                self.opt_comma_multi_expr_comma()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Arg_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multi_expr_comma(self):
            return self.getTypedRuleContext(DiffSqlParser.Multi_expr_commaContext,0)


        def sel_res_all_star(self):
            return self.getTypedRuleContext(DiffSqlParser.Sel_res_all_starContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_arg_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArg_list" ):
                listener.enterArg_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArg_list" ):
                listener.exitArg_list(self)




    def arg_list(self):

        localctx = DiffSqlParser.Arg_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_arg_list)
        try:
            self.state = 2187
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DiffSqlParser.T__0, DiffSqlParser.T__8, DiffSqlParser.T__9, DiffSqlParser.T__11, DiffSqlParser.T__14, DiffSqlParser.T__15, DiffSqlParser.T__17, DiffSqlParser.T__18, DiffSqlParser.T__21, DiffSqlParser.T__22, DiffSqlParser.NOT, DiffSqlParser.NUMBER, DiffSqlParser.STRING, DiffSqlParser.NAME]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2185
                self.multi_expr_comma()
                pass
            elif token in [DiffSqlParser.STAR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2186
                self.sel_res_all_star()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return DiffSqlParser.RULE_boolean

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoolean" ):
                listener.enterBoolean(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoolean" ):
                listener.exitBoolean(self)




    def boolean(self):

        localctx = DiffSqlParser.BooleanContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_boolean)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2189
            _la = self._input.LA(1)
            if not(_la==DiffSqlParser.T__17 or _la==DiffSqlParser.T__18):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compound_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return DiffSqlParser.RULE_compound_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompound_op" ):
                listener.enterCompound_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompound_op" ):
                listener.exitCompound_op(self)




    def compound_op(self):

        localctx = DiffSqlParser.Compound_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_compound_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2191
            _la = self._input.LA(1)
            if not(_la==DiffSqlParser.T__19 or _la==DiffSqlParser.T__20):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BinaryopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(DiffSqlParser.STAR, 0)

        def LIKE(self):
            return self.getToken(DiffSqlParser.LIKE, 0)

        def IN(self):
            return self.getToken(DiffSqlParser.IN, 0)

        def and_or(self):
            return self.getTypedRuleContext(DiffSqlParser.And_orContext,0)


        def getRuleIndex(self):
            return DiffSqlParser.RULE_binaryop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinaryop" ):
                listener.enterBinaryop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinaryop" ):
                listener.exitBinaryop(self)




    def binaryop(self):

        localctx = DiffSqlParser.BinaryopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_binaryop)
        try:
            self.state = 2208
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DiffSqlParser.T__21]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2193
                self.match(DiffSqlParser.T__21)
                pass
            elif token in [DiffSqlParser.T__22]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2194
                self.match(DiffSqlParser.T__22)
                pass
            elif token in [DiffSqlParser.STAR]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2195
                self.match(DiffSqlParser.STAR)
                pass
            elif token in [DiffSqlParser.T__23]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2196
                self.match(DiffSqlParser.T__23)
                pass
            elif token in [DiffSqlParser.T__24]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2197
                self.match(DiffSqlParser.T__24)
                pass
            elif token in [DiffSqlParser.T__5]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2198
                self.match(DiffSqlParser.T__5)
                pass
            elif token in [DiffSqlParser.T__25]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2199
                self.match(DiffSqlParser.T__25)
                pass
            elif token in [DiffSqlParser.T__26]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2200
                self.match(DiffSqlParser.T__26)
                pass
            elif token in [DiffSqlParser.T__27]:
                self.enterOuterAlt(localctx, 9)
                self.state = 2201
                self.match(DiffSqlParser.T__27)
                pass
            elif token in [DiffSqlParser.T__28]:
                self.enterOuterAlt(localctx, 10)
                self.state = 2202
                self.match(DiffSqlParser.T__28)
                pass
            elif token in [DiffSqlParser.T__29]:
                self.enterOuterAlt(localctx, 11)
                self.state = 2203
                self.match(DiffSqlParser.T__29)
                pass
            elif token in [DiffSqlParser.T__30]:
                self.enterOuterAlt(localctx, 12)
                self.state = 2204
                self.match(DiffSqlParser.T__30)
                pass
            elif token in [DiffSqlParser.LIKE]:
                self.enterOuterAlt(localctx, 13)
                self.state = 2205
                self.match(DiffSqlParser.LIKE)
                pass
            elif token in [DiffSqlParser.IN]:
                self.enterOuterAlt(localctx, 14)
                self.state = 2206
                self.match(DiffSqlParser.IN)
                pass
            elif token in [DiffSqlParser.AND, DiffSqlParser.OR]:
                self.enterOuterAlt(localctx, 15)
                self.state = 2207
                self.and_or()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Binaryop_no_andorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(DiffSqlParser.STAR, 0)

        def LIKE(self):
            return self.getToken(DiffSqlParser.LIKE, 0)

        def IN(self):
            return self.getToken(DiffSqlParser.IN, 0)

        def getRuleIndex(self):
            return DiffSqlParser.RULE_binaryop_no_andor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinaryop_no_andor" ):
                listener.enterBinaryop_no_andor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinaryop_no_andor" ):
                listener.exitBinaryop_no_andor(self)




    def binaryop_no_andor(self):

        localctx = DiffSqlParser.Binaryop_no_andorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_binaryop_no_andor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2210
            _la = self._input.LA(1)
            if not(((((_la - 6)) & ~0x3f) == 0 and ((1 << (_la - 6)) & ((1 << (DiffSqlParser.T__5 - 6)) | (1 << (DiffSqlParser.T__21 - 6)) | (1 << (DiffSqlParser.T__22 - 6)) | (1 << (DiffSqlParser.T__23 - 6)) | (1 << (DiffSqlParser.T__24 - 6)) | (1 << (DiffSqlParser.T__25 - 6)) | (1 << (DiffSqlParser.T__26 - 6)) | (1 << (DiffSqlParser.T__27 - 6)) | (1 << (DiffSqlParser.T__28 - 6)) | (1 << (DiffSqlParser.T__29 - 6)) | (1 << (DiffSqlParser.T__30 - 6)) | (1 << (DiffSqlParser.STAR - 6)) | (1 << (DiffSqlParser.IN - 6)) | (1 << (DiffSqlParser.LIKE - 6)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnaryopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(DiffSqlParser.NOT, 0)

        def getRuleIndex(self):
            return DiffSqlParser.RULE_unaryop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryop" ):
                listener.enterUnaryop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryop" ):
                listener.exitUnaryop(self)




    def unaryop(self):

        localctx = DiffSqlParser.UnaryopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_unaryop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2212
            _la = self._input.LA(1)
            if not(((((_la - 22)) & ~0x3f) == 0 and ((1 << (_la - 22)) & ((1 << (DiffSqlParser.T__21 - 22)) | (1 << (DiffSqlParser.T__22 - 22)) | (1 << (DiffSqlParser.NOT - 22)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(DiffSqlParser.STRING, 0)

        def getRuleIndex(self):
            return DiffSqlParser.RULE_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString" ):
                listener.enterString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString" ):
                listener.exitString(self)




    def string(self):

        localctx = DiffSqlParser.StringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_string)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2214
            self.match(DiffSqlParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(DiffSqlParser.NAME, 0)

        def getRuleIndex(self):
            return DiffSqlParser.RULE_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName" ):
                listener.enterName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName" ):
                listener.exitName(self)




    def name(self):

        localctx = DiffSqlParser.NameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2216
            self.match(DiffSqlParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(DiffSqlParser.NUMBER, 0)

        def getRuleIndex(self):
            return DiffSqlParser.RULE_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber" ):
                listener.enterNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber" ):
                listener.exitNumber(self)




    def number(self):

        localctx = DiffSqlParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_number)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2218
            self.match(DiffSqlParser.NUMBER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self):
            return self.getToken(DiffSqlParser.COMMA, 0)

        def getRuleIndex(self):
            return DiffSqlParser.RULE_comma

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComma" ):
                listener.enterComma(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComma" ):
                listener.exitComma(self)




    def comma(self):

        localctx = DiffSqlParser.CommaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_comma)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2220
            self.match(DiffSqlParser.COMMA)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AndContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AND(self):
            return self.getToken(DiffSqlParser.AND, 0)

        def getRuleIndex(self):
            return DiffSqlParser.RULE_and

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnd" ):
                listener.enterAnd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnd" ):
                listener.exitAnd(self)




    def and_(self):

        localctx = DiffSqlParser.AndContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_and)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2222
            self.match(DiffSqlParser.AND)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OR(self):
            return self.getToken(DiffSqlParser.OR, 0)

        def getRuleIndex(self):
            return DiffSqlParser.RULE_or

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOr" ):
                listener.enterOr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOr" ):
                listener.exitOr(self)




    def or_(self):

        localctx = DiffSqlParser.OrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_or)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2224
            self.match(DiffSqlParser.OR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JOIN(self):
            return self.getToken(DiffSqlParser.JOIN, 0)

        def getRuleIndex(self):
            return DiffSqlParser.RULE_join

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin" ):
                listener.enterJoin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin" ):
                listener.exitJoin(self)




    def join(self):

        localctx = DiffSqlParser.JoinContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_join)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2226
            self.match(DiffSqlParser.JOIN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DistinctContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISTINCT(self):
            return self.getToken(DiffSqlParser.DISTINCT, 0)

        def getRuleIndex(self):
            return DiffSqlParser.RULE_distinct

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDistinct" ):
                listener.enterDistinct(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDistinct" ):
                listener.exitDistinct(self)




    def distinct(self):

        localctx = DiffSqlParser.DistinctContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_distinct)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2228
            self.match(DiffSqlParser.DISTINCT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





