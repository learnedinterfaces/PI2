(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.vl = {}));
})(this, (function (exports) { 'use strict';

  const Data$1 = Symbol('data');
  const Context = Symbol('context');
  let id_counter = 0;

  function id(prefix) {
    return (prefix || '') + (++id_counter);
  }

  class BaseObject {
    toObject() { return toObject(this); }
  }

  class MergeObject {
    constructor(values) { this[Data$1] = values; }
    toObject() { return Object.assign({}, ...recurse(this[Data$1])); }
  }

  function assign(target, ...sources) {
    if (sources.length === 1 && Array.isArray(sources[0])) {
      target[Data$1] = sources[0];
    } else {
      sources.forEach(s => {
        Object.assign(target[Data$1], isObject(s) && s[Data$1] || s);
      });
    }
    return target;
  }

  function flat(value) {
    return Array.isArray(value) ? [].concat(...value) : value;
  }

  function prop(obj, name) {
    return isObject(obj) && !obj[Data$1] ? obj[name] : get(obj, name);
  }

  function get(obj, name) {
    return obj[Data$1][name];
  }

  function set(obj, name, value) {
    obj[Data$1][name] = object(value);
  }

  function duplicate(...obj) {
    return Object.assign(
      Object.create(Object.getPrototypeOf(obj[0])),
      ...obj
    );
  }

  function copy(obj) {
    return duplicate(obj, { [Data$1]: Object.assign({}, obj[Data$1]) });
  }

  function init(obj, value) {
    obj[Data$1] = value || {};
  }

  function annotate(value, context) {
    const ctx = { [Context]: context };
    return isArray(value)
      ? value.map(v => duplicate(v, ctx))
      : duplicate(value, ctx)
  }

  function recurse(d) {
    return d && d.toObject ? d.toObject(d[Context] || 0) : toObject(d);
  }

  function toObject(value) {
    if (isArray(value)) {
      return value.map(d => recurse(d));
    } else if (isObject(value)) {
      const data = value[Data$1] || value;
      return isArray(data)
        ? recurse(data)
        : Object.keys(data).reduce((_, k) => {
            _[k] = recurse(data[k]);
            return _;
          }, {});
    } else {
      return value;
    }
  }

  function raw(value) {
    return { [Data$1]: value, toObject: () => value };
  }

  function object(value) {
    return (isObject(value) && !value[Data$1]) ? {[Data$1]: value || {}} : value;
  }

  function merge(flag, ...values) {
    const objects = [].concat(...values);
    return new MergeObject(flag ? annotate(objects, flag) : objects);
  }

  function nest(obj, keys, rest) {
    const m = keys.reduce((m, k) => (m[k] = 1, m), {}),
          u = {}, v = {};

    for (let k in obj) (m[k] ? u : v)[k] = obj[k];
    u[rest] = v;
    return u;
  }

  // -- type checkers --

  const isArray = Array.isArray;

  function isIterable(_) {
    return isObject(_) && typeof _[Symbol.iterator] === 'function';
  }

  function isObject(_) {
    return _ === Object(_) && !isArray(_);
  }

  function isString(_) {
    return typeof _ === 'string';
  }

  function isFunction(_) {
    return typeof _ === 'function';
  }

  function isEventTarget(_) {
    return isObject(_) && isFunction(_.addEventListener);
  }

  exports.vegalite = void 0;
  exports.vega = void 0;
  var _opt;

  // TODO: validation

  function options(...viewopt) {
    const opt = Object.assign({}, _opt);
    opt.view = Object.assign({}, _opt.view, ...viewopt);
    if (opt.view.spec) {
      opt.spec = opt.view.spec;
      delete opt.view.spec;
    }
    return opt;
  }

  function element() {
    return typeof document === 'undefined' ? undefined
      : document.createElement('div');
  }

  function createSpec(self) {
    const major = exports.vegalite ? exports.vegalite.version.split('.')[0] : '5';
    return Object.assign(
      {$schema: `https://vega.github.io/schema/vega-lite/v${major}.json`},
      self.toObject()
    );
  }

  function createView(self, opt) {
    if (!exports.vegalite || !exports.vega) {
      throw Error('Vega / Vega-Lite not registered. Use the "register" method.');
    }

    const spec = exports.vegalite.compile(opt.spec || createSpec(self), opt.config),
          view = new exports.vega.View(exports.vega.parse(spec.spec), opt.view);

    if (opt.init) opt.init(view);

    return view;
  }

  async function render(opt) {
    opt = options({container: opt && opt.container || element()}, opt);

    const view = await createView(this, opt).runAsync(),
          div = view.container() || {};

    div.value = view;
    return div;
  }

  function toView(opt) {
    return createView(this, options(opt));
  }

  function toSpec() {
    return createSpec(this);
  }

  function toString(space) {
    return JSON.stringify(createSpec(this), null, space);
  }

  function register(vega, vegalite, options) {
    exports.vegalite = vegalite;
    exports.vega = vega;
    _opt = options || {};
    return this;
  }

  class _Repeat extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      if (args[0] !== undefined) set(this, "repeat", args[0]);
      if (args[1] !== undefined) set(this, "spec", args[1]);
    }

    align(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "align", value);
        return obj;
      } else {
        return get(this, "align");
      }
    }

    autosize(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "autosize", value);
        return obj;
      } else {
        return get(this, "autosize");
      }
    }

    background(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "background", value);
        return obj;
      } else {
        return get(this, "background");
      }
    }

    bounds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bounds", value);
        return obj;
      } else {
        return get(this, "bounds");
      }
    }

    center(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "center", value);
        return obj;
      } else {
        return get(this, "center");
      }
    }

    columns(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "columns", value);
        return obj;
      } else {
        return get(this, "columns");
      }
    }

    config(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "config", value);
        return obj;
      } else {
        return get(this, "config");
      }
    }

    datasets(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "datasets", value);
        return obj;
      } else {
        return get(this, "datasets");
      }
    }

    description(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "description", value);
        return obj;
      } else {
        return get(this, "description");
      }
    }

    name(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "name", value);
        return obj;
      } else {
        return get(this, "name");
      }
    }

    padding(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "padding", value);
        return obj;
      } else {
        return get(this, "padding");
      }
    }

    resolve(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "resolve", value);
        return obj;
      } else {
        return get(this, "resolve");
      }
    }

    spacing(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "spacing", value);
        return obj;
      } else {
        return get(this, "spacing");
      }
    }

    spec(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "spec", value);
        return obj;
      } else {
        return get(this, "spec");
      }
    }

    title(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "title", value);
        return obj;
      } else {
        return get(this, "title");
      }
    }

    usermeta(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "usermeta", value);
        return obj;
      } else {
        return get(this, "usermeta");
      }
    }

    data(value) {
      if (arguments.length) {
        const obj = copy(this);
        value = isArray(value) ? {values: raw(value)} : isIterable(value) ? {values: raw(value)} : isString(value) ? {url: value} : value;
        set(obj, "data", value);
        return obj;
      } else {
        return get(this, "data");
      }
    }

    params(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        value = annotate(value, 1);
        set(obj, "params", value);
        return obj;
      } else {
        return get(this, "params");
      }
    }

    transform(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "transform", value);
        return obj;
      } else {
        return get(this, "transform");
      }
    }

    facet(...values) {
      values = values.slice(0, 1);
      const obj = _facet(...values);
      return obj.spec(this);
    }

    render(...values) {
      return render.apply(this, values);
    }

    toView(...values) {
      return toView.apply(this, values);
    }

    toSpec(...values) {
      return toSpec.apply(this, values);
    }

    toString(...values) {
      return toString.apply(this, values);
    }

  }

  function _repeat(...args) {
    return new _Repeat(...args);
  }

  class _Facet extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      if (args[0] !== undefined) set(this, "facet", args[0]);
      if (args[1] !== undefined) set(this, "spec", args[1]);
    }

    align(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "align", value);
        return obj;
      } else {
        return get(this, "align");
      }
    }

    autosize(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "autosize", value);
        return obj;
      } else {
        return get(this, "autosize");
      }
    }

    background(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "background", value);
        return obj;
      } else {
        return get(this, "background");
      }
    }

    bounds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bounds", value);
        return obj;
      } else {
        return get(this, "bounds");
      }
    }

    center(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "center", value);
        return obj;
      } else {
        return get(this, "center");
      }
    }

    columns(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "columns", value);
        return obj;
      } else {
        return get(this, "columns");
      }
    }

    config(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "config", value);
        return obj;
      } else {
        return get(this, "config");
      }
    }

    datasets(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "datasets", value);
        return obj;
      } else {
        return get(this, "datasets");
      }
    }

    description(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "description", value);
        return obj;
      } else {
        return get(this, "description");
      }
    }

    name(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "name", value);
        return obj;
      } else {
        return get(this, "name");
      }
    }

    padding(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "padding", value);
        return obj;
      } else {
        return get(this, "padding");
      }
    }

    resolve(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "resolve", value);
        return obj;
      } else {
        return get(this, "resolve");
      }
    }

    spacing(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "spacing", value);
        return obj;
      } else {
        return get(this, "spacing");
      }
    }

    spec(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "spec", value);
        return obj;
      } else {
        return get(this, "spec");
      }
    }

    title(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "title", value);
        return obj;
      } else {
        return get(this, "title");
      }
    }

    usermeta(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "usermeta", value);
        return obj;
      } else {
        return get(this, "usermeta");
      }
    }

    data(value) {
      if (arguments.length) {
        const obj = copy(this);
        value = isArray(value) ? {values: raw(value)} : isIterable(value) ? {values: raw(value)} : isString(value) ? {url: value} : value;
        set(obj, "data", value);
        return obj;
      } else {
        return get(this, "data");
      }
    }

    params(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        value = annotate(value, 1);
        set(obj, "params", value);
        return obj;
      } else {
        return get(this, "params");
      }
    }

    transform(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "transform", value);
        return obj;
      } else {
        return get(this, "transform");
      }
    }

    repeat(...values) {
      values = values.slice(0, 1);
      const obj = _repeat(...values);
      return obj.spec(this);
    }

    render(...values) {
      return render.apply(this, values);
    }

    toView(...values) {
      return toView.apply(this, values);
    }

    toSpec(...values) {
      return toSpec.apply(this, values);
    }

    toString(...values) {
      return toString.apply(this, values);
    }

  }

  function _facet(...args) {
    return new _Facet(...args);
  }

  class Mark extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      args = args.map(_ => isString(_) ? {type: _} : _);
      set(this, "mark", merge(0, get(this, "mark"), args));
    }

    align(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "align", value);
        return obj;
      } else {
        return get(this, "align");
      }
    }

    autosize(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "autosize", value);
        return obj;
      } else {
        return get(this, "autosize");
      }
    }

    background(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "background", value);
        return obj;
      } else {
        return get(this, "background");
      }
    }

    bounds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bounds", value);
        return obj;
      } else {
        return get(this, "bounds");
      }
    }

    center(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "center", value);
        return obj;
      } else {
        return get(this, "center");
      }
    }

    config(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "config", value);
        return obj;
      } else {
        return get(this, "config");
      }
    }

    datasets(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "datasets", value);
        return obj;
      } else {
        return get(this, "datasets");
      }
    }

    description(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "description", value);
        return obj;
      } else {
        return get(this, "description");
      }
    }

    height(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "height", value);
        return obj;
      } else {
        return get(this, "height");
      }
    }

    name(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "name", value);
        return obj;
      } else {
        return get(this, "name");
      }
    }

    padding(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "padding", value);
        return obj;
      } else {
        return get(this, "padding");
      }
    }

    resolve(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "resolve", value);
        return obj;
      } else {
        return get(this, "resolve");
      }
    }

    spacing(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "spacing", value);
        return obj;
      } else {
        return get(this, "spacing");
      }
    }

    title(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "title", value);
        return obj;
      } else {
        return get(this, "title");
      }
    }

    usermeta(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "usermeta", value);
        return obj;
      } else {
        return get(this, "usermeta");
      }
    }

    view(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "view", value);
        return obj;
      } else {
        return get(this, "view");
      }
    }

    width(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "width", value);
        return obj;
      } else {
        return get(this, "width");
      }
    }

    mark(...values) {
      if (arguments.length) {
        values = values.map(v => isString(v) ? {type: v} : v);
        const obj = copy(this);
        set(obj, "mark", merge(0, values));
        return obj;
      } else {
        return get(this, "mark");
      }
    }

    select(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        value = annotate(value, 1);
        set(obj, "params", value);
        return obj;
      } else {
        return get(this, "params");
      }
    }

    project(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "projection", value);
        return obj;
      } else {
        return get(this, "projection");
      }
    }

    encode(...values) {
      if (values.length === 1 && Array.isArray(values[0])) {
        values = values[0];
      }
      if (values.length) {
        const val = get(this, "encoding");
        const obj = copy(this);
        if (val) values = [val].concat(values);
        set(obj, "encoding", merge(1, values));
        return obj;
      } else {
        return get(this, "encoding");
      }
    }

    data(value) {
      if (arguments.length) {
        const obj = copy(this);
        value = isArray(value) ? {values: raw(value)} : isIterable(value) ? {values: raw(value)} : isString(value) ? {url: value} : value;
        set(obj, "data", value);
        return obj;
      } else {
        return get(this, "data");
      }
    }

    params(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        value = annotate(value, 1);
        set(obj, "params", value);
        return obj;
      } else {
        return get(this, "params");
      }
    }

    transform(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "transform", value);
        return obj;
      } else {
        return get(this, "transform");
      }
    }

    markArc(...values) {
      values = [{"type":"arc"}].concat(values);
      const obj = copy(this);
      set(obj, "mark", merge(0, values));
      return obj;
    }

    markArea(...values) {
      values = [{"type":"area"}].concat(values);
      const obj = copy(this);
      set(obj, "mark", merge(0, values));
      return obj;
    }

    markBar(...values) {
      values = [{"type":"bar"}].concat(values);
      const obj = copy(this);
      set(obj, "mark", merge(0, values));
      return obj;
    }

    markBoxplot(...values) {
      values = [{"type":"boxplot"}].concat(values);
      const obj = copy(this);
      set(obj, "mark", merge(0, values));
      return obj;
    }

    markCircle(...values) {
      values = [{"type":"circle"}].concat(values);
      const obj = copy(this);
      set(obj, "mark", merge(0, values));
      return obj;
    }

    markErrorband(...values) {
      values = [{"type":"errorband"}].concat(values);
      const obj = copy(this);
      set(obj, "mark", merge(0, values));
      return obj;
    }

    markErrorbar(...values) {
      values = [{"type":"errorbar"}].concat(values);
      const obj = copy(this);
      set(obj, "mark", merge(0, values));
      return obj;
    }

    markGeoshape(...values) {
      values = [{"type":"geoshape"}].concat(values);
      const obj = copy(this);
      set(obj, "mark", merge(0, values));
      return obj;
    }

    markImage(...values) {
      values = [{"type":"image"}].concat(values);
      const obj = copy(this);
      set(obj, "mark", merge(0, values));
      return obj;
    }

    markLine(...values) {
      values = [{"type":"line"}].concat(values);
      const obj = copy(this);
      set(obj, "mark", merge(0, values));
      return obj;
    }

    markPoint(...values) {
      values = [{"type":"point"}].concat(values);
      const obj = copy(this);
      set(obj, "mark", merge(0, values));
      return obj;
    }

    markRect(...values) {
      values = [{"type":"rect"}].concat(values);
      const obj = copy(this);
      set(obj, "mark", merge(0, values));
      return obj;
    }

    markRule(...values) {
      values = [{"type":"rule"}].concat(values);
      const obj = copy(this);
      set(obj, "mark", merge(0, values));
      return obj;
    }

    markSquare(...values) {
      values = [{"type":"square"}].concat(values);
      const obj = copy(this);
      set(obj, "mark", merge(0, values));
      return obj;
    }

    markText(...values) {
      values = [{"type":"text"}].concat(values);
      const obj = copy(this);
      set(obj, "mark", merge(0, values));
      return obj;
    }

    markTick(...values) {
      values = [{"type":"tick"}].concat(values);
      const obj = copy(this);
      set(obj, "mark", merge(0, values));
      return obj;
    }

    markTrail(...values) {
      values = [{"type":"trail"}].concat(values);
      const obj = copy(this);
      set(obj, "mark", merge(0, values));
      return obj;
    }

    facet(...values) {
      values = values.slice(0, 1);
      const obj = _facet(...values);
      return obj.spec(this);
    }

    repeat(...values) {
      values = values.slice(0, 1);
      const obj = _repeat(...values);
      return obj.spec(this);
    }

    render(...values) {
      return render.apply(this, values);
    }

    toView(...values) {
      return toView.apply(this, values);
    }

    toSpec(...values) {
      return toSpec.apply(this, values);
    }

    toString(...values) {
      return toString.apply(this, values);
    }

  }

  function mark(...args) {
    return new Mark(...args);
  }

  function markArc(...args) {
    return mark({"type":"arc"}, ...args);
  }

  function markArea(...args) {
    return mark({"type":"area"}, ...args);
  }

  function markBar(...args) {
    return mark({"type":"bar"}, ...args);
  }

  function markBoxplot(...args) {
    return mark({"type":"boxplot"}, ...args);
  }

  function markCircle(...args) {
    return mark({"type":"circle"}, ...args);
  }

  function markErrorband(...args) {
    return mark({"type":"errorband"}, ...args);
  }

  function markErrorbar(...args) {
    return mark({"type":"errorbar"}, ...args);
  }

  function markGeoshape(...args) {
    return mark({"type":"geoshape"}, ...args);
  }

  function markImage(...args) {
    return mark({"type":"image"}, ...args);
  }

  function markLine(...args) {
    return mark({"type":"line"}, ...args);
  }

  function markPoint(...args) {
    return mark({"type":"point"}, ...args);
  }

  function markRect(...args) {
    return mark({"type":"rect"}, ...args);
  }

  function markRule(...args) {
    return mark({"type":"rule"}, ...args);
  }

  function markSquare(...args) {
    return mark({"type":"square"}, ...args);
  }

  function markText(...args) {
    return mark({"type":"text"}, ...args);
  }

  function markTick(...args) {
    return mark({"type":"tick"}, ...args);
  }

  function markTrail(...args) {
    return mark({"type":"trail"}, ...args);
  }

  class Layer extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      args = flat(args);
      set(this, "layer", args);
    }

    autosize(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "autosize", value);
        return obj;
      } else {
        return get(this, "autosize");
      }
    }

    background(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "background", value);
        return obj;
      } else {
        return get(this, "background");
      }
    }

    config(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "config", value);
        return obj;
      } else {
        return get(this, "config");
      }
    }

    datasets(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "datasets", value);
        return obj;
      } else {
        return get(this, "datasets");
      }
    }

    description(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "description", value);
        return obj;
      } else {
        return get(this, "description");
      }
    }

    height(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "height", value);
        return obj;
      } else {
        return get(this, "height");
      }
    }

    layer(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "layer", value);
        return obj;
      } else {
        return get(this, "layer");
      }
    }

    name(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "name", value);
        return obj;
      } else {
        return get(this, "name");
      }
    }

    padding(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "padding", value);
        return obj;
      } else {
        return get(this, "padding");
      }
    }

    resolve(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "resolve", value);
        return obj;
      } else {
        return get(this, "resolve");
      }
    }

    title(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "title", value);
        return obj;
      } else {
        return get(this, "title");
      }
    }

    usermeta(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "usermeta", value);
        return obj;
      } else {
        return get(this, "usermeta");
      }
    }

    view(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "view", value);
        return obj;
      } else {
        return get(this, "view");
      }
    }

    width(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "width", value);
        return obj;
      } else {
        return get(this, "width");
      }
    }

    project(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "projection", value);
        return obj;
      } else {
        return get(this, "projection");
      }
    }

    encode(...values) {
      if (values.length === 1 && Array.isArray(values[0])) {
        values = values[0];
      }
      if (values.length) {
        const val = get(this, "encoding");
        const obj = copy(this);
        if (val) values = [val].concat(values);
        set(obj, "encoding", merge(1, values));
        return obj;
      } else {
        return get(this, "encoding");
      }
    }

    data(value) {
      if (arguments.length) {
        const obj = copy(this);
        value = isArray(value) ? {values: raw(value)} : isIterable(value) ? {values: raw(value)} : isString(value) ? {url: value} : value;
        set(obj, "data", value);
        return obj;
      } else {
        return get(this, "data");
      }
    }

    params(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        value = annotate(value, 1);
        set(obj, "params", value);
        return obj;
      } else {
        return get(this, "params");
      }
    }

    transform(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "transform", value);
        return obj;
      } else {
        return get(this, "transform");
      }
    }

    facet(...values) {
      values = values.slice(0, 1);
      const obj = _facet(...values);
      return obj.spec(this);
    }

    repeat(...values) {
      values = values.slice(0, 1);
      const obj = _repeat(...values);
      return obj.spec(this);
    }

    render(...values) {
      return render.apply(this, values);
    }

    toView(...values) {
      return toView.apply(this, values);
    }

    toSpec(...values) {
      return toSpec.apply(this, values);
    }

    toString(...values) {
      return toString.apply(this, values);
    }

  }

  function layer(...args) {
    return new Layer(...args);
  }

  class Concat extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      args = flat(args);
      set(this, "concat", args);
    }

    align(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "align", value);
        return obj;
      } else {
        return get(this, "align");
      }
    }

    autosize(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "autosize", value);
        return obj;
      } else {
        return get(this, "autosize");
      }
    }

    background(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "background", value);
        return obj;
      } else {
        return get(this, "background");
      }
    }

    bounds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bounds", value);
        return obj;
      } else {
        return get(this, "bounds");
      }
    }

    center(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "center", value);
        return obj;
      } else {
        return get(this, "center");
      }
    }

    columns(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "columns", value);
        return obj;
      } else {
        return get(this, "columns");
      }
    }

    concat(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "concat", value);
        return obj;
      } else {
        return get(this, "concat");
      }
    }

    config(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "config", value);
        return obj;
      } else {
        return get(this, "config");
      }
    }

    datasets(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "datasets", value);
        return obj;
      } else {
        return get(this, "datasets");
      }
    }

    description(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "description", value);
        return obj;
      } else {
        return get(this, "description");
      }
    }

    name(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "name", value);
        return obj;
      } else {
        return get(this, "name");
      }
    }

    padding(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "padding", value);
        return obj;
      } else {
        return get(this, "padding");
      }
    }

    resolve(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "resolve", value);
        return obj;
      } else {
        return get(this, "resolve");
      }
    }

    spacing(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "spacing", value);
        return obj;
      } else {
        return get(this, "spacing");
      }
    }

    title(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "title", value);
        return obj;
      } else {
        return get(this, "title");
      }
    }

    usermeta(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "usermeta", value);
        return obj;
      } else {
        return get(this, "usermeta");
      }
    }

    data(value) {
      if (arguments.length) {
        const obj = copy(this);
        value = isArray(value) ? {values: raw(value)} : isIterable(value) ? {values: raw(value)} : isString(value) ? {url: value} : value;
        set(obj, "data", value);
        return obj;
      } else {
        return get(this, "data");
      }
    }

    params(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        value = annotate(value, 1);
        set(obj, "params", value);
        return obj;
      } else {
        return get(this, "params");
      }
    }

    transform(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "transform", value);
        return obj;
      } else {
        return get(this, "transform");
      }
    }

    facet(...values) {
      values = values.slice(0, 1);
      const obj = _facet(...values);
      return obj.spec(this);
    }

    repeat(...values) {
      values = values.slice(0, 1);
      const obj = _repeat(...values);
      return obj.spec(this);
    }

    render(...values) {
      return render.apply(this, values);
    }

    toView(...values) {
      return toView.apply(this, values);
    }

    toSpec(...values) {
      return toSpec.apply(this, values);
    }

    toString(...values) {
      return toString.apply(this, values);
    }

  }

  function concat(...args) {
    return new Concat(...args);
  }

  class Hconcat extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      args = flat(args);
      set(this, "hconcat", args);
    }

    autosize(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "autosize", value);
        return obj;
      } else {
        return get(this, "autosize");
      }
    }

    background(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "background", value);
        return obj;
      } else {
        return get(this, "background");
      }
    }

    bounds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bounds", value);
        return obj;
      } else {
        return get(this, "bounds");
      }
    }

    center(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "center", value);
        return obj;
      } else {
        return get(this, "center");
      }
    }

    config(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "config", value);
        return obj;
      } else {
        return get(this, "config");
      }
    }

    datasets(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "datasets", value);
        return obj;
      } else {
        return get(this, "datasets");
      }
    }

    description(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "description", value);
        return obj;
      } else {
        return get(this, "description");
      }
    }

    hconcat(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "hconcat", value);
        return obj;
      } else {
        return get(this, "hconcat");
      }
    }

    name(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "name", value);
        return obj;
      } else {
        return get(this, "name");
      }
    }

    padding(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "padding", value);
        return obj;
      } else {
        return get(this, "padding");
      }
    }

    resolve(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "resolve", value);
        return obj;
      } else {
        return get(this, "resolve");
      }
    }

    spacing(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "spacing", value);
        return obj;
      } else {
        return get(this, "spacing");
      }
    }

    title(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "title", value);
        return obj;
      } else {
        return get(this, "title");
      }
    }

    usermeta(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "usermeta", value);
        return obj;
      } else {
        return get(this, "usermeta");
      }
    }

    data(value) {
      if (arguments.length) {
        const obj = copy(this);
        value = isArray(value) ? {values: raw(value)} : isIterable(value) ? {values: raw(value)} : isString(value) ? {url: value} : value;
        set(obj, "data", value);
        return obj;
      } else {
        return get(this, "data");
      }
    }

    params(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        value = annotate(value, 1);
        set(obj, "params", value);
        return obj;
      } else {
        return get(this, "params");
      }
    }

    transform(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "transform", value);
        return obj;
      } else {
        return get(this, "transform");
      }
    }

    facet(...values) {
      values = values.slice(0, 1);
      const obj = _facet(...values);
      return obj.spec(this);
    }

    repeat(...values) {
      values = values.slice(0, 1);
      const obj = _repeat(...values);
      return obj.spec(this);
    }

    render(...values) {
      return render.apply(this, values);
    }

    toView(...values) {
      return toView.apply(this, values);
    }

    toSpec(...values) {
      return toSpec.apply(this, values);
    }

    toString(...values) {
      return toString.apply(this, values);
    }

  }

  function hconcat(...args) {
    return new Hconcat(...args);
  }

  class Vconcat extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      args = flat(args);
      set(this, "vconcat", args);
    }

    autosize(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "autosize", value);
        return obj;
      } else {
        return get(this, "autosize");
      }
    }

    background(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "background", value);
        return obj;
      } else {
        return get(this, "background");
      }
    }

    bounds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bounds", value);
        return obj;
      } else {
        return get(this, "bounds");
      }
    }

    center(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "center", value);
        return obj;
      } else {
        return get(this, "center");
      }
    }

    config(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "config", value);
        return obj;
      } else {
        return get(this, "config");
      }
    }

    datasets(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "datasets", value);
        return obj;
      } else {
        return get(this, "datasets");
      }
    }

    description(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "description", value);
        return obj;
      } else {
        return get(this, "description");
      }
    }

    name(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "name", value);
        return obj;
      } else {
        return get(this, "name");
      }
    }

    padding(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "padding", value);
        return obj;
      } else {
        return get(this, "padding");
      }
    }

    resolve(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "resolve", value);
        return obj;
      } else {
        return get(this, "resolve");
      }
    }

    spacing(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "spacing", value);
        return obj;
      } else {
        return get(this, "spacing");
      }
    }

    title(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "title", value);
        return obj;
      } else {
        return get(this, "title");
      }
    }

    usermeta(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "usermeta", value);
        return obj;
      } else {
        return get(this, "usermeta");
      }
    }

    vconcat(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "vconcat", value);
        return obj;
      } else {
        return get(this, "vconcat");
      }
    }

    data(value) {
      if (arguments.length) {
        const obj = copy(this);
        value = isArray(value) ? {values: raw(value)} : isIterable(value) ? {values: raw(value)} : isString(value) ? {url: value} : value;
        set(obj, "data", value);
        return obj;
      } else {
        return get(this, "data");
      }
    }

    params(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        value = annotate(value, 1);
        set(obj, "params", value);
        return obj;
      } else {
        return get(this, "params");
      }
    }

    transform(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "transform", value);
        return obj;
      } else {
        return get(this, "transform");
      }
    }

    facet(...values) {
      values = values.slice(0, 1);
      const obj = _facet(...values);
      return obj.spec(this);
    }

    repeat(...values) {
      values = values.slice(0, 1);
      const obj = _repeat(...values);
      return obj.spec(this);
    }

    render(...values) {
      return render.apply(this, values);
    }

    toView(...values) {
      return toView.apply(this, values);
    }

    toSpec(...values) {
      return toSpec.apply(this, values);
    }

    toString(...values) {
      return toString.apply(this, values);
    }

  }

  function vconcat(...args) {
    return new Vconcat(...args);
  }

  class Spec extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      assign(this, ...args);
    }

    align(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "align", value);
        return obj;
      } else {
        return get(this, "align");
      }
    }

    autosize(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "autosize", value);
        return obj;
      } else {
        return get(this, "autosize");
      }
    }

    background(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "background", value);
        return obj;
      } else {
        return get(this, "background");
      }
    }

    bounds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bounds", value);
        return obj;
      } else {
        return get(this, "bounds");
      }
    }

    center(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "center", value);
        return obj;
      } else {
        return get(this, "center");
      }
    }

    config(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "config", value);
        return obj;
      } else {
        return get(this, "config");
      }
    }

    datasets(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "datasets", value);
        return obj;
      } else {
        return get(this, "datasets");
      }
    }

    description(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "description", value);
        return obj;
      } else {
        return get(this, "description");
      }
    }

    encoding(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "encoding", value);
        return obj;
      } else {
        return get(this, "encoding");
      }
    }

    height(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "height", value);
        return obj;
      } else {
        return get(this, "height");
      }
    }

    mark(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "mark", value);
        return obj;
      } else {
        return get(this, "mark");
      }
    }

    name(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "name", value);
        return obj;
      } else {
        return get(this, "name");
      }
    }

    padding(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "padding", value);
        return obj;
      } else {
        return get(this, "padding");
      }
    }

    projection(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "projection", value);
        return obj;
      } else {
        return get(this, "projection");
      }
    }

    resolve(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "resolve", value);
        return obj;
      } else {
        return get(this, "resolve");
      }
    }

    spacing(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "spacing", value);
        return obj;
      } else {
        return get(this, "spacing");
      }
    }

    title(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "title", value);
        return obj;
      } else {
        return get(this, "title");
      }
    }

    usermeta(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "usermeta", value);
        return obj;
      } else {
        return get(this, "usermeta");
      }
    }

    view(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "view", value);
        return obj;
      } else {
        return get(this, "view");
      }
    }

    width(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "width", value);
        return obj;
      } else {
        return get(this, "width");
      }
    }

    columns(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "columns", value);
        return obj;
      } else {
        return get(this, "columns");
      }
    }

    spec(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "spec", value);
        return obj;
      } else {
        return get(this, "spec");
      }
    }

    layer(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "layer", value);
        return obj;
      } else {
        return get(this, "layer");
      }
    }

    concat(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "concat", value);
        return obj;
      } else {
        return get(this, "concat");
      }
    }

    vconcat(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "vconcat", value);
        return obj;
      } else {
        return get(this, "vconcat");
      }
    }

    hconcat(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "hconcat", value);
        return obj;
      } else {
        return get(this, "hconcat");
      }
    }

    data(value) {
      if (arguments.length) {
        const obj = copy(this);
        value = isArray(value) ? {values: raw(value)} : isIterable(value) ? {values: raw(value)} : isString(value) ? {url: value} : value;
        set(obj, "data", value);
        return obj;
      } else {
        return get(this, "data");
      }
    }

    params(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        value = annotate(value, 1);
        set(obj, "params", value);
        return obj;
      } else {
        return get(this, "params");
      }
    }

    transform(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "transform", value);
        return obj;
      } else {
        return get(this, "transform");
      }
    }

    facet(...values) {
      values = values.slice(0, 1);
      const obj = _facet(...values);
      return obj.spec(this);
    }

    repeat(...values) {
      values = values.slice(0, 1);
      const obj = _repeat(...values);
      return obj.spec(this);
    }

    render(...values) {
      return render.apply(this, values);
    }

    toView(...values) {
      return toView.apply(this, values);
    }

    toSpec(...values) {
      return toSpec.apply(this, values);
    }

    toString(...values) {
      return toString.apply(this, values);
    }

  }

  function spec(...args) {
    return new Spec(...args);
  }

  class LookupData extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      if (args[0] !== undefined) set(this, "data", isArray(args[0]) ? {values: raw(args[0])} : isIterable(args[0]) ? {values: raw(args[0])} : isString(args[0]) ? {url: args[0]} : args[0]);
    }

    data(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "data", value);
        return obj;
      } else {
        return get(this, "data");
      }
    }

    fields(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "fields", value);
        return obj;
      } else {
        return get(this, "fields");
      }
    }

    key(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "key", value);
        return obj;
      } else {
        return get(this, "key");
      }
    }

  }

  function lookupData(...args) {
    return new LookupData(...args);
  }

  class Data extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      if (args[0] !== undefined) set(this, "data", isArray(args[0]) ? {values: raw(args[0])} : isIterable(args[0]) ? {values: raw(args[0])} : isString(args[0]) ? {url: args[0]} : args[0]);
    }

    align(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "align", value);
        return obj;
      } else {
        return get(this, "align");
      }
    }

    autosize(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "autosize", value);
        return obj;
      } else {
        return get(this, "autosize");
      }
    }

    background(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "background", value);
        return obj;
      } else {
        return get(this, "background");
      }
    }

    bounds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bounds", value);
        return obj;
      } else {
        return get(this, "bounds");
      }
    }

    center(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "center", value);
        return obj;
      } else {
        return get(this, "center");
      }
    }

    config(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "config", value);
        return obj;
      } else {
        return get(this, "config");
      }
    }

    datasets(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "datasets", value);
        return obj;
      } else {
        return get(this, "datasets");
      }
    }

    description(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "description", value);
        return obj;
      } else {
        return get(this, "description");
      }
    }

    height(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "height", value);
        return obj;
      } else {
        return get(this, "height");
      }
    }

    name(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "name", value);
        return obj;
      } else {
        return get(this, "name");
      }
    }

    padding(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "padding", value);
        return obj;
      } else {
        return get(this, "padding");
      }
    }

    resolve(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "resolve", value);
        return obj;
      } else {
        return get(this, "resolve");
      }
    }

    spacing(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "spacing", value);
        return obj;
      } else {
        return get(this, "spacing");
      }
    }

    title(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "title", value);
        return obj;
      } else {
        return get(this, "title");
      }
    }

    usermeta(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "usermeta", value);
        return obj;
      } else {
        return get(this, "usermeta");
      }
    }

    view(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "view", value);
        return obj;
      } else {
        return get(this, "view");
      }
    }

    width(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "width", value);
        return obj;
      } else {
        return get(this, "width");
      }
    }

    select(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        value = annotate(value, 1);
        set(obj, "params", value);
        return obj;
      } else {
        return get(this, "params");
      }
    }

    project(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "projection", value);
        return obj;
      } else {
        return get(this, "projection");
      }
    }

    encode(...values) {
      if (values.length === 1 && Array.isArray(values[0])) {
        values = values[0];
      }
      if (values.length) {
        const val = get(this, "encoding");
        const obj = copy(this);
        if (val) values = [val].concat(values);
        set(obj, "encoding", merge(1, values));
        return obj;
      } else {
        return get(this, "encoding");
      }
    }

    data(value) {
      if (arguments.length) {
        const obj = copy(this);
        value = isArray(value) ? {values: raw(value)} : isIterable(value) ? {values: raw(value)} : isString(value) ? {url: value} : value;
        set(obj, "data", value);
        return obj;
      } else {
        return get(this, "data");
      }
    }

    params(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        value = annotate(value, 1);
        set(obj, "params", value);
        return obj;
      } else {
        return get(this, "params");
      }
    }

    transform(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "transform", value);
        return obj;
      } else {
        return get(this, "transform");
      }
    }

    fields(...values) {
      let obj = lookupData();
      obj = assign(obj, this);
      return obj.fields(...values);
    }

    key(...values) {
      let obj = lookupData();
      obj = assign(obj, this);
      return obj.key(...values);
    }

    mark(...values) {
      const obj = mark(...values);
      return assign(obj, this);
    }

    layer(...values) {
      const obj = layer(...values);
      return assign(obj, this);
    }

    hconcat(...values) {
      const obj = hconcat(...values);
      return assign(obj, this);
    }

    vconcat(...values) {
      const obj = vconcat(...values);
      return assign(obj, this);
    }

    facet(...values) {
      const obj = _facet(...values);
      return assign(obj, this);
    }

    repeat(...values) {
      const obj = _repeat(...values);
      return assign(obj, this);
    }

    render(...values) {
      return render.apply(this, values);
    }

    toView(...values) {
      return toView.apply(this, values);
    }

    toSpec(...values) {
      return toSpec.apply(this, values);
    }

    toString(...values) {
      return toString.apply(this, values);
    }

  }

  function data(...args) {
    return new Data(...args);
  }

  class UrlData extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      if (args[0] !== undefined) set(this, "url", args[0]);
    }

    format(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "format", value);
        return obj;
      } else {
        return get(this, "format");
      }
    }

    name(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "name", value);
        return obj;
      } else {
        return get(this, "name");
      }
    }

    url(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "url", value);
        return obj;
      } else {
        return get(this, "url");
      }
    }

  }

  function urlData(...args) {
    return new UrlData(...args);
  }

  class InlineData extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      if (args[0] !== undefined) set(this, "values", isArray(args[0]) ? raw(args[0]) : isObject(args[0]) ? raw(args[0]) : args[0]);
    }

    format(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "format", value);
        return obj;
      } else {
        return get(this, "format");
      }
    }

    name(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "name", value);
        return obj;
      } else {
        return get(this, "name");
      }
    }

    values(value) {
      if (arguments.length) {
        const obj = copy(this);
        value = isArray(value) ? raw(value) : isObject(value) ? raw(value) : value;
        set(obj, "values", value);
        return obj;
      } else {
        return get(this, "values");
      }
    }

  }

  function inlineData(...args) {
    return new InlineData(...args);
  }

  class Sequence extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      if (args[0] !== undefined) set(this, "start", args[0]);
      if (args[1] !== undefined) set(this, "stop", args[1]);
      if (args[2] !== undefined) set(this, "step", args[2]);
    }

    as(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    start(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "start", value);
        return obj;
      } else {
        return get(this, "start");
      }
    }

    step(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "step", value);
        return obj;
      } else {
        return get(this, "step");
      }
    }

    stop(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "stop", value);
        return obj;
      } else {
        return get(this, "stop");
      }
    }

    toObject() {
      return {sequence: super.toObject()};
    }

  }

  function sequence(...args) {
    return new Sequence(...args);
  }

  class Sphere extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      assign(this, ...args);
    }

    toObject() {
      return {sphere: super.toObject()};
    }

  }

  function sphere(...args) {
    return new Sphere(...args);
  }

  class Graticule extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      assign(this, ...args);
    }

    extent(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "extent", value);
        return obj;
      } else {
        return get(this, "extent");
      }
    }

    extentMajor(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "extentMajor", value);
        return obj;
      } else {
        return get(this, "extentMajor");
      }
    }

    extentMinor(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "extentMinor", value);
        return obj;
      } else {
        return get(this, "extentMinor");
      }
    }

    precision(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "precision", value);
        return obj;
      } else {
        return get(this, "precision");
      }
    }

    step(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "step", value);
        return obj;
      } else {
        return get(this, "step");
      }
    }

    stepMajor(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "stepMajor", value);
        return obj;
      } else {
        return get(this, "stepMajor");
      }
    }

    stepMinor(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "stepMinor", value);
        return obj;
      } else {
        return get(this, "stepMinor");
      }
    }

    toObject() {
      return {graticule: super.toObject()};
    }

  }

  function graticule(...args) {
    return new Graticule(...args);
  }

  class Csv extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "type", "csv");
      args = args.map(_ => isObject(_) ? {values: _} : isArray(_) ? {values: raw(_)} : isIterable(_) ? {values: raw(_)} : isString(_) ? {url: _} : _);
      assign(this, ...args);
    }

    parse(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "parse", value);
        return obj;
      } else {
        return get(this, "parse");
      }
    }

    type(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "type", value);
        return obj;
      } else {
        return get(this, "type");
      }
    }

    url(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "url", value);
        return obj;
      } else {
        return get(this, "url");
      }
    }

    values(value) {
      if (arguments.length) {
        const obj = copy(this);
        value = isArray(value) ? raw(value) : isObject(value) ? raw(value) : value;
        set(obj, "values", value);
        return obj;
      } else {
        return get(this, "values");
      }
    }

    name(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "name", value);
        return obj;
      } else {
        return get(this, "name");
      }
    }

    toObject() {
      return nest(super.toObject(), ["url","values","name"], "format");
    }

  }

  function csv(...args) {
    return new Csv(...args);
  }

  class Dsv extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "type", "dsv");
      args = args.map(_ => isObject(_) ? {values: _} : isArray(_) ? {values: raw(_)} : isIterable(_) ? {values: raw(_)} : isString(_) ? {url: _} : _);
      assign(this, ...args);
    }

    delimiter(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "delimiter", value);
        return obj;
      } else {
        return get(this, "delimiter");
      }
    }

    parse(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "parse", value);
        return obj;
      } else {
        return get(this, "parse");
      }
    }

    type(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "type", value);
        return obj;
      } else {
        return get(this, "type");
      }
    }

    url(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "url", value);
        return obj;
      } else {
        return get(this, "url");
      }
    }

    values(value) {
      if (arguments.length) {
        const obj = copy(this);
        value = isArray(value) ? raw(value) : isObject(value) ? raw(value) : value;
        set(obj, "values", value);
        return obj;
      } else {
        return get(this, "values");
      }
    }

    name(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "name", value);
        return obj;
      } else {
        return get(this, "name");
      }
    }

    toObject() {
      return nest(super.toObject(), ["url","values","name"], "format");
    }

  }

  function dsv(...args) {
    return new Dsv(...args);
  }

  class Json extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "type", "json");
      args = args.map(_ => isObject(_) ? {values: _} : isArray(_) ? {values: raw(_)} : isIterable(_) ? {values: raw(_)} : isString(_) ? {url: _} : _);
      assign(this, ...args);
    }

    parse(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "parse", value);
        return obj;
      } else {
        return get(this, "parse");
      }
    }

    property(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "property", value);
        return obj;
      } else {
        return get(this, "property");
      }
    }

    type(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "type", value);
        return obj;
      } else {
        return get(this, "type");
      }
    }

    url(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "url", value);
        return obj;
      } else {
        return get(this, "url");
      }
    }

    values(value) {
      if (arguments.length) {
        const obj = copy(this);
        value = isArray(value) ? raw(value) : isObject(value) ? raw(value) : value;
        set(obj, "values", value);
        return obj;
      } else {
        return get(this, "values");
      }
    }

    name(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "name", value);
        return obj;
      } else {
        return get(this, "name");
      }
    }

    toObject() {
      return nest(super.toObject(), ["url","values","name"], "format");
    }

  }

  function json(...args) {
    return new Json(...args);
  }

  class Topojson extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "type", "topojson");
      args = args.map(_ => isObject(_) ? {values: _} : isArray(_) ? {values: raw(_)} : isIterable(_) ? {values: raw(_)} : isString(_) ? {url: _} : _);
      assign(this, ...args);
    }

    feature(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "feature", value);
        return obj;
      } else {
        return get(this, "feature");
      }
    }

    mesh(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "mesh", value);
        return obj;
      } else {
        return get(this, "mesh");
      }
    }

    parse(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "parse", value);
        return obj;
      } else {
        return get(this, "parse");
      }
    }

    type(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "type", value);
        return obj;
      } else {
        return get(this, "type");
      }
    }

    url(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "url", value);
        return obj;
      } else {
        return get(this, "url");
      }
    }

    values(value) {
      if (arguments.length) {
        const obj = copy(this);
        value = isArray(value) ? raw(value) : isObject(value) ? raw(value) : value;
        set(obj, "values", value);
        return obj;
      } else {
        return get(this, "values");
      }
    }

    name(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "name", value);
        return obj;
      } else {
        return get(this, "name");
      }
    }

    toObject() {
      return nest(super.toObject(), ["url","values","name"], "format");
    }

  }

  function topojson(...args) {
    return new Topojson(...args);
  }

  class Tsv extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "type", "tsv");
      args = args.map(_ => isObject(_) ? {values: _} : isArray(_) ? {values: raw(_)} : isIterable(_) ? {values: raw(_)} : isString(_) ? {url: _} : _);
      assign(this, ...args);
    }

    parse(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "parse", value);
        return obj;
      } else {
        return get(this, "parse");
      }
    }

    type(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "type", value);
        return obj;
      } else {
        return get(this, "type");
      }
    }

    url(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "url", value);
        return obj;
      } else {
        return get(this, "url");
      }
    }

    values(value) {
      if (arguments.length) {
        const obj = copy(this);
        value = isArray(value) ? raw(value) : isObject(value) ? raw(value) : value;
        set(obj, "values", value);
        return obj;
      } else {
        return get(this, "values");
      }
    }

    name(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "name", value);
        return obj;
      } else {
        return get(this, "name");
      }
    }

    toObject() {
      return nest(super.toObject(), ["url","values","name"], "format");
    }

  }

  function tsv(...args) {
    return new Tsv(...args);
  }

  class CsvFormat extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "type", "csv");
      assign(this, ...args);
    }

    parse(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "parse", value);
        return obj;
      } else {
        return get(this, "parse");
      }
    }

    type(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "type", value);
        return obj;
      } else {
        return get(this, "type");
      }
    }

  }

  function csvFormat(...args) {
    return new CsvFormat(...args);
  }

  class DsvFormat extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "type", "dsv");
      assign(this, ...args);
    }

    delimiter(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "delimiter", value);
        return obj;
      } else {
        return get(this, "delimiter");
      }
    }

    parse(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "parse", value);
        return obj;
      } else {
        return get(this, "parse");
      }
    }

    type(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "type", value);
        return obj;
      } else {
        return get(this, "type");
      }
    }

  }

  function dsvFormat(...args) {
    return new DsvFormat(...args);
  }

  class JsonFormat extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "type", "json");
      assign(this, ...args);
    }

    parse(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "parse", value);
        return obj;
      } else {
        return get(this, "parse");
      }
    }

    property(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "property", value);
        return obj;
      } else {
        return get(this, "property");
      }
    }

    type(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "type", value);
        return obj;
      } else {
        return get(this, "type");
      }
    }

  }

  function jsonFormat(...args) {
    return new JsonFormat(...args);
  }

  class TopojsonFormat extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "type", "topojson");
      assign(this, ...args);
    }

    feature(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "feature", value);
        return obj;
      } else {
        return get(this, "feature");
      }
    }

    mesh(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "mesh", value);
        return obj;
      } else {
        return get(this, "mesh");
      }
    }

    parse(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "parse", value);
        return obj;
      } else {
        return get(this, "parse");
      }
    }

    type(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "type", value);
        return obj;
      } else {
        return get(this, "type");
      }
    }

  }

  function topojsonFormat(...args) {
    return new TopojsonFormat(...args);
  }

  class TsvFormat extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "type", "tsv");
      assign(this, ...args);
    }

    parse(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "parse", value);
        return obj;
      } else {
        return get(this, "parse");
      }
    }

    type(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "type", value);
        return obj;
      } else {
        return get(this, "type");
      }
    }

  }

  function tsvFormat(...args) {
    return new TsvFormat(...args);
  }

  class LookupSelection extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      if (args[0] !== undefined) set(this, "param", isObject(args[0]) ? prop(args[0], "name") : isString(args[0]) ? args[0] : args[0]);
    }

    fields(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "fields", value);
        return obj;
      } else {
        return get(this, "fields");
      }
    }

    key(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "key", value);
        return obj;
      } else {
        return get(this, "key");
      }
    }

    param(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "param", value);
        return obj;
      } else {
        return get(this, "param");
      }
    }

  }

  function lookupSelection(...args) {
    return new LookupSelection(...args);
  }

  class Angle extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      assign(this, ...args);
    }

    aggregate(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "aggregate", value);
        return obj;
      } else {
        return get(this, "aggregate");
      }
    }

    bandPosition(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bandPosition", value);
        return obj;
      } else {
        return get(this, "bandPosition");
      }
    }

    bin(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bin", value);
        return obj;
      } else {
        return get(this, "bin");
      }
    }

    condition(...value) {
      if (arguments.length) {
        const obj = copy(this);
        if (value.length === 1 && !Array.isArray(value[0])) {
          value = value[0];
        } else {
          value = flat(value);
        }
        set(obj, "condition", value);
        return obj;
      } else {
        return get(this, "condition");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    legend(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "legend", value);
        return obj;
      } else {
        return get(this, "legend");
      }
    }

    scale(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "scale", value);
        return obj;
      } else {
        return get(this, "scale");
      }
    }

    sort(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "sort", value);
        return obj;
      } else {
        return get(this, "sort");
      }
    }

    timeUnit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "timeUnit", value);
        return obj;
      } else {
        return get(this, "timeUnit");
      }
    }

    title(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "title", value);
        return obj;
      } else {
        return get(this, "title");
      }
    }

    type(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "type", value);
        return obj;
      } else {
        return get(this, "type");
      }
    }

    datum(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "datum", value);
        return obj;
      } else {
        return get(this, "datum");
      }
    }

    value(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "value", value);
        return obj;
      } else {
        return get(this, "value");
      }
    }

    fieldN(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "nominal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldO(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "ordinal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldT(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    if(...values) {
      if (values.length) {
        values[0] = {test: values[0]};
      }
      if (arguments.length) {
        const val = get(this, "condition") || [];
        const obj = copy(this);
        values = [].concat(val, merge(0, values));
        set(obj, "condition", values.length > 1 ? values : values[0]);
        return obj;
      } else {
        return get(this, "condition");
      }
    }

    count() {
      const obj = copy(this);
      set(obj, "type", "quantitative");
      set(obj, "aggregate", "count");
      return obj;
    }

    valid(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "valid");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    missing(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "missing");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    distinct(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "distinct");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    sum(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "sum");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    mean(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "mean");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    product(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "product");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    average(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "average");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    variance(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "variance");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    variancep(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "variancep");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stdev(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stdev");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stdevp(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stdevp");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stderr(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stderr");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    median(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "median");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    q1(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "q1");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    q3(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "q3");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    ci0(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "ci0");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    ci1(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "ci1");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    min(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "min");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    max(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "max");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    argmin(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "argmin");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    argmax(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "argmax");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    year(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "year");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    quarter(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "quarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    month(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "month");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    day(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "day");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    date(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "date");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    hours(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    minutes(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "minutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    seconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "seconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    milliseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "milliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    yearmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "quartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "monthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "monthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "minutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeSMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "secondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcyear(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyear");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcquarter(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcday(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcday");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcdate(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utchours(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcminutes(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcmilliseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcyearmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcSMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcsecondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    toObject(flag) {
      return flag ? {angle: super.toObject()} : super.toObject();
    }

  }

  function angle(...args) {
    return new Angle(...args);
  }

  class Color extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      assign(this, ...args);
    }

    aggregate(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "aggregate", value);
        return obj;
      } else {
        return get(this, "aggregate");
      }
    }

    bandPosition(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bandPosition", value);
        return obj;
      } else {
        return get(this, "bandPosition");
      }
    }

    bin(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bin", value);
        return obj;
      } else {
        return get(this, "bin");
      }
    }

    condition(...value) {
      if (arguments.length) {
        const obj = copy(this);
        if (value.length === 1 && !Array.isArray(value[0])) {
          value = value[0];
        } else {
          value = flat(value);
        }
        set(obj, "condition", value);
        return obj;
      } else {
        return get(this, "condition");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    legend(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "legend", value);
        return obj;
      } else {
        return get(this, "legend");
      }
    }

    scale(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "scale", value);
        return obj;
      } else {
        return get(this, "scale");
      }
    }

    sort(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "sort", value);
        return obj;
      } else {
        return get(this, "sort");
      }
    }

    timeUnit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "timeUnit", value);
        return obj;
      } else {
        return get(this, "timeUnit");
      }
    }

    title(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "title", value);
        return obj;
      } else {
        return get(this, "title");
      }
    }

    type(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "type", value);
        return obj;
      } else {
        return get(this, "type");
      }
    }

    datum(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "datum", value);
        return obj;
      } else {
        return get(this, "datum");
      }
    }

    value(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "value", value);
        return obj;
      } else {
        return get(this, "value");
      }
    }

    fieldN(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "nominal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldO(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "ordinal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldT(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    if(...values) {
      if (values.length) {
        values[0] = {test: values[0]};
      }
      if (arguments.length) {
        const val = get(this, "condition") || [];
        const obj = copy(this);
        values = [].concat(val, merge(0, values));
        set(obj, "condition", values.length > 1 ? values : values[0]);
        return obj;
      } else {
        return get(this, "condition");
      }
    }

    count() {
      const obj = copy(this);
      set(obj, "type", "quantitative");
      set(obj, "aggregate", "count");
      return obj;
    }

    valid(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "valid");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    missing(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "missing");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    distinct(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "distinct");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    sum(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "sum");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    mean(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "mean");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    product(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "product");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    average(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "average");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    variance(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "variance");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    variancep(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "variancep");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stdev(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stdev");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stdevp(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stdevp");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stderr(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stderr");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    median(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "median");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    q1(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "q1");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    q3(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "q3");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    ci0(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "ci0");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    ci1(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "ci1");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    min(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "min");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    max(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "max");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    argmin(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "argmin");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    argmax(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "argmax");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    year(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "year");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    quarter(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "quarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    month(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "month");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    day(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "day");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    date(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "date");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    hours(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    minutes(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "minutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    seconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "seconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    milliseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "milliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    yearmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "quartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "monthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "monthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "minutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeSMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "secondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcyear(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyear");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcquarter(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcday(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcday");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcdate(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utchours(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcminutes(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcmilliseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcyearmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcSMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcsecondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    toObject(flag) {
      return flag ? {color: super.toObject()} : super.toObject();
    }

  }

  function color(...args) {
    return new Color(...args);
  }

  class Column extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      args = args.map(_ => isString(_) ? {field: _, type: "ordinal"} : _);
      assign(this, ...args);
    }

    aggregate(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "aggregate", value);
        return obj;
      } else {
        return get(this, "aggregate");
      }
    }

    align(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "align", value);
        return obj;
      } else {
        return get(this, "align");
      }
    }

    bandPosition(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bandPosition", value);
        return obj;
      } else {
        return get(this, "bandPosition");
      }
    }

    bin(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bin", value);
        return obj;
      } else {
        return get(this, "bin");
      }
    }

    center(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "center", value);
        return obj;
      } else {
        return get(this, "center");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    header(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "header", value);
        return obj;
      } else {
        return get(this, "header");
      }
    }

    sort(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "sort", value);
        return obj;
      } else {
        return get(this, "sort");
      }
    }

    spacing(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "spacing", value);
        return obj;
      } else {
        return get(this, "spacing");
      }
    }

    timeUnit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "timeUnit", value);
        return obj;
      } else {
        return get(this, "timeUnit");
      }
    }

    title(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "title", value);
        return obj;
      } else {
        return get(this, "title");
      }
    }

    type(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "type", value);
        return obj;
      } else {
        return get(this, "type");
      }
    }

    fieldN(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "nominal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldO(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "ordinal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldT(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    if(...values) {
      if (values.length) {
        values[0] = {test: values[0]};
      }
      if (arguments.length) {
        const val = get(this, "condition") || [];
        const obj = copy(this);
        values = [].concat(val, merge(0, values));
        set(obj, "condition", values.length > 1 ? values : values[0]);
        return obj;
      } else {
        return get(this, "condition");
      }
    }

    count() {
      const obj = copy(this);
      set(obj, "type", "quantitative");
      set(obj, "aggregate", "count");
      return obj;
    }

    valid(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "valid");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    missing(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "missing");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    distinct(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "distinct");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    sum(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "sum");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    mean(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "mean");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    product(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "product");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    average(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "average");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    variance(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "variance");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    variancep(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "variancep");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stdev(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stdev");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stdevp(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stdevp");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stderr(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stderr");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    median(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "median");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    q1(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "q1");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    q3(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "q3");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    ci0(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "ci0");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    ci1(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "ci1");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    min(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "min");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    max(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "max");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    argmin(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "argmin");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    argmax(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "argmax");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    year(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "year");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    quarter(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "quarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    month(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "month");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    day(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "day");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    date(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "date");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    hours(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    minutes(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "minutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    seconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "seconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    milliseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "milliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    yearmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "quartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "monthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "monthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "minutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeSMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "secondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcyear(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyear");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcquarter(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcday(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcday");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcdate(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utchours(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcminutes(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcmilliseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcyearmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcSMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcsecondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    toObject(flag) {
      return flag ? {column: super.toObject()} : super.toObject();
    }

  }

  function column(...args) {
    return new Column(...args);
  }

  class Description extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      assign(this, ...args);
    }

    aggregate(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "aggregate", value);
        return obj;
      } else {
        return get(this, "aggregate");
      }
    }

    bandPosition(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bandPosition", value);
        return obj;
      } else {
        return get(this, "bandPosition");
      }
    }

    bin(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bin", value);
        return obj;
      } else {
        return get(this, "bin");
      }
    }

    condition(...value) {
      if (arguments.length) {
        const obj = copy(this);
        if (value.length === 1 && !Array.isArray(value[0])) {
          value = value[0];
        } else {
          value = flat(value);
        }
        set(obj, "condition", value);
        return obj;
      } else {
        return get(this, "condition");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    format(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "format", value);
        return obj;
      } else {
        return get(this, "format");
      }
    }

    formatType(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "formatType", value);
        return obj;
      } else {
        return get(this, "formatType");
      }
    }

    timeUnit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "timeUnit", value);
        return obj;
      } else {
        return get(this, "timeUnit");
      }
    }

    title(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "title", value);
        return obj;
      } else {
        return get(this, "title");
      }
    }

    type(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "type", value);
        return obj;
      } else {
        return get(this, "type");
      }
    }

    value(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "value", value);
        return obj;
      } else {
        return get(this, "value");
      }
    }

    fieldN(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "nominal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldO(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "ordinal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldT(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    if(...values) {
      if (values.length) {
        values[0] = {test: values[0]};
      }
      if (arguments.length) {
        const val = get(this, "condition") || [];
        const obj = copy(this);
        values = [].concat(val, merge(0, values));
        set(obj, "condition", values.length > 1 ? values : values[0]);
        return obj;
      } else {
        return get(this, "condition");
      }
    }

    count() {
      const obj = copy(this);
      set(obj, "type", "quantitative");
      set(obj, "aggregate", "count");
      return obj;
    }

    valid(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "valid");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    missing(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "missing");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    distinct(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "distinct");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    sum(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "sum");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    mean(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "mean");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    product(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "product");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    average(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "average");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    variance(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "variance");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    variancep(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "variancep");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stdev(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stdev");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stdevp(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stdevp");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stderr(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stderr");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    median(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "median");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    q1(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "q1");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    q3(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "q3");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    ci0(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "ci0");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    ci1(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "ci1");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    min(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "min");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    max(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "max");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    argmin(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "argmin");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    argmax(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "argmax");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    year(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "year");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    quarter(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "quarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    month(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "month");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    day(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "day");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    date(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "date");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    hours(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    minutes(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "minutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    seconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "seconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    milliseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "milliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    yearmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "quartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "monthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "monthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "minutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeSMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "secondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcyear(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyear");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcquarter(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcday(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcday");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcdate(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utchours(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcminutes(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcmilliseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcyearmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcSMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcsecondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    toObject(flag) {
      return flag ? {description: super.toObject()} : super.toObject();
    }

  }

  function description(...args) {
    return new Description(...args);
  }

  class Detail extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      args = args.map(_ => isArray(_) ? _.map(_ => { return isString(_) ? {field: _, type: "nominal"} : _; }) : isString(_) ? {field: _, type: "nominal"} : _);
      assign(this, ...args);
    }

    aggregate(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "aggregate", value);
        return obj;
      } else {
        return get(this, "aggregate");
      }
    }

    bandPosition(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bandPosition", value);
        return obj;
      } else {
        return get(this, "bandPosition");
      }
    }

    bin(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bin", value);
        return obj;
      } else {
        return get(this, "bin");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeUnit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "timeUnit", value);
        return obj;
      } else {
        return get(this, "timeUnit");
      }
    }

    title(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "title", value);
        return obj;
      } else {
        return get(this, "title");
      }
    }

    type(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "type", value);
        return obj;
      } else {
        return get(this, "type");
      }
    }

    fieldN(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "nominal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldO(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "ordinal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldT(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    if(...values) {
      if (values.length) {
        values[0] = {test: values[0]};
      }
      if (arguments.length) {
        const val = get(this, "condition") || [];
        const obj = copy(this);
        values = [].concat(val, merge(0, values));
        set(obj, "condition", values.length > 1 ? values : values[0]);
        return obj;
      } else {
        return get(this, "condition");
      }
    }

    count() {
      const obj = copy(this);
      set(obj, "type", "quantitative");
      set(obj, "aggregate", "count");
      return obj;
    }

    valid(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "valid");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    missing(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "missing");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    distinct(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "distinct");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    sum(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "sum");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    mean(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "mean");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    product(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "product");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    average(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "average");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    variance(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "variance");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    variancep(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "variancep");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stdev(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stdev");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stdevp(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stdevp");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stderr(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stderr");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    median(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "median");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    q1(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "q1");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    q3(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "q3");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    ci0(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "ci0");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    ci1(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "ci1");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    min(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "min");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    max(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "max");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    argmin(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "argmin");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    argmax(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "argmax");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    year(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "year");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    quarter(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "quarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    month(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "month");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    day(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "day");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    date(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "date");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    hours(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    minutes(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "minutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    seconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "seconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    milliseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "milliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    yearmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "quartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "monthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "monthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "minutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeSMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "secondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcyear(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyear");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcquarter(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcday(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcday");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcdate(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utchours(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcminutes(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcmilliseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcyearmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcSMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcsecondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    toObject(flag) {
      return flag ? {detail: super.toObject()} : super.toObject();
    }

  }

  function detail(...args) {
    return new Detail(...args);
  }

  class Facet extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      args = args.map(_ => isString(_) ? {field: _, type: "ordinal"} : _);
      assign(this, ...args);
    }

    aggregate(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "aggregate", value);
        return obj;
      } else {
        return get(this, "aggregate");
      }
    }

    align(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "align", value);
        return obj;
      } else {
        return get(this, "align");
      }
    }

    bandPosition(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bandPosition", value);
        return obj;
      } else {
        return get(this, "bandPosition");
      }
    }

    bin(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bin", value);
        return obj;
      } else {
        return get(this, "bin");
      }
    }

    bounds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bounds", value);
        return obj;
      } else {
        return get(this, "bounds");
      }
    }

    center(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "center", value);
        return obj;
      } else {
        return get(this, "center");
      }
    }

    columns(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "columns", value);
        return obj;
      } else {
        return get(this, "columns");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    header(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "header", value);
        return obj;
      } else {
        return get(this, "header");
      }
    }

    sort(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "sort", value);
        return obj;
      } else {
        return get(this, "sort");
      }
    }

    spacing(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "spacing", value);
        return obj;
      } else {
        return get(this, "spacing");
      }
    }

    timeUnit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "timeUnit", value);
        return obj;
      } else {
        return get(this, "timeUnit");
      }
    }

    title(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "title", value);
        return obj;
      } else {
        return get(this, "title");
      }
    }

    type(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "type", value);
        return obj;
      } else {
        return get(this, "type");
      }
    }

    fieldN(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "nominal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldO(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "ordinal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldT(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    if(...values) {
      if (values.length) {
        values[0] = {test: values[0]};
      }
      if (arguments.length) {
        const val = get(this, "condition") || [];
        const obj = copy(this);
        values = [].concat(val, merge(0, values));
        set(obj, "condition", values.length > 1 ? values : values[0]);
        return obj;
      } else {
        return get(this, "condition");
      }
    }

    count() {
      const obj = copy(this);
      set(obj, "type", "quantitative");
      set(obj, "aggregate", "count");
      return obj;
    }

    valid(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "valid");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    missing(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "missing");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    distinct(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "distinct");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    sum(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "sum");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    mean(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "mean");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    product(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "product");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    average(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "average");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    variance(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "variance");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    variancep(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "variancep");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stdev(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stdev");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stdevp(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stdevp");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stderr(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stderr");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    median(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "median");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    q1(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "q1");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    q3(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "q3");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    ci0(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "ci0");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    ci1(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "ci1");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    min(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "min");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    max(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "max");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    argmin(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "argmin");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    argmax(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "argmax");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    year(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "year");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    quarter(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "quarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    month(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "month");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    day(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "day");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    date(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "date");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    hours(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    minutes(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "minutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    seconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "seconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    milliseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "milliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    yearmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "quartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "monthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "monthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "minutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeSMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "secondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcyear(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyear");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcquarter(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcday(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcday");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcdate(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utchours(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcminutes(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcmilliseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcyearmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcSMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcsecondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    toObject(flag) {
      return flag ? {facet: super.toObject()} : super.toObject();
    }

  }

  function facet(...args) {
    return new Facet(...args);
  }

  class Fill extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      assign(this, ...args);
    }

    aggregate(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "aggregate", value);
        return obj;
      } else {
        return get(this, "aggregate");
      }
    }

    bandPosition(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bandPosition", value);
        return obj;
      } else {
        return get(this, "bandPosition");
      }
    }

    bin(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bin", value);
        return obj;
      } else {
        return get(this, "bin");
      }
    }

    condition(...value) {
      if (arguments.length) {
        const obj = copy(this);
        if (value.length === 1 && !Array.isArray(value[0])) {
          value = value[0];
        } else {
          value = flat(value);
        }
        set(obj, "condition", value);
        return obj;
      } else {
        return get(this, "condition");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    legend(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "legend", value);
        return obj;
      } else {
        return get(this, "legend");
      }
    }

    scale(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "scale", value);
        return obj;
      } else {
        return get(this, "scale");
      }
    }

    sort(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "sort", value);
        return obj;
      } else {
        return get(this, "sort");
      }
    }

    timeUnit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "timeUnit", value);
        return obj;
      } else {
        return get(this, "timeUnit");
      }
    }

    title(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "title", value);
        return obj;
      } else {
        return get(this, "title");
      }
    }

    type(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "type", value);
        return obj;
      } else {
        return get(this, "type");
      }
    }

    datum(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "datum", value);
        return obj;
      } else {
        return get(this, "datum");
      }
    }

    value(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "value", value);
        return obj;
      } else {
        return get(this, "value");
      }
    }

    fieldN(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "nominal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldO(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "ordinal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldT(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    if(...values) {
      if (values.length) {
        values[0] = {test: values[0]};
      }
      if (arguments.length) {
        const val = get(this, "condition") || [];
        const obj = copy(this);
        values = [].concat(val, merge(0, values));
        set(obj, "condition", values.length > 1 ? values : values[0]);
        return obj;
      } else {
        return get(this, "condition");
      }
    }

    count() {
      const obj = copy(this);
      set(obj, "type", "quantitative");
      set(obj, "aggregate", "count");
      return obj;
    }

    valid(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "valid");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    missing(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "missing");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    distinct(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "distinct");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    sum(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "sum");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    mean(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "mean");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    product(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "product");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    average(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "average");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    variance(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "variance");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    variancep(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "variancep");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stdev(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stdev");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stdevp(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stdevp");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stderr(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stderr");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    median(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "median");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    q1(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "q1");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    q3(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "q3");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    ci0(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "ci0");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    ci1(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "ci1");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    min(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "min");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    max(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "max");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    argmin(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "argmin");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    argmax(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "argmax");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    year(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "year");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    quarter(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "quarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    month(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "month");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    day(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "day");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    date(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "date");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    hours(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    minutes(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "minutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    seconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "seconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    milliseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "milliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    yearmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "quartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "monthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "monthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "minutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeSMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "secondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcyear(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyear");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcquarter(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcday(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcday");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcdate(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utchours(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcminutes(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcmilliseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcyearmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcSMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcsecondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    toObject(flag) {
      return flag ? {fill: super.toObject()} : super.toObject();
    }

  }

  function fill(...args) {
    return new Fill(...args);
  }

  class FillOpacity extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      assign(this, ...args);
    }

    aggregate(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "aggregate", value);
        return obj;
      } else {
        return get(this, "aggregate");
      }
    }

    bandPosition(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bandPosition", value);
        return obj;
      } else {
        return get(this, "bandPosition");
      }
    }

    bin(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bin", value);
        return obj;
      } else {
        return get(this, "bin");
      }
    }

    condition(...value) {
      if (arguments.length) {
        const obj = copy(this);
        if (value.length === 1 && !Array.isArray(value[0])) {
          value = value[0];
        } else {
          value = flat(value);
        }
        set(obj, "condition", value);
        return obj;
      } else {
        return get(this, "condition");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    legend(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "legend", value);
        return obj;
      } else {
        return get(this, "legend");
      }
    }

    scale(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "scale", value);
        return obj;
      } else {
        return get(this, "scale");
      }
    }

    sort(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "sort", value);
        return obj;
      } else {
        return get(this, "sort");
      }
    }

    timeUnit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "timeUnit", value);
        return obj;
      } else {
        return get(this, "timeUnit");
      }
    }

    title(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "title", value);
        return obj;
      } else {
        return get(this, "title");
      }
    }

    type(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "type", value);
        return obj;
      } else {
        return get(this, "type");
      }
    }

    datum(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "datum", value);
        return obj;
      } else {
        return get(this, "datum");
      }
    }

    value(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "value", value);
        return obj;
      } else {
        return get(this, "value");
      }
    }

    fieldN(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "nominal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldO(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "ordinal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldT(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    if(...values) {
      if (values.length) {
        values[0] = {test: values[0]};
      }
      if (arguments.length) {
        const val = get(this, "condition") || [];
        const obj = copy(this);
        values = [].concat(val, merge(0, values));
        set(obj, "condition", values.length > 1 ? values : values[0]);
        return obj;
      } else {
        return get(this, "condition");
      }
    }

    count() {
      const obj = copy(this);
      set(obj, "type", "quantitative");
      set(obj, "aggregate", "count");
      return obj;
    }

    valid(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "valid");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    missing(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "missing");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    distinct(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "distinct");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    sum(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "sum");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    mean(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "mean");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    product(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "product");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    average(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "average");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    variance(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "variance");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    variancep(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "variancep");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stdev(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stdev");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stdevp(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stdevp");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stderr(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stderr");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    median(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "median");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    q1(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "q1");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    q3(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "q3");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    ci0(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "ci0");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    ci1(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "ci1");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    min(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "min");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    max(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "max");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    argmin(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "argmin");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    argmax(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "argmax");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    year(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "year");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    quarter(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "quarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    month(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "month");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    day(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "day");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    date(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "date");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    hours(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    minutes(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "minutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    seconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "seconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    milliseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "milliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    yearmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "quartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "monthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "monthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "minutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeSMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "secondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcyear(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyear");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcquarter(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcday(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcday");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcdate(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utchours(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcminutes(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcmilliseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcyearmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcSMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcsecondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    toObject(flag) {
      return flag ? {fillOpacity: super.toObject()} : super.toObject();
    }

  }

  function fillOpacity(...args) {
    return new FillOpacity(...args);
  }

  class Href extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      args = args.map(_ => isString(_) ? {field: _, type: "nominal"} : _);
      assign(this, ...args);
    }

    aggregate(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "aggregate", value);
        return obj;
      } else {
        return get(this, "aggregate");
      }
    }

    bandPosition(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bandPosition", value);
        return obj;
      } else {
        return get(this, "bandPosition");
      }
    }

    bin(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bin", value);
        return obj;
      } else {
        return get(this, "bin");
      }
    }

    condition(...value) {
      if (arguments.length) {
        const obj = copy(this);
        if (value.length === 1 && !Array.isArray(value[0])) {
          value = value[0];
        } else {
          value = flat(value);
        }
        set(obj, "condition", value);
        return obj;
      } else {
        return get(this, "condition");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    format(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "format", value);
        return obj;
      } else {
        return get(this, "format");
      }
    }

    formatType(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "formatType", value);
        return obj;
      } else {
        return get(this, "formatType");
      }
    }

    timeUnit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "timeUnit", value);
        return obj;
      } else {
        return get(this, "timeUnit");
      }
    }

    title(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "title", value);
        return obj;
      } else {
        return get(this, "title");
      }
    }

    type(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "type", value);
        return obj;
      } else {
        return get(this, "type");
      }
    }

    value(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "value", value);
        return obj;
      } else {
        return get(this, "value");
      }
    }

    fieldN(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "nominal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldO(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "ordinal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldT(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    if(...values) {
      if (values.length) {
        values[0] = {test: values[0]};
      }
      if (arguments.length) {
        const val = get(this, "condition") || [];
        const obj = copy(this);
        values = [].concat(val, merge(0, values));
        set(obj, "condition", values.length > 1 ? values : values[0]);
        return obj;
      } else {
        return get(this, "condition");
      }
    }

    count() {
      const obj = copy(this);
      set(obj, "type", "quantitative");
      set(obj, "aggregate", "count");
      return obj;
    }

    valid(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "valid");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    missing(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "missing");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    distinct(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "distinct");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    sum(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "sum");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    mean(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "mean");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    product(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "product");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    average(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "average");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    variance(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "variance");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    variancep(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "variancep");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stdev(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stdev");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stdevp(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stdevp");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stderr(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stderr");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    median(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "median");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    q1(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "q1");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    q3(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "q3");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    ci0(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "ci0");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    ci1(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "ci1");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    min(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "min");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    max(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "max");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    argmin(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "argmin");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    argmax(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "argmax");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    year(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "year");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    quarter(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "quarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    month(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "month");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    day(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "day");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    date(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "date");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    hours(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    minutes(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "minutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    seconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "seconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    milliseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "milliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    yearmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "quartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "monthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "monthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "minutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeSMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "secondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcyear(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyear");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcquarter(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcday(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcday");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcdate(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utchours(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcminutes(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcmilliseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcyearmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcSMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcsecondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    toObject(flag) {
      return flag ? {href: super.toObject()} : super.toObject();
    }

  }

  function href(...args) {
    return new Href(...args);
  }

  class Key extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      args = args.map(_ => isString(_) ? {field: _, type: "nominal"} : _);
      assign(this, ...args);
    }

    aggregate(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "aggregate", value);
        return obj;
      } else {
        return get(this, "aggregate");
      }
    }

    bandPosition(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bandPosition", value);
        return obj;
      } else {
        return get(this, "bandPosition");
      }
    }

    bin(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bin", value);
        return obj;
      } else {
        return get(this, "bin");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeUnit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "timeUnit", value);
        return obj;
      } else {
        return get(this, "timeUnit");
      }
    }

    title(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "title", value);
        return obj;
      } else {
        return get(this, "title");
      }
    }

    type(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "type", value);
        return obj;
      } else {
        return get(this, "type");
      }
    }

    fieldN(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "nominal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldO(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "ordinal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldT(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    if(...values) {
      if (values.length) {
        values[0] = {test: values[0]};
      }
      if (arguments.length) {
        const val = get(this, "condition") || [];
        const obj = copy(this);
        values = [].concat(val, merge(0, values));
        set(obj, "condition", values.length > 1 ? values : values[0]);
        return obj;
      } else {
        return get(this, "condition");
      }
    }

    count() {
      const obj = copy(this);
      set(obj, "type", "quantitative");
      set(obj, "aggregate", "count");
      return obj;
    }

    valid(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "valid");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    missing(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "missing");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    distinct(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "distinct");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    sum(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "sum");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    mean(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "mean");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    product(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "product");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    average(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "average");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    variance(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "variance");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    variancep(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "variancep");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stdev(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stdev");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stdevp(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stdevp");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stderr(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stderr");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    median(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "median");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    q1(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "q1");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    q3(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "q3");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    ci0(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "ci0");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    ci1(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "ci1");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    min(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "min");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    max(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "max");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    argmin(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "argmin");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    argmax(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "argmax");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    year(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "year");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    quarter(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "quarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    month(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "month");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    day(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "day");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    date(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "date");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    hours(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    minutes(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "minutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    seconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "seconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    milliseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "milliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    yearmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "quartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "monthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "monthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "minutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeSMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "secondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcyear(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyear");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcquarter(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcday(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcday");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcdate(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utchours(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcminutes(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcmilliseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcyearmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcSMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcsecondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    toObject(flag) {
      return flag ? {key: super.toObject()} : super.toObject();
    }

  }

  function key(...args) {
    return new Key(...args);
  }

  class Latitude extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      args = args.map(_ => isString(_) ? {field: _, type: "quantitative"} : _);
      assign(this, ...args);
    }

    aggregate(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "aggregate", value);
        return obj;
      } else {
        return get(this, "aggregate");
      }
    }

    bandPosition(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bandPosition", value);
        return obj;
      } else {
        return get(this, "bandPosition");
      }
    }

    bin(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bin", value);
        return obj;
      } else {
        return get(this, "bin");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeUnit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "timeUnit", value);
        return obj;
      } else {
        return get(this, "timeUnit");
      }
    }

    title(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "title", value);
        return obj;
      } else {
        return get(this, "title");
      }
    }

    type(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "type", value);
        return obj;
      } else {
        return get(this, "type");
      }
    }

    datum(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "datum", value);
        return obj;
      } else {
        return get(this, "datum");
      }
    }

    fieldN(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "nominal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldO(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "ordinal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldT(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    if(...values) {
      if (values.length) {
        values[0] = {test: values[0]};
      }
      if (arguments.length) {
        const val = get(this, "condition") || [];
        const obj = copy(this);
        values = [].concat(val, merge(0, values));
        set(obj, "condition", values.length > 1 ? values : values[0]);
        return obj;
      } else {
        return get(this, "condition");
      }
    }

    count() {
      const obj = copy(this);
      set(obj, "type", "quantitative");
      set(obj, "aggregate", "count");
      return obj;
    }

    valid(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "valid");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    missing(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "missing");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    distinct(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "distinct");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    sum(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "sum");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    mean(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "mean");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    product(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "product");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    average(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "average");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    variance(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "variance");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    variancep(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "variancep");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stdev(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stdev");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stdevp(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stdevp");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stderr(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stderr");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    median(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "median");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    q1(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "q1");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    q3(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "q3");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    ci0(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "ci0");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    ci1(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "ci1");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    min(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "min");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    max(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "max");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    argmin(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "argmin");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    argmax(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "argmax");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    year(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "year");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    quarter(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "quarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    month(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "month");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    day(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "day");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    date(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "date");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    hours(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    minutes(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "minutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    seconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "seconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    milliseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "milliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    yearmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "quartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "monthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "monthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "minutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeSMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "secondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcyear(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyear");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcquarter(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcday(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcday");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcdate(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utchours(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcminutes(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcmilliseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcyearmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcSMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcsecondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    toObject(flag) {
      return flag ? {latitude: super.toObject()} : super.toObject();
    }

  }

  function latitude(...args) {
    return new Latitude(...args);
  }

  class Latitude2 extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      args = args.map(_ => isString(_) ? {field: _, type: "quantitative"} : _);
      assign(this, ...args);
    }

    aggregate(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "aggregate", value);
        return obj;
      } else {
        return get(this, "aggregate");
      }
    }

    bandPosition(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bandPosition", value);
        return obj;
      } else {
        return get(this, "bandPosition");
      }
    }

    bin(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bin", value);
        return obj;
      } else {
        return get(this, "bin");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeUnit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "timeUnit", value);
        return obj;
      } else {
        return get(this, "timeUnit");
      }
    }

    title(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "title", value);
        return obj;
      } else {
        return get(this, "title");
      }
    }

    datum(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "datum", value);
        return obj;
      } else {
        return get(this, "datum");
      }
    }

    type(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "type", value);
        return obj;
      } else {
        return get(this, "type");
      }
    }

    value(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "value", value);
        return obj;
      } else {
        return get(this, "value");
      }
    }

    fieldN(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "nominal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldO(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "ordinal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldT(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    if(...values) {
      if (values.length) {
        values[0] = {test: values[0]};
      }
      if (arguments.length) {
        const val = get(this, "condition") || [];
        const obj = copy(this);
        values = [].concat(val, merge(0, values));
        set(obj, "condition", values.length > 1 ? values : values[0]);
        return obj;
      } else {
        return get(this, "condition");
      }
    }

    count() {
      const obj = copy(this);
      set(obj, "type", "quantitative");
      set(obj, "aggregate", "count");
      return obj;
    }

    valid(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "valid");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    missing(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "missing");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    distinct(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "distinct");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    sum(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "sum");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    mean(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "mean");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    product(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "product");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    average(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "average");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    variance(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "variance");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    variancep(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "variancep");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stdev(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stdev");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stdevp(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stdevp");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stderr(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stderr");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    median(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "median");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    q1(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "q1");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    q3(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "q3");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    ci0(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "ci0");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    ci1(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "ci1");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    min(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "min");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    max(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "max");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    argmin(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "argmin");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    argmax(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "argmax");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    year(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "year");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    quarter(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "quarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    month(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "month");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    day(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "day");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    date(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "date");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    hours(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    minutes(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "minutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    seconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "seconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    milliseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "milliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    yearmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "quartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "monthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "monthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "minutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeSMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "secondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcyear(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyear");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcquarter(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcday(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcday");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcdate(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utchours(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcminutes(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcmilliseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcyearmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcSMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcsecondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    toObject(flag) {
      return flag ? {latitude2: super.toObject()} : super.toObject();
    }

  }

  function latitude2(...args) {
    return new Latitude2(...args);
  }

  class Longitude extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      args = args.map(_ => isString(_) ? {field: _, type: "quantitative"} : _);
      assign(this, ...args);
    }

    aggregate(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "aggregate", value);
        return obj;
      } else {
        return get(this, "aggregate");
      }
    }

    bandPosition(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bandPosition", value);
        return obj;
      } else {
        return get(this, "bandPosition");
      }
    }

    bin(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bin", value);
        return obj;
      } else {
        return get(this, "bin");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeUnit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "timeUnit", value);
        return obj;
      } else {
        return get(this, "timeUnit");
      }
    }

    title(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "title", value);
        return obj;
      } else {
        return get(this, "title");
      }
    }

    type(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "type", value);
        return obj;
      } else {
        return get(this, "type");
      }
    }

    datum(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "datum", value);
        return obj;
      } else {
        return get(this, "datum");
      }
    }

    fieldN(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "nominal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldO(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "ordinal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldT(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    if(...values) {
      if (values.length) {
        values[0] = {test: values[0]};
      }
      if (arguments.length) {
        const val = get(this, "condition") || [];
        const obj = copy(this);
        values = [].concat(val, merge(0, values));
        set(obj, "condition", values.length > 1 ? values : values[0]);
        return obj;
      } else {
        return get(this, "condition");
      }
    }

    count() {
      const obj = copy(this);
      set(obj, "type", "quantitative");
      set(obj, "aggregate", "count");
      return obj;
    }

    valid(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "valid");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    missing(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "missing");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    distinct(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "distinct");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    sum(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "sum");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    mean(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "mean");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    product(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "product");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    average(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "average");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    variance(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "variance");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    variancep(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "variancep");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stdev(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stdev");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stdevp(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stdevp");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stderr(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stderr");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    median(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "median");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    q1(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "q1");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    q3(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "q3");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    ci0(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "ci0");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    ci1(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "ci1");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    min(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "min");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    max(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "max");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    argmin(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "argmin");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    argmax(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "argmax");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    year(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "year");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    quarter(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "quarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    month(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "month");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    day(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "day");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    date(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "date");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    hours(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    minutes(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "minutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    seconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "seconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    milliseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "milliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    yearmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "quartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "monthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "monthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "minutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeSMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "secondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcyear(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyear");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcquarter(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcday(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcday");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcdate(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utchours(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcminutes(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcmilliseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcyearmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcSMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcsecondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    toObject(flag) {
      return flag ? {longitude: super.toObject()} : super.toObject();
    }

  }

  function longitude(...args) {
    return new Longitude(...args);
  }

  class Longitude2 extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      args = args.map(_ => isString(_) ? {field: _, type: "quantitative"} : _);
      assign(this, ...args);
    }

    aggregate(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "aggregate", value);
        return obj;
      } else {
        return get(this, "aggregate");
      }
    }

    bandPosition(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bandPosition", value);
        return obj;
      } else {
        return get(this, "bandPosition");
      }
    }

    bin(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bin", value);
        return obj;
      } else {
        return get(this, "bin");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeUnit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "timeUnit", value);
        return obj;
      } else {
        return get(this, "timeUnit");
      }
    }

    title(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "title", value);
        return obj;
      } else {
        return get(this, "title");
      }
    }

    datum(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "datum", value);
        return obj;
      } else {
        return get(this, "datum");
      }
    }

    type(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "type", value);
        return obj;
      } else {
        return get(this, "type");
      }
    }

    value(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "value", value);
        return obj;
      } else {
        return get(this, "value");
      }
    }

    fieldN(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "nominal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldO(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "ordinal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldT(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    if(...values) {
      if (values.length) {
        values[0] = {test: values[0]};
      }
      if (arguments.length) {
        const val = get(this, "condition") || [];
        const obj = copy(this);
        values = [].concat(val, merge(0, values));
        set(obj, "condition", values.length > 1 ? values : values[0]);
        return obj;
      } else {
        return get(this, "condition");
      }
    }

    count() {
      const obj = copy(this);
      set(obj, "type", "quantitative");
      set(obj, "aggregate", "count");
      return obj;
    }

    valid(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "valid");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    missing(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "missing");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    distinct(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "distinct");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    sum(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "sum");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    mean(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "mean");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    product(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "product");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    average(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "average");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    variance(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "variance");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    variancep(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "variancep");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stdev(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stdev");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stdevp(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stdevp");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stderr(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stderr");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    median(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "median");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    q1(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "q1");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    q3(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "q3");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    ci0(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "ci0");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    ci1(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "ci1");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    min(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "min");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    max(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "max");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    argmin(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "argmin");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    argmax(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "argmax");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    year(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "year");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    quarter(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "quarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    month(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "month");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    day(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "day");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    date(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "date");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    hours(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    minutes(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "minutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    seconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "seconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    milliseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "milliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    yearmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "quartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "monthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "monthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "minutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeSMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "secondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcyear(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyear");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcquarter(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcday(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcday");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcdate(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utchours(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcminutes(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcmilliseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcyearmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcSMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcsecondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    toObject(flag) {
      return flag ? {longitude2: super.toObject()} : super.toObject();
    }

  }

  function longitude2(...args) {
    return new Longitude2(...args);
  }

  class Opacity extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      assign(this, ...args);
    }

    aggregate(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "aggregate", value);
        return obj;
      } else {
        return get(this, "aggregate");
      }
    }

    bandPosition(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bandPosition", value);
        return obj;
      } else {
        return get(this, "bandPosition");
      }
    }

    bin(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bin", value);
        return obj;
      } else {
        return get(this, "bin");
      }
    }

    condition(...value) {
      if (arguments.length) {
        const obj = copy(this);
        if (value.length === 1 && !Array.isArray(value[0])) {
          value = value[0];
        } else {
          value = flat(value);
        }
        set(obj, "condition", value);
        return obj;
      } else {
        return get(this, "condition");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    legend(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "legend", value);
        return obj;
      } else {
        return get(this, "legend");
      }
    }

    scale(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "scale", value);
        return obj;
      } else {
        return get(this, "scale");
      }
    }

    sort(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "sort", value);
        return obj;
      } else {
        return get(this, "sort");
      }
    }

    timeUnit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "timeUnit", value);
        return obj;
      } else {
        return get(this, "timeUnit");
      }
    }

    title(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "title", value);
        return obj;
      } else {
        return get(this, "title");
      }
    }

    type(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "type", value);
        return obj;
      } else {
        return get(this, "type");
      }
    }

    datum(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "datum", value);
        return obj;
      } else {
        return get(this, "datum");
      }
    }

    value(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "value", value);
        return obj;
      } else {
        return get(this, "value");
      }
    }

    fieldN(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "nominal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldO(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "ordinal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldT(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    if(...values) {
      if (values.length) {
        values[0] = {test: values[0]};
      }
      if (arguments.length) {
        const val = get(this, "condition") || [];
        const obj = copy(this);
        values = [].concat(val, merge(0, values));
        set(obj, "condition", values.length > 1 ? values : values[0]);
        return obj;
      } else {
        return get(this, "condition");
      }
    }

    count() {
      const obj = copy(this);
      set(obj, "type", "quantitative");
      set(obj, "aggregate", "count");
      return obj;
    }

    valid(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "valid");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    missing(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "missing");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    distinct(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "distinct");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    sum(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "sum");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    mean(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "mean");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    product(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "product");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    average(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "average");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    variance(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "variance");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    variancep(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "variancep");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stdev(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stdev");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stdevp(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stdevp");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stderr(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stderr");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    median(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "median");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    q1(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "q1");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    q3(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "q3");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    ci0(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "ci0");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    ci1(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "ci1");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    min(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "min");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    max(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "max");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    argmin(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "argmin");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    argmax(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "argmax");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    year(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "year");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    quarter(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "quarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    month(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "month");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    day(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "day");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    date(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "date");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    hours(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    minutes(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "minutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    seconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "seconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    milliseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "milliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    yearmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "quartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "monthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "monthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "minutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeSMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "secondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcyear(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyear");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcquarter(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcday(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcday");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcdate(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utchours(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcminutes(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcmilliseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcyearmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcSMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcsecondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    toObject(flag) {
      return flag ? {opacity: super.toObject()} : super.toObject();
    }

  }

  function opacity(...args) {
    return new Opacity(...args);
  }

  class Order extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      args = args.map(_ => isString(_) ? {field: _, type: "ordinal"} : _);
      assign(this, ...args);
    }

    aggregate(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "aggregate", value);
        return obj;
      } else {
        return get(this, "aggregate");
      }
    }

    bandPosition(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bandPosition", value);
        return obj;
      } else {
        return get(this, "bandPosition");
      }
    }

    bin(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bin", value);
        return obj;
      } else {
        return get(this, "bin");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    sort(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "sort", value);
        return obj;
      } else {
        return get(this, "sort");
      }
    }

    timeUnit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "timeUnit", value);
        return obj;
      } else {
        return get(this, "timeUnit");
      }
    }

    title(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "title", value);
        return obj;
      } else {
        return get(this, "title");
      }
    }

    type(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "type", value);
        return obj;
      } else {
        return get(this, "type");
      }
    }

    condition(...value) {
      if (arguments.length) {
        const obj = copy(this);
        if (value.length === 1 && !Array.isArray(value[0])) {
          value = value[0];
        } else {
          value = flat(value);
        }
        set(obj, "condition", value);
        return obj;
      } else {
        return get(this, "condition");
      }
    }

    value(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "value", value);
        return obj;
      } else {
        return get(this, "value");
      }
    }

    fieldN(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "nominal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldO(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "ordinal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldT(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    if(...values) {
      if (values.length) {
        values[0] = {test: values[0]};
      }
      if (arguments.length) {
        const val = get(this, "condition") || [];
        const obj = copy(this);
        values = [].concat(val, merge(0, values));
        set(obj, "condition", values.length > 1 ? values : values[0]);
        return obj;
      } else {
        return get(this, "condition");
      }
    }

    count() {
      const obj = copy(this);
      set(obj, "type", "quantitative");
      set(obj, "aggregate", "count");
      return obj;
    }

    valid(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "valid");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    missing(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "missing");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    distinct(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "distinct");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    sum(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "sum");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    mean(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "mean");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    product(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "product");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    average(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "average");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    variance(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "variance");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    variancep(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "variancep");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stdev(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stdev");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stdevp(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stdevp");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stderr(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stderr");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    median(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "median");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    q1(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "q1");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    q3(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "q3");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    ci0(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "ci0");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    ci1(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "ci1");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    min(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "min");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    max(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "max");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    argmin(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "argmin");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    argmax(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "argmax");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    year(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "year");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    quarter(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "quarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    month(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "month");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    day(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "day");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    date(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "date");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    hours(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    minutes(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "minutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    seconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "seconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    milliseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "milliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    yearmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "quartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "monthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "monthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "minutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeSMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "secondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcyear(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyear");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcquarter(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcday(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcday");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcdate(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utchours(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcminutes(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcmilliseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcyearmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcSMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcsecondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    toObject(flag) {
      return flag ? {order: super.toObject()} : super.toObject();
    }

  }

  function order(...args) {
    return new Order(...args);
  }

  class Radius extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      assign(this, ...args);
    }

    aggregate(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "aggregate", value);
        return obj;
      } else {
        return get(this, "aggregate");
      }
    }

    bandPosition(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bandPosition", value);
        return obj;
      } else {
        return get(this, "bandPosition");
      }
    }

    bin(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bin", value);
        return obj;
      } else {
        return get(this, "bin");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    scale(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "scale", value);
        return obj;
      } else {
        return get(this, "scale");
      }
    }

    sort(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "sort", value);
        return obj;
      } else {
        return get(this, "sort");
      }
    }

    stack(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "stack", value);
        return obj;
      } else {
        return get(this, "stack");
      }
    }

    timeUnit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "timeUnit", value);
        return obj;
      } else {
        return get(this, "timeUnit");
      }
    }

    title(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "title", value);
        return obj;
      } else {
        return get(this, "title");
      }
    }

    type(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "type", value);
        return obj;
      } else {
        return get(this, "type");
      }
    }

    datum(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "datum", value);
        return obj;
      } else {
        return get(this, "datum");
      }
    }

    value(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "value", value);
        return obj;
      } else {
        return get(this, "value");
      }
    }

    fieldN(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "nominal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldO(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "ordinal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldT(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    if(...values) {
      if (values.length) {
        values[0] = {test: values[0]};
      }
      if (arguments.length) {
        const val = get(this, "condition") || [];
        const obj = copy(this);
        values = [].concat(val, merge(0, values));
        set(obj, "condition", values.length > 1 ? values : values[0]);
        return obj;
      } else {
        return get(this, "condition");
      }
    }

    count() {
      const obj = copy(this);
      set(obj, "type", "quantitative");
      set(obj, "aggregate", "count");
      return obj;
    }

    valid(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "valid");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    missing(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "missing");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    distinct(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "distinct");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    sum(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "sum");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    mean(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "mean");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    product(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "product");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    average(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "average");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    variance(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "variance");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    variancep(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "variancep");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stdev(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stdev");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stdevp(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stdevp");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stderr(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stderr");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    median(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "median");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    q1(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "q1");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    q3(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "q3");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    ci0(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "ci0");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    ci1(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "ci1");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    min(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "min");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    max(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "max");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    argmin(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "argmin");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    argmax(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "argmax");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    year(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "year");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    quarter(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "quarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    month(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "month");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    day(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "day");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    date(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "date");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    hours(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    minutes(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "minutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    seconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "seconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    milliseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "milliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    yearmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "quartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "monthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "monthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "minutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeSMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "secondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcyear(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyear");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcquarter(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcday(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcday");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcdate(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utchours(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcminutes(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcmilliseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcyearmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcSMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcsecondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    toObject(flag) {
      return flag ? {radius: super.toObject()} : super.toObject();
    }

  }

  function radius(...args) {
    return new Radius(...args);
  }

  class Radius2 extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      assign(this, ...args);
    }

    aggregate(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "aggregate", value);
        return obj;
      } else {
        return get(this, "aggregate");
      }
    }

    bandPosition(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bandPosition", value);
        return obj;
      } else {
        return get(this, "bandPosition");
      }
    }

    bin(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bin", value);
        return obj;
      } else {
        return get(this, "bin");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeUnit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "timeUnit", value);
        return obj;
      } else {
        return get(this, "timeUnit");
      }
    }

    title(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "title", value);
        return obj;
      } else {
        return get(this, "title");
      }
    }

    datum(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "datum", value);
        return obj;
      } else {
        return get(this, "datum");
      }
    }

    type(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "type", value);
        return obj;
      } else {
        return get(this, "type");
      }
    }

    value(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "value", value);
        return obj;
      } else {
        return get(this, "value");
      }
    }

    fieldN(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "nominal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldO(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "ordinal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldT(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    if(...values) {
      if (values.length) {
        values[0] = {test: values[0]};
      }
      if (arguments.length) {
        const val = get(this, "condition") || [];
        const obj = copy(this);
        values = [].concat(val, merge(0, values));
        set(obj, "condition", values.length > 1 ? values : values[0]);
        return obj;
      } else {
        return get(this, "condition");
      }
    }

    count() {
      const obj = copy(this);
      set(obj, "type", "quantitative");
      set(obj, "aggregate", "count");
      return obj;
    }

    valid(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "valid");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    missing(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "missing");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    distinct(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "distinct");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    sum(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "sum");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    mean(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "mean");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    product(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "product");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    average(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "average");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    variance(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "variance");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    variancep(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "variancep");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stdev(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stdev");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stdevp(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stdevp");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stderr(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stderr");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    median(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "median");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    q1(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "q1");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    q3(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "q3");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    ci0(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "ci0");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    ci1(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "ci1");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    min(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "min");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    max(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "max");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    argmin(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "argmin");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    argmax(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "argmax");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    year(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "year");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    quarter(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "quarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    month(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "month");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    day(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "day");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    date(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "date");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    hours(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    minutes(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "minutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    seconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "seconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    milliseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "milliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    yearmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "quartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "monthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "monthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "minutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeSMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "secondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcyear(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyear");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcquarter(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcday(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcday");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcdate(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utchours(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcminutes(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcmilliseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcyearmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcSMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcsecondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    toObject(flag) {
      return flag ? {radius2: super.toObject()} : super.toObject();
    }

  }

  function radius2(...args) {
    return new Radius2(...args);
  }

  class Row extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      args = args.map(_ => isString(_) ? {field: _, type: "ordinal"} : _);
      assign(this, ...args);
    }

    aggregate(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "aggregate", value);
        return obj;
      } else {
        return get(this, "aggregate");
      }
    }

    align(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "align", value);
        return obj;
      } else {
        return get(this, "align");
      }
    }

    bandPosition(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bandPosition", value);
        return obj;
      } else {
        return get(this, "bandPosition");
      }
    }

    bin(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bin", value);
        return obj;
      } else {
        return get(this, "bin");
      }
    }

    center(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "center", value);
        return obj;
      } else {
        return get(this, "center");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    header(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "header", value);
        return obj;
      } else {
        return get(this, "header");
      }
    }

    sort(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "sort", value);
        return obj;
      } else {
        return get(this, "sort");
      }
    }

    spacing(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "spacing", value);
        return obj;
      } else {
        return get(this, "spacing");
      }
    }

    timeUnit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "timeUnit", value);
        return obj;
      } else {
        return get(this, "timeUnit");
      }
    }

    title(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "title", value);
        return obj;
      } else {
        return get(this, "title");
      }
    }

    type(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "type", value);
        return obj;
      } else {
        return get(this, "type");
      }
    }

    fieldN(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "nominal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldO(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "ordinal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldT(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    if(...values) {
      if (values.length) {
        values[0] = {test: values[0]};
      }
      if (arguments.length) {
        const val = get(this, "condition") || [];
        const obj = copy(this);
        values = [].concat(val, merge(0, values));
        set(obj, "condition", values.length > 1 ? values : values[0]);
        return obj;
      } else {
        return get(this, "condition");
      }
    }

    count() {
      const obj = copy(this);
      set(obj, "type", "quantitative");
      set(obj, "aggregate", "count");
      return obj;
    }

    valid(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "valid");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    missing(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "missing");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    distinct(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "distinct");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    sum(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "sum");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    mean(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "mean");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    product(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "product");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    average(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "average");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    variance(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "variance");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    variancep(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "variancep");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stdev(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stdev");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stdevp(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stdevp");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stderr(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stderr");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    median(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "median");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    q1(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "q1");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    q3(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "q3");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    ci0(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "ci0");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    ci1(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "ci1");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    min(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "min");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    max(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "max");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    argmin(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "argmin");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    argmax(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "argmax");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    year(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "year");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    quarter(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "quarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    month(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "month");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    day(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "day");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    date(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "date");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    hours(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    minutes(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "minutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    seconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "seconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    milliseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "milliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    yearmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "quartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "monthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "monthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "minutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeSMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "secondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcyear(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyear");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcquarter(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcday(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcday");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcdate(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utchours(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcminutes(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcmilliseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcyearmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcSMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcsecondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    toObject(flag) {
      return flag ? {row: super.toObject()} : super.toObject();
    }

  }

  function row(...args) {
    return new Row(...args);
  }

  class Shape extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      args = args.map(_ => isString(_) ? {field: _, type: "nominal"} : _);
      assign(this, ...args);
    }

    aggregate(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "aggregate", value);
        return obj;
      } else {
        return get(this, "aggregate");
      }
    }

    bandPosition(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bandPosition", value);
        return obj;
      } else {
        return get(this, "bandPosition");
      }
    }

    bin(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bin", value);
        return obj;
      } else {
        return get(this, "bin");
      }
    }

    condition(...value) {
      if (arguments.length) {
        const obj = copy(this);
        if (value.length === 1 && !Array.isArray(value[0])) {
          value = value[0];
        } else {
          value = flat(value);
        }
        set(obj, "condition", value);
        return obj;
      } else {
        return get(this, "condition");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    legend(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "legend", value);
        return obj;
      } else {
        return get(this, "legend");
      }
    }

    scale(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "scale", value);
        return obj;
      } else {
        return get(this, "scale");
      }
    }

    sort(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "sort", value);
        return obj;
      } else {
        return get(this, "sort");
      }
    }

    timeUnit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "timeUnit", value);
        return obj;
      } else {
        return get(this, "timeUnit");
      }
    }

    title(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "title", value);
        return obj;
      } else {
        return get(this, "title");
      }
    }

    type(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "type", value);
        return obj;
      } else {
        return get(this, "type");
      }
    }

    datum(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "datum", value);
        return obj;
      } else {
        return get(this, "datum");
      }
    }

    value(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "value", value);
        return obj;
      } else {
        return get(this, "value");
      }
    }

    fieldN(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "nominal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldO(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "ordinal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldT(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    if(...values) {
      if (values.length) {
        values[0] = {test: values[0]};
      }
      if (arguments.length) {
        const val = get(this, "condition") || [];
        const obj = copy(this);
        values = [].concat(val, merge(0, values));
        set(obj, "condition", values.length > 1 ? values : values[0]);
        return obj;
      } else {
        return get(this, "condition");
      }
    }

    count() {
      const obj = copy(this);
      set(obj, "type", "quantitative");
      set(obj, "aggregate", "count");
      return obj;
    }

    valid(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "valid");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    missing(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "missing");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    distinct(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "distinct");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    sum(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "sum");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    mean(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "mean");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    product(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "product");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    average(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "average");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    variance(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "variance");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    variancep(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "variancep");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stdev(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stdev");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stdevp(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stdevp");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stderr(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stderr");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    median(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "median");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    q1(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "q1");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    q3(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "q3");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    ci0(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "ci0");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    ci1(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "ci1");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    min(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "min");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    max(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "max");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    argmin(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "argmin");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    argmax(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "argmax");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    year(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "year");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    quarter(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "quarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    month(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "month");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    day(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "day");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    date(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "date");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    hours(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    minutes(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "minutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    seconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "seconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    milliseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "milliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    yearmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "quartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "monthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "monthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "minutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeSMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "secondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcyear(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyear");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcquarter(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcday(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcday");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcdate(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utchours(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcminutes(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcmilliseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcyearmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcSMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcsecondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    toObject(flag) {
      return flag ? {shape: super.toObject()} : super.toObject();
    }

  }

  function shape(...args) {
    return new Shape(...args);
  }

  class Size extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      assign(this, ...args);
    }

    aggregate(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "aggregate", value);
        return obj;
      } else {
        return get(this, "aggregate");
      }
    }

    bandPosition(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bandPosition", value);
        return obj;
      } else {
        return get(this, "bandPosition");
      }
    }

    bin(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bin", value);
        return obj;
      } else {
        return get(this, "bin");
      }
    }

    condition(...value) {
      if (arguments.length) {
        const obj = copy(this);
        if (value.length === 1 && !Array.isArray(value[0])) {
          value = value[0];
        } else {
          value = flat(value);
        }
        set(obj, "condition", value);
        return obj;
      } else {
        return get(this, "condition");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    legend(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "legend", value);
        return obj;
      } else {
        return get(this, "legend");
      }
    }

    scale(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "scale", value);
        return obj;
      } else {
        return get(this, "scale");
      }
    }

    sort(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "sort", value);
        return obj;
      } else {
        return get(this, "sort");
      }
    }

    timeUnit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "timeUnit", value);
        return obj;
      } else {
        return get(this, "timeUnit");
      }
    }

    title(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "title", value);
        return obj;
      } else {
        return get(this, "title");
      }
    }

    type(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "type", value);
        return obj;
      } else {
        return get(this, "type");
      }
    }

    datum(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "datum", value);
        return obj;
      } else {
        return get(this, "datum");
      }
    }

    value(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "value", value);
        return obj;
      } else {
        return get(this, "value");
      }
    }

    fieldN(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "nominal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldO(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "ordinal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldT(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    if(...values) {
      if (values.length) {
        values[0] = {test: values[0]};
      }
      if (arguments.length) {
        const val = get(this, "condition") || [];
        const obj = copy(this);
        values = [].concat(val, merge(0, values));
        set(obj, "condition", values.length > 1 ? values : values[0]);
        return obj;
      } else {
        return get(this, "condition");
      }
    }

    count() {
      const obj = copy(this);
      set(obj, "type", "quantitative");
      set(obj, "aggregate", "count");
      return obj;
    }

    valid(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "valid");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    missing(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "missing");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    distinct(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "distinct");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    sum(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "sum");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    mean(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "mean");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    product(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "product");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    average(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "average");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    variance(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "variance");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    variancep(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "variancep");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stdev(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stdev");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stdevp(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stdevp");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stderr(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stderr");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    median(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "median");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    q1(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "q1");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    q3(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "q3");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    ci0(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "ci0");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    ci1(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "ci1");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    min(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "min");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    max(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "max");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    argmin(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "argmin");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    argmax(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "argmax");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    year(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "year");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    quarter(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "quarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    month(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "month");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    day(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "day");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    date(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "date");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    hours(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    minutes(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "minutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    seconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "seconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    milliseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "milliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    yearmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "quartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "monthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "monthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "minutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeSMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "secondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcyear(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyear");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcquarter(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcday(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcday");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcdate(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utchours(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcminutes(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcmilliseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcyearmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcSMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcsecondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    toObject(flag) {
      return flag ? {size: super.toObject()} : super.toObject();
    }

  }

  function size(...args) {
    return new Size(...args);
  }

  class Stroke extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      assign(this, ...args);
    }

    aggregate(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "aggregate", value);
        return obj;
      } else {
        return get(this, "aggregate");
      }
    }

    bandPosition(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bandPosition", value);
        return obj;
      } else {
        return get(this, "bandPosition");
      }
    }

    bin(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bin", value);
        return obj;
      } else {
        return get(this, "bin");
      }
    }

    condition(...value) {
      if (arguments.length) {
        const obj = copy(this);
        if (value.length === 1 && !Array.isArray(value[0])) {
          value = value[0];
        } else {
          value = flat(value);
        }
        set(obj, "condition", value);
        return obj;
      } else {
        return get(this, "condition");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    legend(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "legend", value);
        return obj;
      } else {
        return get(this, "legend");
      }
    }

    scale(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "scale", value);
        return obj;
      } else {
        return get(this, "scale");
      }
    }

    sort(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "sort", value);
        return obj;
      } else {
        return get(this, "sort");
      }
    }

    timeUnit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "timeUnit", value);
        return obj;
      } else {
        return get(this, "timeUnit");
      }
    }

    title(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "title", value);
        return obj;
      } else {
        return get(this, "title");
      }
    }

    type(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "type", value);
        return obj;
      } else {
        return get(this, "type");
      }
    }

    datum(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "datum", value);
        return obj;
      } else {
        return get(this, "datum");
      }
    }

    value(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "value", value);
        return obj;
      } else {
        return get(this, "value");
      }
    }

    fieldN(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "nominal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldO(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "ordinal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldT(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    if(...values) {
      if (values.length) {
        values[0] = {test: values[0]};
      }
      if (arguments.length) {
        const val = get(this, "condition") || [];
        const obj = copy(this);
        values = [].concat(val, merge(0, values));
        set(obj, "condition", values.length > 1 ? values : values[0]);
        return obj;
      } else {
        return get(this, "condition");
      }
    }

    count() {
      const obj = copy(this);
      set(obj, "type", "quantitative");
      set(obj, "aggregate", "count");
      return obj;
    }

    valid(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "valid");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    missing(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "missing");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    distinct(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "distinct");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    sum(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "sum");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    mean(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "mean");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    product(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "product");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    average(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "average");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    variance(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "variance");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    variancep(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "variancep");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stdev(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stdev");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stdevp(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stdevp");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stderr(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stderr");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    median(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "median");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    q1(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "q1");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    q3(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "q3");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    ci0(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "ci0");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    ci1(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "ci1");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    min(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "min");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    max(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "max");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    argmin(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "argmin");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    argmax(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "argmax");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    year(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "year");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    quarter(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "quarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    month(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "month");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    day(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "day");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    date(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "date");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    hours(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    minutes(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "minutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    seconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "seconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    milliseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "milliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    yearmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "quartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "monthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "monthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "minutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeSMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "secondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcyear(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyear");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcquarter(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcday(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcday");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcdate(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utchours(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcminutes(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcmilliseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcyearmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcSMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcsecondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    toObject(flag) {
      return flag ? {stroke: super.toObject()} : super.toObject();
    }

  }

  function stroke(...args) {
    return new Stroke(...args);
  }

  class StrokeDash extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      assign(this, ...args);
    }

    aggregate(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "aggregate", value);
        return obj;
      } else {
        return get(this, "aggregate");
      }
    }

    bandPosition(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bandPosition", value);
        return obj;
      } else {
        return get(this, "bandPosition");
      }
    }

    bin(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bin", value);
        return obj;
      } else {
        return get(this, "bin");
      }
    }

    condition(...value) {
      if (arguments.length) {
        const obj = copy(this);
        if (value.length === 1 && !Array.isArray(value[0])) {
          value = value[0];
        } else {
          value = flat(value);
        }
        set(obj, "condition", value);
        return obj;
      } else {
        return get(this, "condition");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    legend(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "legend", value);
        return obj;
      } else {
        return get(this, "legend");
      }
    }

    scale(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "scale", value);
        return obj;
      } else {
        return get(this, "scale");
      }
    }

    sort(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "sort", value);
        return obj;
      } else {
        return get(this, "sort");
      }
    }

    timeUnit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "timeUnit", value);
        return obj;
      } else {
        return get(this, "timeUnit");
      }
    }

    title(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "title", value);
        return obj;
      } else {
        return get(this, "title");
      }
    }

    type(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "type", value);
        return obj;
      } else {
        return get(this, "type");
      }
    }

    datum(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "datum", value);
        return obj;
      } else {
        return get(this, "datum");
      }
    }

    value(...value) {
      if (arguments.length) {
        const obj = copy(this);
        if (value.length === 1 && !Array.isArray(value[0])) {
          value = value[0];
        } else {
          value = flat(value);
        }
        set(obj, "value", value);
        return obj;
      } else {
        return get(this, "value");
      }
    }

    fieldN(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "nominal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldO(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "ordinal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldT(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    if(...values) {
      if (values.length) {
        values[0] = {test: values[0]};
      }
      if (arguments.length) {
        const val = get(this, "condition") || [];
        const obj = copy(this);
        values = [].concat(val, merge(0, values));
        set(obj, "condition", values.length > 1 ? values : values[0]);
        return obj;
      } else {
        return get(this, "condition");
      }
    }

    count() {
      const obj = copy(this);
      set(obj, "type", "quantitative");
      set(obj, "aggregate", "count");
      return obj;
    }

    valid(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "valid");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    missing(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "missing");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    distinct(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "distinct");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    sum(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "sum");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    mean(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "mean");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    product(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "product");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    average(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "average");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    variance(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "variance");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    variancep(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "variancep");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stdev(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stdev");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stdevp(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stdevp");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stderr(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stderr");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    median(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "median");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    q1(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "q1");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    q3(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "q3");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    ci0(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "ci0");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    ci1(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "ci1");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    min(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "min");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    max(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "max");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    argmin(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "argmin");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    argmax(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "argmax");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    year(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "year");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    quarter(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "quarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    month(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "month");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    day(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "day");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    date(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "date");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    hours(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    minutes(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "minutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    seconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "seconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    milliseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "milliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    yearmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "quartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "monthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "monthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "minutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeSMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "secondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcyear(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyear");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcquarter(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcday(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcday");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcdate(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utchours(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcminutes(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcmilliseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcyearmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcSMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcsecondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    toObject(flag) {
      return flag ? {strokeDash: super.toObject()} : super.toObject();
    }

  }

  function strokeDash(...args) {
    return new StrokeDash(...args);
  }

  class StrokeOpacity extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      assign(this, ...args);
    }

    aggregate(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "aggregate", value);
        return obj;
      } else {
        return get(this, "aggregate");
      }
    }

    bandPosition(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bandPosition", value);
        return obj;
      } else {
        return get(this, "bandPosition");
      }
    }

    bin(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bin", value);
        return obj;
      } else {
        return get(this, "bin");
      }
    }

    condition(...value) {
      if (arguments.length) {
        const obj = copy(this);
        if (value.length === 1 && !Array.isArray(value[0])) {
          value = value[0];
        } else {
          value = flat(value);
        }
        set(obj, "condition", value);
        return obj;
      } else {
        return get(this, "condition");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    legend(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "legend", value);
        return obj;
      } else {
        return get(this, "legend");
      }
    }

    scale(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "scale", value);
        return obj;
      } else {
        return get(this, "scale");
      }
    }

    sort(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "sort", value);
        return obj;
      } else {
        return get(this, "sort");
      }
    }

    timeUnit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "timeUnit", value);
        return obj;
      } else {
        return get(this, "timeUnit");
      }
    }

    title(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "title", value);
        return obj;
      } else {
        return get(this, "title");
      }
    }

    type(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "type", value);
        return obj;
      } else {
        return get(this, "type");
      }
    }

    datum(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "datum", value);
        return obj;
      } else {
        return get(this, "datum");
      }
    }

    value(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "value", value);
        return obj;
      } else {
        return get(this, "value");
      }
    }

    fieldN(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "nominal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldO(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "ordinal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldT(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    if(...values) {
      if (values.length) {
        values[0] = {test: values[0]};
      }
      if (arguments.length) {
        const val = get(this, "condition") || [];
        const obj = copy(this);
        values = [].concat(val, merge(0, values));
        set(obj, "condition", values.length > 1 ? values : values[0]);
        return obj;
      } else {
        return get(this, "condition");
      }
    }

    count() {
      const obj = copy(this);
      set(obj, "type", "quantitative");
      set(obj, "aggregate", "count");
      return obj;
    }

    valid(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "valid");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    missing(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "missing");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    distinct(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "distinct");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    sum(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "sum");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    mean(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "mean");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    product(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "product");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    average(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "average");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    variance(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "variance");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    variancep(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "variancep");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stdev(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stdev");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stdevp(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stdevp");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stderr(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stderr");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    median(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "median");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    q1(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "q1");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    q3(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "q3");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    ci0(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "ci0");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    ci1(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "ci1");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    min(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "min");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    max(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "max");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    argmin(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "argmin");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    argmax(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "argmax");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    year(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "year");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    quarter(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "quarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    month(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "month");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    day(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "day");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    date(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "date");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    hours(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    minutes(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "minutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    seconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "seconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    milliseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "milliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    yearmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "quartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "monthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "monthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "minutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeSMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "secondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcyear(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyear");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcquarter(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcday(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcday");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcdate(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utchours(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcminutes(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcmilliseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcyearmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcSMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcsecondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    toObject(flag) {
      return flag ? {strokeOpacity: super.toObject()} : super.toObject();
    }

  }

  function strokeOpacity(...args) {
    return new StrokeOpacity(...args);
  }

  class StrokeWidth extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      assign(this, ...args);
    }

    aggregate(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "aggregate", value);
        return obj;
      } else {
        return get(this, "aggregate");
      }
    }

    bandPosition(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bandPosition", value);
        return obj;
      } else {
        return get(this, "bandPosition");
      }
    }

    bin(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bin", value);
        return obj;
      } else {
        return get(this, "bin");
      }
    }

    condition(...value) {
      if (arguments.length) {
        const obj = copy(this);
        if (value.length === 1 && !Array.isArray(value[0])) {
          value = value[0];
        } else {
          value = flat(value);
        }
        set(obj, "condition", value);
        return obj;
      } else {
        return get(this, "condition");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    legend(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "legend", value);
        return obj;
      } else {
        return get(this, "legend");
      }
    }

    scale(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "scale", value);
        return obj;
      } else {
        return get(this, "scale");
      }
    }

    sort(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "sort", value);
        return obj;
      } else {
        return get(this, "sort");
      }
    }

    timeUnit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "timeUnit", value);
        return obj;
      } else {
        return get(this, "timeUnit");
      }
    }

    title(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "title", value);
        return obj;
      } else {
        return get(this, "title");
      }
    }

    type(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "type", value);
        return obj;
      } else {
        return get(this, "type");
      }
    }

    datum(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "datum", value);
        return obj;
      } else {
        return get(this, "datum");
      }
    }

    value(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "value", value);
        return obj;
      } else {
        return get(this, "value");
      }
    }

    fieldN(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "nominal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldO(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "ordinal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldT(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    if(...values) {
      if (values.length) {
        values[0] = {test: values[0]};
      }
      if (arguments.length) {
        const val = get(this, "condition") || [];
        const obj = copy(this);
        values = [].concat(val, merge(0, values));
        set(obj, "condition", values.length > 1 ? values : values[0]);
        return obj;
      } else {
        return get(this, "condition");
      }
    }

    count() {
      const obj = copy(this);
      set(obj, "type", "quantitative");
      set(obj, "aggregate", "count");
      return obj;
    }

    valid(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "valid");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    missing(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "missing");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    distinct(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "distinct");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    sum(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "sum");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    mean(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "mean");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    product(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "product");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    average(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "average");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    variance(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "variance");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    variancep(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "variancep");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stdev(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stdev");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stdevp(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stdevp");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stderr(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stderr");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    median(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "median");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    q1(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "q1");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    q3(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "q3");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    ci0(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "ci0");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    ci1(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "ci1");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    min(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "min");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    max(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "max");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    argmin(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "argmin");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    argmax(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "argmax");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    year(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "year");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    quarter(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "quarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    month(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "month");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    day(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "day");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    date(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "date");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    hours(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    minutes(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "minutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    seconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "seconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    milliseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "milliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    yearmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "quartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "monthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "monthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "minutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeSMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "secondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcyear(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyear");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcquarter(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcday(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcday");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcdate(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utchours(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcminutes(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcmilliseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcyearmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcSMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcsecondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    toObject(flag) {
      return flag ? {strokeWidth: super.toObject()} : super.toObject();
    }

  }

  function strokeWidth(...args) {
    return new StrokeWidth(...args);
  }

  class Text extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      args = args.map(_ => isString(_) ? {field: _, type: "nominal"} : _);
      assign(this, ...args);
    }

    aggregate(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "aggregate", value);
        return obj;
      } else {
        return get(this, "aggregate");
      }
    }

    bandPosition(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bandPosition", value);
        return obj;
      } else {
        return get(this, "bandPosition");
      }
    }

    bin(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bin", value);
        return obj;
      } else {
        return get(this, "bin");
      }
    }

    condition(...value) {
      if (arguments.length) {
        const obj = copy(this);
        if (value.length === 1 && !Array.isArray(value[0])) {
          value = value[0];
        } else {
          value = flat(value);
        }
        set(obj, "condition", value);
        return obj;
      } else {
        return get(this, "condition");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    format(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "format", value);
        return obj;
      } else {
        return get(this, "format");
      }
    }

    formatType(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "formatType", value);
        return obj;
      } else {
        return get(this, "formatType");
      }
    }

    timeUnit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "timeUnit", value);
        return obj;
      } else {
        return get(this, "timeUnit");
      }
    }

    title(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "title", value);
        return obj;
      } else {
        return get(this, "title");
      }
    }

    type(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "type", value);
        return obj;
      } else {
        return get(this, "type");
      }
    }

    datum(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "datum", value);
        return obj;
      } else {
        return get(this, "datum");
      }
    }

    value(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "value", value);
        return obj;
      } else {
        return get(this, "value");
      }
    }

    fieldN(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "nominal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldO(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "ordinal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldT(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    if(...values) {
      if (values.length) {
        values[0] = {test: values[0]};
      }
      if (arguments.length) {
        const val = get(this, "condition") || [];
        const obj = copy(this);
        values = [].concat(val, merge(0, values));
        set(obj, "condition", values.length > 1 ? values : values[0]);
        return obj;
      } else {
        return get(this, "condition");
      }
    }

    count() {
      const obj = copy(this);
      set(obj, "type", "quantitative");
      set(obj, "aggregate", "count");
      return obj;
    }

    valid(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "valid");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    missing(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "missing");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    distinct(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "distinct");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    sum(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "sum");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    mean(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "mean");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    product(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "product");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    average(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "average");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    variance(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "variance");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    variancep(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "variancep");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stdev(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stdev");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stdevp(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stdevp");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stderr(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stderr");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    median(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "median");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    q1(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "q1");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    q3(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "q3");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    ci0(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "ci0");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    ci1(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "ci1");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    min(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "min");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    max(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "max");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    argmin(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "argmin");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    argmax(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "argmax");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    year(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "year");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    quarter(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "quarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    month(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "month");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    day(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "day");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    date(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "date");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    hours(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    minutes(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "minutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    seconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "seconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    milliseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "milliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    yearmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "quartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "monthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "monthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "minutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeSMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "secondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcyear(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyear");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcquarter(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcday(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcday");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcdate(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utchours(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcminutes(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcmilliseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcyearmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcSMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcsecondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    toObject(flag) {
      return flag ? {text: super.toObject()} : super.toObject();
    }

  }

  function text(...args) {
    return new Text(...args);
  }

  class Theta extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      assign(this, ...args);
    }

    aggregate(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "aggregate", value);
        return obj;
      } else {
        return get(this, "aggregate");
      }
    }

    bandPosition(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bandPosition", value);
        return obj;
      } else {
        return get(this, "bandPosition");
      }
    }

    bin(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bin", value);
        return obj;
      } else {
        return get(this, "bin");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    scale(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "scale", value);
        return obj;
      } else {
        return get(this, "scale");
      }
    }

    sort(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "sort", value);
        return obj;
      } else {
        return get(this, "sort");
      }
    }

    stack(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "stack", value);
        return obj;
      } else {
        return get(this, "stack");
      }
    }

    timeUnit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "timeUnit", value);
        return obj;
      } else {
        return get(this, "timeUnit");
      }
    }

    title(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "title", value);
        return obj;
      } else {
        return get(this, "title");
      }
    }

    type(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "type", value);
        return obj;
      } else {
        return get(this, "type");
      }
    }

    datum(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "datum", value);
        return obj;
      } else {
        return get(this, "datum");
      }
    }

    value(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "value", value);
        return obj;
      } else {
        return get(this, "value");
      }
    }

    fieldN(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "nominal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldO(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "ordinal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldT(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    if(...values) {
      if (values.length) {
        values[0] = {test: values[0]};
      }
      if (arguments.length) {
        const val = get(this, "condition") || [];
        const obj = copy(this);
        values = [].concat(val, merge(0, values));
        set(obj, "condition", values.length > 1 ? values : values[0]);
        return obj;
      } else {
        return get(this, "condition");
      }
    }

    count() {
      const obj = copy(this);
      set(obj, "type", "quantitative");
      set(obj, "aggregate", "count");
      return obj;
    }

    valid(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "valid");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    missing(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "missing");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    distinct(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "distinct");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    sum(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "sum");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    mean(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "mean");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    product(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "product");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    average(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "average");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    variance(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "variance");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    variancep(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "variancep");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stdev(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stdev");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stdevp(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stdevp");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stderr(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stderr");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    median(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "median");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    q1(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "q1");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    q3(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "q3");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    ci0(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "ci0");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    ci1(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "ci1");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    min(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "min");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    max(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "max");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    argmin(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "argmin");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    argmax(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "argmax");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    year(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "year");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    quarter(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "quarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    month(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "month");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    day(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "day");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    date(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "date");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    hours(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    minutes(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "minutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    seconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "seconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    milliseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "milliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    yearmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "quartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "monthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "monthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "minutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeSMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "secondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcyear(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyear");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcquarter(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcday(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcday");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcdate(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utchours(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcminutes(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcmilliseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcyearmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcSMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcsecondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    toObject(flag) {
      return flag ? {theta: super.toObject()} : super.toObject();
    }

  }

  function theta(...args) {
    return new Theta(...args);
  }

  class Theta2 extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      assign(this, ...args);
    }

    aggregate(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "aggregate", value);
        return obj;
      } else {
        return get(this, "aggregate");
      }
    }

    bandPosition(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bandPosition", value);
        return obj;
      } else {
        return get(this, "bandPosition");
      }
    }

    bin(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bin", value);
        return obj;
      } else {
        return get(this, "bin");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeUnit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "timeUnit", value);
        return obj;
      } else {
        return get(this, "timeUnit");
      }
    }

    title(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "title", value);
        return obj;
      } else {
        return get(this, "title");
      }
    }

    datum(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "datum", value);
        return obj;
      } else {
        return get(this, "datum");
      }
    }

    type(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "type", value);
        return obj;
      } else {
        return get(this, "type");
      }
    }

    value(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "value", value);
        return obj;
      } else {
        return get(this, "value");
      }
    }

    fieldN(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "nominal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldO(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "ordinal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldT(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    if(...values) {
      if (values.length) {
        values[0] = {test: values[0]};
      }
      if (arguments.length) {
        const val = get(this, "condition") || [];
        const obj = copy(this);
        values = [].concat(val, merge(0, values));
        set(obj, "condition", values.length > 1 ? values : values[0]);
        return obj;
      } else {
        return get(this, "condition");
      }
    }

    count() {
      const obj = copy(this);
      set(obj, "type", "quantitative");
      set(obj, "aggregate", "count");
      return obj;
    }

    valid(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "valid");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    missing(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "missing");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    distinct(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "distinct");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    sum(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "sum");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    mean(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "mean");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    product(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "product");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    average(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "average");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    variance(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "variance");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    variancep(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "variancep");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stdev(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stdev");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stdevp(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stdevp");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stderr(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stderr");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    median(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "median");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    q1(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "q1");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    q3(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "q3");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    ci0(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "ci0");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    ci1(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "ci1");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    min(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "min");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    max(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "max");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    argmin(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "argmin");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    argmax(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "argmax");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    year(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "year");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    quarter(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "quarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    month(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "month");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    day(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "day");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    date(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "date");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    hours(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    minutes(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "minutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    seconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "seconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    milliseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "milliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    yearmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "quartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "monthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "monthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "minutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeSMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "secondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcyear(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyear");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcquarter(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcday(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcday");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcdate(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utchours(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcminutes(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcmilliseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcyearmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcSMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcsecondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    toObject(flag) {
      return flag ? {theta2: super.toObject()} : super.toObject();
    }

  }

  function theta2(...args) {
    return new Theta2(...args);
  }

  class Tooltip extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      args = args.map(_ => isArray(_) ? _.map(_ => { return isString(_) ? {field: _, type: "nominal"} : _; }) : isString(_) ? {field: _, type: "nominal"} : _);
      assign(this, ...args);
    }

    aggregate(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "aggregate", value);
        return obj;
      } else {
        return get(this, "aggregate");
      }
    }

    bandPosition(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bandPosition", value);
        return obj;
      } else {
        return get(this, "bandPosition");
      }
    }

    bin(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bin", value);
        return obj;
      } else {
        return get(this, "bin");
      }
    }

    condition(...value) {
      if (arguments.length) {
        const obj = copy(this);
        if (value.length === 1 && !Array.isArray(value[0])) {
          value = value[0];
        } else {
          value = flat(value);
        }
        set(obj, "condition", value);
        return obj;
      } else {
        return get(this, "condition");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    format(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "format", value);
        return obj;
      } else {
        return get(this, "format");
      }
    }

    formatType(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "formatType", value);
        return obj;
      } else {
        return get(this, "formatType");
      }
    }

    timeUnit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "timeUnit", value);
        return obj;
      } else {
        return get(this, "timeUnit");
      }
    }

    title(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "title", value);
        return obj;
      } else {
        return get(this, "title");
      }
    }

    type(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "type", value);
        return obj;
      } else {
        return get(this, "type");
      }
    }

    value(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "value", value);
        return obj;
      } else {
        return get(this, "value");
      }
    }

    fieldN(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "nominal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldO(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "ordinal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldT(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    if(...values) {
      if (values.length) {
        values[0] = {test: values[0]};
      }
      if (arguments.length) {
        const val = get(this, "condition") || [];
        const obj = copy(this);
        values = [].concat(val, merge(0, values));
        set(obj, "condition", values.length > 1 ? values : values[0]);
        return obj;
      } else {
        return get(this, "condition");
      }
    }

    count() {
      const obj = copy(this);
      set(obj, "type", "quantitative");
      set(obj, "aggregate", "count");
      return obj;
    }

    valid(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "valid");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    missing(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "missing");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    distinct(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "distinct");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    sum(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "sum");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    mean(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "mean");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    product(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "product");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    average(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "average");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    variance(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "variance");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    variancep(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "variancep");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stdev(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stdev");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stdevp(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stdevp");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stderr(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stderr");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    median(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "median");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    q1(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "q1");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    q3(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "q3");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    ci0(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "ci0");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    ci1(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "ci1");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    min(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "min");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    max(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "max");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    argmin(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "argmin");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    argmax(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "argmax");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    year(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "year");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    quarter(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "quarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    month(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "month");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    day(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "day");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    date(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "date");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    hours(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    minutes(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "minutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    seconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "seconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    milliseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "milliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    yearmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "quartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "monthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "monthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "minutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeSMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "secondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcyear(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyear");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcquarter(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcday(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcday");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcdate(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utchours(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcminutes(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcmilliseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcyearmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcSMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcsecondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    toObject(flag) {
      return flag ? {tooltip: super.toObject()} : super.toObject();
    }

  }

  function tooltip(...args) {
    return new Tooltip(...args);
  }

  class Url extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      assign(this, ...args);
    }

    aggregate(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "aggregate", value);
        return obj;
      } else {
        return get(this, "aggregate");
      }
    }

    bandPosition(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bandPosition", value);
        return obj;
      } else {
        return get(this, "bandPosition");
      }
    }

    bin(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bin", value);
        return obj;
      } else {
        return get(this, "bin");
      }
    }

    condition(...value) {
      if (arguments.length) {
        const obj = copy(this);
        if (value.length === 1 && !Array.isArray(value[0])) {
          value = value[0];
        } else {
          value = flat(value);
        }
        set(obj, "condition", value);
        return obj;
      } else {
        return get(this, "condition");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    format(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "format", value);
        return obj;
      } else {
        return get(this, "format");
      }
    }

    formatType(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "formatType", value);
        return obj;
      } else {
        return get(this, "formatType");
      }
    }

    timeUnit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "timeUnit", value);
        return obj;
      } else {
        return get(this, "timeUnit");
      }
    }

    title(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "title", value);
        return obj;
      } else {
        return get(this, "title");
      }
    }

    type(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "type", value);
        return obj;
      } else {
        return get(this, "type");
      }
    }

    value(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "value", value);
        return obj;
      } else {
        return get(this, "value");
      }
    }

    fieldN(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "nominal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldO(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "ordinal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldT(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    if(...values) {
      if (values.length) {
        values[0] = {test: values[0]};
      }
      if (arguments.length) {
        const val = get(this, "condition") || [];
        const obj = copy(this);
        values = [].concat(val, merge(0, values));
        set(obj, "condition", values.length > 1 ? values : values[0]);
        return obj;
      } else {
        return get(this, "condition");
      }
    }

    count() {
      const obj = copy(this);
      set(obj, "type", "quantitative");
      set(obj, "aggregate", "count");
      return obj;
    }

    valid(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "valid");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    missing(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "missing");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    distinct(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "distinct");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    sum(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "sum");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    mean(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "mean");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    product(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "product");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    average(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "average");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    variance(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "variance");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    variancep(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "variancep");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stdev(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stdev");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stdevp(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stdevp");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stderr(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stderr");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    median(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "median");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    q1(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "q1");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    q3(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "q3");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    ci0(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "ci0");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    ci1(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "ci1");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    min(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "min");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    max(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "max");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    argmin(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "argmin");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    argmax(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "argmax");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    year(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "year");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    quarter(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "quarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    month(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "month");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    day(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "day");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    date(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "date");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    hours(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    minutes(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "minutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    seconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "seconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    milliseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "milliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    yearmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "quartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "monthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "monthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "minutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeSMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "secondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcyear(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyear");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcquarter(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcday(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcday");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcdate(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utchours(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcminutes(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcmilliseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcyearmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcSMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcsecondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    toObject(flag) {
      return flag ? {url: super.toObject()} : super.toObject();
    }

  }

  function url(...args) {
    return new Url(...args);
  }

  class X extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      assign(this, ...args);
    }

    aggregate(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "aggregate", value);
        return obj;
      } else {
        return get(this, "aggregate");
      }
    }

    axis(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "axis", value);
        return obj;
      } else {
        return get(this, "axis");
      }
    }

    bandPosition(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bandPosition", value);
        return obj;
      } else {
        return get(this, "bandPosition");
      }
    }

    bin(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bin", value);
        return obj;
      } else {
        return get(this, "bin");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    impute(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "impute", value);
        return obj;
      } else {
        return get(this, "impute");
      }
    }

    scale(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "scale", value);
        return obj;
      } else {
        return get(this, "scale");
      }
    }

    sort(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "sort", value);
        return obj;
      } else {
        return get(this, "sort");
      }
    }

    stack(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "stack", value);
        return obj;
      } else {
        return get(this, "stack");
      }
    }

    timeUnit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "timeUnit", value);
        return obj;
      } else {
        return get(this, "timeUnit");
      }
    }

    title(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "title", value);
        return obj;
      } else {
        return get(this, "title");
      }
    }

    type(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "type", value);
        return obj;
      } else {
        return get(this, "type");
      }
    }

    datum(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "datum", value);
        return obj;
      } else {
        return get(this, "datum");
      }
    }

    value(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "value", value);
        return obj;
      } else {
        return get(this, "value");
      }
    }

    fieldN(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "nominal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldO(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "ordinal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldT(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    if(...values) {
      if (values.length) {
        values[0] = {test: values[0]};
      }
      if (arguments.length) {
        const val = get(this, "condition") || [];
        const obj = copy(this);
        values = [].concat(val, merge(0, values));
        set(obj, "condition", values.length > 1 ? values : values[0]);
        return obj;
      } else {
        return get(this, "condition");
      }
    }

    count() {
      const obj = copy(this);
      set(obj, "type", "quantitative");
      set(obj, "aggregate", "count");
      return obj;
    }

    valid(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "valid");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    missing(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "missing");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    distinct(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "distinct");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    sum(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "sum");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    mean(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "mean");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    product(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "product");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    average(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "average");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    variance(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "variance");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    variancep(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "variancep");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stdev(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stdev");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stdevp(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stdevp");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stderr(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stderr");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    median(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "median");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    q1(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "q1");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    q3(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "q3");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    ci0(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "ci0");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    ci1(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "ci1");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    min(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "min");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    max(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "max");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    argmin(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "argmin");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    argmax(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "argmax");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    year(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "year");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    quarter(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "quarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    month(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "month");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    day(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "day");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    date(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "date");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    hours(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    minutes(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "minutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    seconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "seconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    milliseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "milliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    yearmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "quartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "monthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "monthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "minutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeSMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "secondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcyear(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyear");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcquarter(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcday(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcday");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcdate(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utchours(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcminutes(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcmilliseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcyearmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcSMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcsecondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    toObject(flag) {
      return flag ? {x: super.toObject()} : super.toObject();
    }

  }

  function x(...args) {
    return new X(...args);
  }

  class X2 extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      assign(this, ...args);
    }

    aggregate(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "aggregate", value);
        return obj;
      } else {
        return get(this, "aggregate");
      }
    }

    bandPosition(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bandPosition", value);
        return obj;
      } else {
        return get(this, "bandPosition");
      }
    }

    bin(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bin", value);
        return obj;
      } else {
        return get(this, "bin");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeUnit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "timeUnit", value);
        return obj;
      } else {
        return get(this, "timeUnit");
      }
    }

    title(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "title", value);
        return obj;
      } else {
        return get(this, "title");
      }
    }

    datum(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "datum", value);
        return obj;
      } else {
        return get(this, "datum");
      }
    }

    type(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "type", value);
        return obj;
      } else {
        return get(this, "type");
      }
    }

    value(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "value", value);
        return obj;
      } else {
        return get(this, "value");
      }
    }

    fieldN(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "nominal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldO(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "ordinal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldT(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    if(...values) {
      if (values.length) {
        values[0] = {test: values[0]};
      }
      if (arguments.length) {
        const val = get(this, "condition") || [];
        const obj = copy(this);
        values = [].concat(val, merge(0, values));
        set(obj, "condition", values.length > 1 ? values : values[0]);
        return obj;
      } else {
        return get(this, "condition");
      }
    }

    count() {
      const obj = copy(this);
      set(obj, "type", "quantitative");
      set(obj, "aggregate", "count");
      return obj;
    }

    valid(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "valid");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    missing(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "missing");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    distinct(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "distinct");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    sum(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "sum");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    mean(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "mean");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    product(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "product");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    average(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "average");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    variance(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "variance");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    variancep(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "variancep");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stdev(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stdev");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stdevp(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stdevp");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stderr(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stderr");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    median(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "median");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    q1(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "q1");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    q3(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "q3");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    ci0(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "ci0");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    ci1(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "ci1");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    min(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "min");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    max(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "max");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    argmin(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "argmin");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    argmax(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "argmax");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    year(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "year");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    quarter(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "quarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    month(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "month");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    day(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "day");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    date(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "date");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    hours(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    minutes(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "minutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    seconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "seconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    milliseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "milliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    yearmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "quartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "monthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "monthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "minutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeSMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "secondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcyear(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyear");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcquarter(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcday(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcday");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcdate(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utchours(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcminutes(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcmilliseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcyearmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcSMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcsecondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    toObject(flag) {
      return flag ? {x2: super.toObject()} : super.toObject();
    }

  }

  function x2(...args) {
    return new X2(...args);
  }

  class XError extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      assign(this, ...args);
    }

    aggregate(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "aggregate", value);
        return obj;
      } else {
        return get(this, "aggregate");
      }
    }

    bandPosition(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bandPosition", value);
        return obj;
      } else {
        return get(this, "bandPosition");
      }
    }

    bin(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bin", value);
        return obj;
      } else {
        return get(this, "bin");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeUnit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "timeUnit", value);
        return obj;
      } else {
        return get(this, "timeUnit");
      }
    }

    title(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "title", value);
        return obj;
      } else {
        return get(this, "title");
      }
    }

    value(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "value", value);
        return obj;
      } else {
        return get(this, "value");
      }
    }

    fieldN(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "nominal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldO(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "ordinal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldT(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    if(...values) {
      if (values.length) {
        values[0] = {test: values[0]};
      }
      if (arguments.length) {
        const val = get(this, "condition") || [];
        const obj = copy(this);
        values = [].concat(val, merge(0, values));
        set(obj, "condition", values.length > 1 ? values : values[0]);
        return obj;
      } else {
        return get(this, "condition");
      }
    }

    count() {
      const obj = copy(this);
      set(obj, "type", "quantitative");
      set(obj, "aggregate", "count");
      return obj;
    }

    valid(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "valid");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    missing(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "missing");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    distinct(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "distinct");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    sum(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "sum");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    mean(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "mean");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    product(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "product");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    average(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "average");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    variance(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "variance");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    variancep(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "variancep");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stdev(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stdev");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stdevp(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stdevp");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stderr(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stderr");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    median(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "median");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    q1(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "q1");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    q3(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "q3");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    ci0(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "ci0");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    ci1(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "ci1");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    min(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "min");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    max(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "max");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    argmin(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "argmin");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    argmax(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "argmax");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    year(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "year");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    quarter(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "quarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    month(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "month");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    day(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "day");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    date(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "date");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    hours(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    minutes(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "minutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    seconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "seconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    milliseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "milliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    yearmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "quartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "monthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "monthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "minutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeSMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "secondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcyear(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyear");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcquarter(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcday(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcday");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcdate(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utchours(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcminutes(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcmilliseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcyearmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcSMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcsecondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    toObject(flag) {
      return flag ? {xError: super.toObject()} : super.toObject();
    }

  }

  function xError(...args) {
    return new XError(...args);
  }

  class XError2 extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      assign(this, ...args);
    }

    aggregate(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "aggregate", value);
        return obj;
      } else {
        return get(this, "aggregate");
      }
    }

    bandPosition(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bandPosition", value);
        return obj;
      } else {
        return get(this, "bandPosition");
      }
    }

    bin(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bin", value);
        return obj;
      } else {
        return get(this, "bin");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeUnit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "timeUnit", value);
        return obj;
      } else {
        return get(this, "timeUnit");
      }
    }

    title(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "title", value);
        return obj;
      } else {
        return get(this, "title");
      }
    }

    value(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "value", value);
        return obj;
      } else {
        return get(this, "value");
      }
    }

    fieldN(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "nominal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldO(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "ordinal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldT(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    if(...values) {
      if (values.length) {
        values[0] = {test: values[0]};
      }
      if (arguments.length) {
        const val = get(this, "condition") || [];
        const obj = copy(this);
        values = [].concat(val, merge(0, values));
        set(obj, "condition", values.length > 1 ? values : values[0]);
        return obj;
      } else {
        return get(this, "condition");
      }
    }

    count() {
      const obj = copy(this);
      set(obj, "type", "quantitative");
      set(obj, "aggregate", "count");
      return obj;
    }

    valid(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "valid");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    missing(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "missing");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    distinct(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "distinct");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    sum(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "sum");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    mean(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "mean");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    product(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "product");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    average(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "average");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    variance(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "variance");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    variancep(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "variancep");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stdev(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stdev");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stdevp(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stdevp");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stderr(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stderr");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    median(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "median");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    q1(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "q1");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    q3(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "q3");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    ci0(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "ci0");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    ci1(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "ci1");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    min(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "min");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    max(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "max");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    argmin(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "argmin");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    argmax(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "argmax");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    year(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "year");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    quarter(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "quarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    month(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "month");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    day(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "day");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    date(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "date");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    hours(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    minutes(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "minutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    seconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "seconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    milliseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "milliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    yearmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "quartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "monthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "monthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "minutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeSMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "secondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcyear(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyear");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcquarter(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcday(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcday");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcdate(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utchours(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcminutes(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcmilliseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcyearmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcSMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcsecondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    toObject(flag) {
      return flag ? {xError2: super.toObject()} : super.toObject();
    }

  }

  function xError2(...args) {
    return new XError2(...args);
  }

  class Y extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      assign(this, ...args);
    }

    aggregate(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "aggregate", value);
        return obj;
      } else {
        return get(this, "aggregate");
      }
    }

    axis(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "axis", value);
        return obj;
      } else {
        return get(this, "axis");
      }
    }

    bandPosition(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bandPosition", value);
        return obj;
      } else {
        return get(this, "bandPosition");
      }
    }

    bin(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bin", value);
        return obj;
      } else {
        return get(this, "bin");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    impute(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "impute", value);
        return obj;
      } else {
        return get(this, "impute");
      }
    }

    scale(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "scale", value);
        return obj;
      } else {
        return get(this, "scale");
      }
    }

    sort(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "sort", value);
        return obj;
      } else {
        return get(this, "sort");
      }
    }

    stack(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "stack", value);
        return obj;
      } else {
        return get(this, "stack");
      }
    }

    timeUnit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "timeUnit", value);
        return obj;
      } else {
        return get(this, "timeUnit");
      }
    }

    title(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "title", value);
        return obj;
      } else {
        return get(this, "title");
      }
    }

    type(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "type", value);
        return obj;
      } else {
        return get(this, "type");
      }
    }

    datum(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "datum", value);
        return obj;
      } else {
        return get(this, "datum");
      }
    }

    value(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "value", value);
        return obj;
      } else {
        return get(this, "value");
      }
    }

    fieldN(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "nominal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldO(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "ordinal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldT(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    if(...values) {
      if (values.length) {
        values[0] = {test: values[0]};
      }
      if (arguments.length) {
        const val = get(this, "condition") || [];
        const obj = copy(this);
        values = [].concat(val, merge(0, values));
        set(obj, "condition", values.length > 1 ? values : values[0]);
        return obj;
      } else {
        return get(this, "condition");
      }
    }

    count() {
      const obj = copy(this);
      set(obj, "type", "quantitative");
      set(obj, "aggregate", "count");
      return obj;
    }

    valid(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "valid");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    missing(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "missing");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    distinct(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "distinct");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    sum(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "sum");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    mean(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "mean");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    product(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "product");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    average(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "average");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    variance(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "variance");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    variancep(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "variancep");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stdev(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stdev");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stdevp(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stdevp");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stderr(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stderr");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    median(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "median");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    q1(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "q1");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    q3(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "q3");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    ci0(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "ci0");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    ci1(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "ci1");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    min(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "min");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    max(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "max");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    argmin(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "argmin");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    argmax(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "argmax");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    year(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "year");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    quarter(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "quarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    month(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "month");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    day(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "day");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    date(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "date");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    hours(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    minutes(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "minutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    seconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "seconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    milliseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "milliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    yearmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "quartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "monthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "monthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "minutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeSMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "secondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcyear(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyear");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcquarter(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcday(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcday");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcdate(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utchours(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcminutes(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcmilliseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcyearmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcSMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcsecondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    toObject(flag) {
      return flag ? {y: super.toObject()} : super.toObject();
    }

  }

  function y(...args) {
    return new Y(...args);
  }

  class Y2 extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      assign(this, ...args);
    }

    aggregate(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "aggregate", value);
        return obj;
      } else {
        return get(this, "aggregate");
      }
    }

    bandPosition(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bandPosition", value);
        return obj;
      } else {
        return get(this, "bandPosition");
      }
    }

    bin(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bin", value);
        return obj;
      } else {
        return get(this, "bin");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeUnit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "timeUnit", value);
        return obj;
      } else {
        return get(this, "timeUnit");
      }
    }

    title(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "title", value);
        return obj;
      } else {
        return get(this, "title");
      }
    }

    datum(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "datum", value);
        return obj;
      } else {
        return get(this, "datum");
      }
    }

    type(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "type", value);
        return obj;
      } else {
        return get(this, "type");
      }
    }

    value(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "value", value);
        return obj;
      } else {
        return get(this, "value");
      }
    }

    fieldN(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "nominal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldO(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "ordinal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldT(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    if(...values) {
      if (values.length) {
        values[0] = {test: values[0]};
      }
      if (arguments.length) {
        const val = get(this, "condition") || [];
        const obj = copy(this);
        values = [].concat(val, merge(0, values));
        set(obj, "condition", values.length > 1 ? values : values[0]);
        return obj;
      } else {
        return get(this, "condition");
      }
    }

    count() {
      const obj = copy(this);
      set(obj, "type", "quantitative");
      set(obj, "aggregate", "count");
      return obj;
    }

    valid(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "valid");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    missing(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "missing");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    distinct(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "distinct");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    sum(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "sum");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    mean(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "mean");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    product(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "product");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    average(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "average");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    variance(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "variance");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    variancep(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "variancep");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stdev(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stdev");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stdevp(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stdevp");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stderr(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stderr");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    median(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "median");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    q1(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "q1");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    q3(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "q3");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    ci0(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "ci0");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    ci1(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "ci1");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    min(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "min");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    max(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "max");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    argmin(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "argmin");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    argmax(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "argmax");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    year(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "year");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    quarter(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "quarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    month(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "month");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    day(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "day");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    date(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "date");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    hours(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    minutes(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "minutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    seconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "seconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    milliseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "milliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    yearmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "quartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "monthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "monthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "minutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeSMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "secondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcyear(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyear");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcquarter(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcday(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcday");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcdate(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utchours(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcminutes(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcmilliseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcyearmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcSMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcsecondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    toObject(flag) {
      return flag ? {y2: super.toObject()} : super.toObject();
    }

  }

  function y2(...args) {
    return new Y2(...args);
  }

  class YError extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      assign(this, ...args);
    }

    aggregate(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "aggregate", value);
        return obj;
      } else {
        return get(this, "aggregate");
      }
    }

    bandPosition(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bandPosition", value);
        return obj;
      } else {
        return get(this, "bandPosition");
      }
    }

    bin(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bin", value);
        return obj;
      } else {
        return get(this, "bin");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeUnit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "timeUnit", value);
        return obj;
      } else {
        return get(this, "timeUnit");
      }
    }

    title(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "title", value);
        return obj;
      } else {
        return get(this, "title");
      }
    }

    value(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "value", value);
        return obj;
      } else {
        return get(this, "value");
      }
    }

    fieldN(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "nominal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldO(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "ordinal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldT(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    if(...values) {
      if (values.length) {
        values[0] = {test: values[0]};
      }
      if (arguments.length) {
        const val = get(this, "condition") || [];
        const obj = copy(this);
        values = [].concat(val, merge(0, values));
        set(obj, "condition", values.length > 1 ? values : values[0]);
        return obj;
      } else {
        return get(this, "condition");
      }
    }

    count() {
      const obj = copy(this);
      set(obj, "type", "quantitative");
      set(obj, "aggregate", "count");
      return obj;
    }

    valid(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "valid");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    missing(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "missing");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    distinct(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "distinct");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    sum(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "sum");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    mean(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "mean");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    product(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "product");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    average(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "average");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    variance(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "variance");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    variancep(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "variancep");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stdev(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stdev");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stdevp(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stdevp");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stderr(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stderr");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    median(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "median");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    q1(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "q1");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    q3(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "q3");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    ci0(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "ci0");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    ci1(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "ci1");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    min(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "min");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    max(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "max");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    argmin(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "argmin");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    argmax(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "argmax");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    year(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "year");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    quarter(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "quarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    month(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "month");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    day(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "day");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    date(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "date");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    hours(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    minutes(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "minutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    seconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "seconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    milliseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "milliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    yearmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "quartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "monthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "monthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "minutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeSMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "secondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcyear(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyear");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcquarter(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcday(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcday");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcdate(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utchours(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcminutes(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcmilliseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcyearmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcSMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcsecondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    toObject(flag) {
      return flag ? {yError: super.toObject()} : super.toObject();
    }

  }

  function yError(...args) {
    return new YError(...args);
  }

  class YError2 extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      assign(this, ...args);
    }

    aggregate(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "aggregate", value);
        return obj;
      } else {
        return get(this, "aggregate");
      }
    }

    bandPosition(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bandPosition", value);
        return obj;
      } else {
        return get(this, "bandPosition");
      }
    }

    bin(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bin", value);
        return obj;
      } else {
        return get(this, "bin");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeUnit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "timeUnit", value);
        return obj;
      } else {
        return get(this, "timeUnit");
      }
    }

    title(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "title", value);
        return obj;
      } else {
        return get(this, "title");
      }
    }

    value(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "value", value);
        return obj;
      } else {
        return get(this, "value");
      }
    }

    fieldN(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "nominal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldO(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "ordinal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    fieldT(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    if(...values) {
      if (values.length) {
        values[0] = {test: values[0]};
      }
      if (arguments.length) {
        const val = get(this, "condition") || [];
        const obj = copy(this);
        values = [].concat(val, merge(0, values));
        set(obj, "condition", values.length > 1 ? values : values[0]);
        return obj;
      } else {
        return get(this, "condition");
      }
    }

    count() {
      const obj = copy(this);
      set(obj, "type", "quantitative");
      set(obj, "aggregate", "count");
      return obj;
    }

    valid(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "valid");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    missing(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "missing");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    distinct(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "distinct");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    sum(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "sum");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    mean(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "mean");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    product(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "product");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    average(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "average");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    variance(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "variance");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    variancep(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "variancep");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stdev(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stdev");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stdevp(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stdevp");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    stderr(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "stderr");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    median(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "median");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    q1(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "q1");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    q3(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "q3");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    ci0(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "ci0");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    ci1(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "ci1");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    min(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "min");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    max(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "max");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    argmin(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "argmin");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    argmax(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "quantitative");
            set(obj, "aggregate", "argmax");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    year(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "year");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    quarter(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "quarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    month(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "month");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    day(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "day");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    date(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "date");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    hours(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    minutes(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "minutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    seconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "seconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    milliseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "milliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    yearmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeYMDHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "yearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "quartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "monthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "monthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "hoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "minutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeSMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "secondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcyear(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyear");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcquarter(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcday(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcday");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcdate(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utchours(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcminutes(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcmilliseconds(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcyearmonth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYQ(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcYMDHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcyearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcQM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMD(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMDH(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcHM(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcHMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utchoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    utcSMS(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
            set(obj, "type", "temporal");
            set(obj, "timeUnit", "utcsecondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    }

    toObject(flag) {
      return flag ? {yError2: super.toObject()} : super.toObject();
    }

  }

  function yError2(...args) {
    return new YError2(...args);
  }

  class Projection extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      if (args[0] !== undefined) set(this, "type", args[0]);
    }

    center(...value) {
      if (arguments.length) {
        const obj = copy(this);
        if (value.length === 1 && !Array.isArray(value[0])) {
          value = value[0];
        } else {
          value = flat(value);
        }
        set(obj, "center", value);
        return obj;
      } else {
        return get(this, "center");
      }
    }

    clipAngle(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "clipAngle", value);
        return obj;
      } else {
        return get(this, "clipAngle");
      }
    }

    clipExtent(...value) {
      if (arguments.length) {
        const obj = copy(this);
        if (value.length === 1 && !Array.isArray(value[0])) {
          value = value[0];
        } else {
          value = flat(value);
        }
        set(obj, "clipExtent", value);
        return obj;
      } else {
        return get(this, "clipExtent");
      }
    }

    coefficient(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "coefficient", value);
        return obj;
      } else {
        return get(this, "coefficient");
      }
    }

    distance(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "distance", value);
        return obj;
      } else {
        return get(this, "distance");
      }
    }

    extent(...value) {
      if (arguments.length) {
        const obj = copy(this);
        if (value.length === 1 && !Array.isArray(value[0])) {
          value = value[0];
        } else {
          value = flat(value);
        }
        set(obj, "extent", value);
        return obj;
      } else {
        return get(this, "extent");
      }
    }

    fit(...value) {
      if (arguments.length) {
        const obj = copy(this);
        if (value.length === 1 && !Array.isArray(value[0])) {
          value = value[0];
        } else {
          value = flat(value);
        }
        set(obj, "fit", value);
        return obj;
      } else {
        return get(this, "fit");
      }
    }

    fraction(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "fraction", value);
        return obj;
      } else {
        return get(this, "fraction");
      }
    }

    lobes(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lobes", value);
        return obj;
      } else {
        return get(this, "lobes");
      }
    }

    parallel(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "parallel", value);
        return obj;
      } else {
        return get(this, "parallel");
      }
    }

    parallels(...value) {
      if (arguments.length) {
        const obj = copy(this);
        if (value.length === 1 && !Array.isArray(value[0])) {
          value = value[0];
        } else {
          value = flat(value);
        }
        set(obj, "parallels", value);
        return obj;
      } else {
        return get(this, "parallels");
      }
    }

    pointRadius(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "pointRadius", value);
        return obj;
      } else {
        return get(this, "pointRadius");
      }
    }

    precision(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "precision", value);
        return obj;
      } else {
        return get(this, "precision");
      }
    }

    radius(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "radius", value);
        return obj;
      } else {
        return get(this, "radius");
      }
    }

    ratio(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "ratio", value);
        return obj;
      } else {
        return get(this, "ratio");
      }
    }

    reflectX(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "reflectX", value);
        return obj;
      } else {
        return get(this, "reflectX");
      }
    }

    reflectY(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "reflectY", value);
        return obj;
      } else {
        return get(this, "reflectY");
      }
    }

    rotate(...value) {
      if (arguments.length) {
        const obj = copy(this);
        if (value.length === 1 && !Array.isArray(value[0])) {
          value = value[0];
        } else {
          value = flat(value);
        }
        set(obj, "rotate", value);
        return obj;
      } else {
        return get(this, "rotate");
      }
    }

    scale(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "scale", value);
        return obj;
      } else {
        return get(this, "scale");
      }
    }

    size(...value) {
      if (arguments.length) {
        const obj = copy(this);
        if (value.length === 1 && !Array.isArray(value[0])) {
          value = value[0];
        } else {
          value = flat(value);
        }
        set(obj, "size", value);
        return obj;
      } else {
        return get(this, "size");
      }
    }

    spacing(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "spacing", value);
        return obj;
      } else {
        return get(this, "spacing");
      }
    }

    tilt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "tilt", value);
        return obj;
      } else {
        return get(this, "tilt");
      }
    }

    translate(...value) {
      if (arguments.length) {
        const obj = copy(this);
        if (value.length === 1 && !Array.isArray(value[0])) {
          value = value[0];
        } else {
          value = flat(value);
        }
        set(obj, "translate", value);
        return obj;
      } else {
        return get(this, "translate");
      }
    }

    type(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "type", value);
        return obj;
      } else {
        return get(this, "type");
      }
    }

  }

  function projection(...args) {
    return new Projection(...args);
  }

  class Field extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      if (args[0] !== undefined) set(this, "field", args[0]);
    }

    order(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "order", value);
        return obj;
      } else {
        return get(this, "order");
      }
    }

    type(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "type", value);
        return obj;
      } else {
        return get(this, "type");
      }
    }

    equals(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "equal", value);
        return obj;
      } else {
        return get(this, "equal");
      }
    }

    gte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gte", value);
        return obj;
      } else {
        return get(this, "gte");
      }
    }

    gt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gt", value);
        return obj;
      } else {
        return get(this, "gt");
      }
    }

    lte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lte", value);
        return obj;
      } else {
        return get(this, "lte");
      }
    }

    lt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lt", value);
        return obj;
      } else {
        return get(this, "lt");
      }
    }

    oneOf(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "oneOf", value);
        return obj;
      } else {
        return get(this, "oneOf");
      }
    }

    inRange(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "range", value);
        return obj;
      } else {
        return get(this, "range");
      }
    }

    valid(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "valid", value);
        return obj;
      } else {
        return get(this, "valid");
      }
    }

  }

  function field(...args) {
    return new Field(...args);
  }

  function fieldN(...args) {
    const obj = field(...args);
    set(obj, "type", "nominal");
    return obj;
  }

  function fieldO(...args) {
    const obj = field(...args);
    set(obj, "type", "ordinal");
    return obj;
  }

  function fieldQ(...args) {
    const obj = field(...args);
    set(obj, "type", "quantitative");
    return obj;
  }

  function fieldT(...args) {
    const obj = field(...args);
    set(obj, "type", "temporal");
    return obj;
  }

  class Encoding extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      if (args[0] !== undefined) set(this, "encoding", args[0]);
    }

    order(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "encoding", value);
        return obj;
      } else {
        return get(this, "encoding");
      }
    }

  }

  function encoding(...args) {
    return new Encoding(...args);
  }

  class Repeat extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      if (args[0] !== undefined) set(this, "repeat", args[0]);
    }

    repeat(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "repeat", value);
        return obj;
      } else {
        return get(this, "repeat");
      }
    }

  }

  function repeat(...args) {
    return new Repeat(...args);
  }

  class Value extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      if (args[0] !== undefined) set(this, "value", args[0]);
    }

  }

  function value(...args) {
    return new Value(...args);
  }

  class Expr extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      if (args[0] !== undefined) set(this, "expr", args[0]);
    }

    expr(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "expr", value);
        return obj;
      } else {
        return get(this, "expr");
      }
    }

  }

  function expr(...args) {
    return new Expr(...args);
  }

  class Param extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "name", args[0] !== undefined ? args[0] : id("name"));
    }

    expr(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "expr", value);
        return obj;
      } else {
        return get(this, "expr");
      }
    }

    name(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "name", value);
        return obj;
      } else {
        return get(this, "name");
      }
    }

    value(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "value", value);
        return obj;
      } else {
        return get(this, "value");
      }
    }

    bind(value) {
      if (arguments.length) {
        const obj = copy(this);
        value = isEventTarget(value) ? {element: raw(value)} : value;
        set(obj, "bind", value);
        return obj;
      } else {
        return get(this, "bind");
      }
    }

    toObject(flag) {
      return flag ? super.toObject() : {param: this.name()};
    }

  }

  function param(...args) {
    return new Param(...args);
  }

  class _SelRef extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      if (args[0] !== undefined) set(this, "param", args[0]);
    }

    key(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "key", value);
        return obj;
      } else {
        return get(this, "key");
      }
    }

    fields(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "fields", value);
        return obj;
      } else {
        return get(this, "fields");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    encoding(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "encoding", value);
        return obj;
      } else {
        return get(this, "encoding");
      }
    }

    empty(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "empty", value);
        return obj;
      } else {
        return get(this, "empty");
      }
    }

  }

  function _selRef(...args) {
    return new _SelRef(...args);
  }

  class SelectInterval extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "type", "interval");
      set(this, "name", args[0] !== undefined ? args[0] : id("name"));
    }

    clear(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "clear", value);
        return obj;
      } else {
        return get(this, "clear");
      }
    }

    encodings(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "encodings", value);
        return obj;
      } else {
        return get(this, "encodings");
      }
    }

    fields(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "fields", value);
        return obj;
      } else {
        return get(this, "fields");
      }
    }

    mark(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "mark", value);
        return obj;
      } else {
        return get(this, "mark");
      }
    }

    on(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "on", value);
        return obj;
      } else {
        return get(this, "on");
      }
    }

    resolve(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "resolve", value);
        return obj;
      } else {
        return get(this, "resolve");
      }
    }

    translate(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "translate", value);
        return obj;
      } else {
        return get(this, "translate");
      }
    }

    type(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "type", value);
        return obj;
      } else {
        return get(this, "type");
      }
    }

    zoom(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "zoom", value);
        return obj;
      } else {
        return get(this, "zoom");
      }
    }

    bind(value) {
      if (arguments.length) {
        const obj = copy(this);
        value = isEventTarget(value) ? {element: raw(value)} : value;
        set(obj, "bind", value);
        return obj;
      } else {
        return get(this, "bind");
      }
    }

    name(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "name", value);
        return obj;
      } else {
        return get(this, "name");
      }
    }

    value(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "value", value);
        return obj;
      } else {
        return get(this, "value");
      }
    }

    init(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "value", value);
        return obj;
      } else {
        return get(this, "value");
      }
    }

    views(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "views", value);
        return obj;
      } else {
        return get(this, "views");
      }
    }

    key(...values) {
      let obj = _selRef(this.name());
      return obj.key(...values);
    }

    field(...values) {
      let obj = _selRef(this.name());
      return obj.field(...values);
    }

    encoding(...values) {
      let obj = _selRef(this.name());
      return obj.encoding(...values);
    }

    empty(...values) {
      let obj = _selRef(this.name());
      return obj.empty(...values);
    }

    toObject(flag) {
      return flag ? nest(super.toObject(), ["name","bind","value","views"], "select") : {param: this.name()};
    }

  }

  function selectInterval(...args) {
    return new SelectInterval(...args);
  }

  class SelectPoint extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "type", "point");
      set(this, "name", args[0] !== undefined ? args[0] : id("name"));
    }

    clear(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "clear", value);
        return obj;
      } else {
        return get(this, "clear");
      }
    }

    encodings(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "encodings", value);
        return obj;
      } else {
        return get(this, "encodings");
      }
    }

    fields(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "fields", value);
        return obj;
      } else {
        return get(this, "fields");
      }
    }

    nearest(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "nearest", value);
        return obj;
      } else {
        return get(this, "nearest");
      }
    }

    on(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "on", value);
        return obj;
      } else {
        return get(this, "on");
      }
    }

    resolve(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "resolve", value);
        return obj;
      } else {
        return get(this, "resolve");
      }
    }

    toggle(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "toggle", value);
        return obj;
      } else {
        return get(this, "toggle");
      }
    }

    type(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "type", value);
        return obj;
      } else {
        return get(this, "type");
      }
    }

    bind(value) {
      if (arguments.length) {
        const obj = copy(this);
        value = isEventTarget(value) ? {element: raw(value)} : value;
        set(obj, "bind", value);
        return obj;
      } else {
        return get(this, "bind");
      }
    }

    name(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "name", value);
        return obj;
      } else {
        return get(this, "name");
      }
    }

    value(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "value", value);
        return obj;
      } else {
        return get(this, "value");
      }
    }

    init(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "value", value);
        return obj;
      } else {
        return get(this, "value");
      }
    }

    views(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "views", value);
        return obj;
      } else {
        return get(this, "views");
      }
    }

    key(...values) {
      let obj = _selRef(this.name());
      return obj.key(...values);
    }

    field(...values) {
      let obj = _selRef(this.name());
      return obj.field(...values);
    }

    encoding(...values) {
      let obj = _selRef(this.name());
      return obj.encoding(...values);
    }

    empty(...values) {
      let obj = _selRef(this.name());
      return obj.empty(...values);
    }

    toObject(flag) {
      return flag ? nest(super.toObject(), ["name","bind","value","views"], "select") : {param: this.name()};
    }

  }

  function selectPoint(...args) {
    return new SelectPoint(...args);
  }

  function selectSingle(...args) {
    const obj = selectPoint(...args);
    set(obj, "toggle", false);
    return obj;
  }

  function selectMulti(...args) {
    return selectPoint(...args);
  }

  class ConfigInterval extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "type", "interval");
      assign(this, ...args);
    }

    clear(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "clear", value);
        return obj;
      } else {
        return get(this, "clear");
      }
    }

    encodings(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "encodings", value);
        return obj;
      } else {
        return get(this, "encodings");
      }
    }

    fields(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "fields", value);
        return obj;
      } else {
        return get(this, "fields");
      }
    }

    mark(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "mark", value);
        return obj;
      } else {
        return get(this, "mark");
      }
    }

    on(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "on", value);
        return obj;
      } else {
        return get(this, "on");
      }
    }

    resolve(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "resolve", value);
        return obj;
      } else {
        return get(this, "resolve");
      }
    }

    translate(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "translate", value);
        return obj;
      } else {
        return get(this, "translate");
      }
    }

    type(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "type", value);
        return obj;
      } else {
        return get(this, "type");
      }
    }

    zoom(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "zoom", value);
        return obj;
      } else {
        return get(this, "zoom");
      }
    }

  }

  function configInterval(...args) {
    return new ConfigInterval(...args);
  }

  class ConfigPoint extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "type", "point");
      assign(this, ...args);
    }

    clear(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "clear", value);
        return obj;
      } else {
        return get(this, "clear");
      }
    }

    encodings(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "encodings", value);
        return obj;
      } else {
        return get(this, "encodings");
      }
    }

    fields(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "fields", value);
        return obj;
      } else {
        return get(this, "fields");
      }
    }

    nearest(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "nearest", value);
        return obj;
      } else {
        return get(this, "nearest");
      }
    }

    on(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "on", value);
        return obj;
      } else {
        return get(this, "on");
      }
    }

    resolve(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "resolve", value);
        return obj;
      } else {
        return get(this, "resolve");
      }
    }

    toggle(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "toggle", value);
        return obj;
      } else {
        return get(this, "toggle");
      }
    }

    type(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "type", value);
        return obj;
      } else {
        return get(this, "type");
      }
    }

  }

  function configPoint(...args) {
    return new ConfigPoint(...args);
  }

  class Checkbox extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "input", "checkbox");
      assign(this, ...args);
    }

    debounce(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "debounce", value);
        return obj;
      } else {
        return get(this, "debounce");
      }
    }

    element(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "element", value);
        return obj;
      } else {
        return get(this, "element");
      }
    }

    input(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "input", value);
        return obj;
      } else {
        return get(this, "input");
      }
    }

    name(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "name", value);
        return obj;
      } else {
        return get(this, "name");
      }
    }

  }

  function checkbox(...args) {
    return new Checkbox(...args);
  }

  class Menu extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "input", "select");
      args = flat(args);
      set(this, "options", args);
    }

    debounce(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "debounce", value);
        return obj;
      } else {
        return get(this, "debounce");
      }
    }

    element(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "element", value);
        return obj;
      } else {
        return get(this, "element");
      }
    }

    input(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "input", value);
        return obj;
      } else {
        return get(this, "input");
      }
    }

    labels(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "labels", value);
        return obj;
      } else {
        return get(this, "labels");
      }
    }

    name(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "name", value);
        return obj;
      } else {
        return get(this, "name");
      }
    }

    options(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "options", value);
        return obj;
      } else {
        return get(this, "options");
      }
    }

  }

  function menu(...args) {
    return new Menu(...args);
  }

  class Radio extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "input", "radio");
      args = flat(args);
      set(this, "options", args);
    }

    debounce(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "debounce", value);
        return obj;
      } else {
        return get(this, "debounce");
      }
    }

    element(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "element", value);
        return obj;
      } else {
        return get(this, "element");
      }
    }

    input(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "input", value);
        return obj;
      } else {
        return get(this, "input");
      }
    }

    labels(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "labels", value);
        return obj;
      } else {
        return get(this, "labels");
      }
    }

    name(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "name", value);
        return obj;
      } else {
        return get(this, "name");
      }
    }

    options(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "options", value);
        return obj;
      } else {
        return get(this, "options");
      }
    }

  }

  function radio(...args) {
    return new Radio(...args);
  }

  class Slider extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "input", "range");
      if (args[0] !== undefined) set(this, "min", args[0]);
      if (args[1] !== undefined) set(this, "max", args[1]);
      if (args[2] !== undefined) set(this, "step", args[2]);
    }

    debounce(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "debounce", value);
        return obj;
      } else {
        return get(this, "debounce");
      }
    }

    element(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "element", value);
        return obj;
      } else {
        return get(this, "element");
      }
    }

    input(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "input", value);
        return obj;
      } else {
        return get(this, "input");
      }
    }

    max(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "max", value);
        return obj;
      } else {
        return get(this, "max");
      }
    }

    min(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "min", value);
        return obj;
      } else {
        return get(this, "min");
      }
    }

    name(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "name", value);
        return obj;
      } else {
        return get(this, "name");
      }
    }

    step(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "step", value);
        return obj;
      } else {
        return get(this, "step");
      }
    }

  }

  function slider(...args) {
    return new Slider(...args);
  }

  class Not extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      if (args[0] !== undefined) set(this, "not", args[0]);
    }

  }

  function not(...args) {
    return new Not(...args);
  }

  class And extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      args = flat(args);
      set(this, "and", args);
    }

  }

  function and(...args) {
    return new And(...args);
  }

  class Or extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      args = flat(args);
      set(this, "or", args);
    }

  }

  function or(...args) {
    return new Or(...args);
  }

  class Aggregate extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      args = flat(args);
      set(this, "aggregate", args);
    }

    aggregate(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "aggregate", value);
        return obj;
      } else {
        return get(this, "aggregate");
      }
    }

    groupby(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "groupby", value);
        return obj;
      } else {
        return get(this, "groupby");
      }
    }

  }

  function aggregate(...args) {
    return new Aggregate(...args);
  }

  class Bin extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      if (args[0] !== undefined) set(this, "field", args[0]);
      set(this, "bin", args[1] !== undefined ? args[1] : true);
    }

    as(...value) {
      if (arguments.length) {
        const obj = copy(this);
        if (value.length === 1 && !Array.isArray(value[0])) {
          value = value[0];
        } else {
          value = flat(value);
        }
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    bin(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bin", value);
        return obj;
      } else {
        return get(this, "bin");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

  }

  function bin(...args) {
    return new Bin(...args);
  }

  class Calculate extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      if (args[0] !== undefined) set(this, "calculate", args[0]);
    }

    as(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    calculate(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "calculate", value);
        return obj;
      } else {
        return get(this, "calculate");
      }
    }

  }

  function calculate(...args) {
    return new Calculate(...args);
  }

  class Density extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      if (args[0] !== undefined) set(this, "density", args[0]);
    }

    as(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    bandwidth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bandwidth", value);
        return obj;
      } else {
        return get(this, "bandwidth");
      }
    }

    counts(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "counts", value);
        return obj;
      } else {
        return get(this, "counts");
      }
    }

    cumulative(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "cumulative", value);
        return obj;
      } else {
        return get(this, "cumulative");
      }
    }

    density(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "density", value);
        return obj;
      } else {
        return get(this, "density");
      }
    }

    extent(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "extent", value);
        return obj;
      } else {
        return get(this, "extent");
      }
    }

    groupby(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "groupby", value);
        return obj;
      } else {
        return get(this, "groupby");
      }
    }

    maxsteps(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "maxsteps", value);
        return obj;
      } else {
        return get(this, "maxsteps");
      }
    }

    minsteps(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "minsteps", value);
        return obj;
      } else {
        return get(this, "minsteps");
      }
    }

    steps(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "steps", value);
        return obj;
      } else {
        return get(this, "steps");
      }
    }

  }

  function density(...args) {
    return new Density(...args);
  }

  class Filter extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      if (args[0] !== undefined) set(this, "filter", args[0]);
    }

    filter(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "filter", value);
        return obj;
      } else {
        return get(this, "filter");
      }
    }

  }

  function filter(...args) {
    return new Filter(...args);
  }

  class Flatten extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      args = flat(args);
      set(this, "flatten", args);
    }

    as(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    flatten(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "flatten", value);
        return obj;
      } else {
        return get(this, "flatten");
      }
    }

  }

  function flatten(...args) {
    return new Flatten(...args);
  }

  class Fold extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      args = flat(args);
      set(this, "fold", args);
    }

    as(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    fold(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "fold", value);
        return obj;
      } else {
        return get(this, "fold");
      }
    }

  }

  function fold(...args) {
    return new Fold(...args);
  }

  class Impute extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      if (args[0] !== undefined) set(this, "impute", args[0]);
      if (args[1] !== undefined) set(this, "key", args[1]);
    }

    frame(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "frame", value);
        return obj;
      } else {
        return get(this, "frame");
      }
    }

    groupby(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "groupby", value);
        return obj;
      } else {
        return get(this, "groupby");
      }
    }

    impute(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "impute", value);
        return obj;
      } else {
        return get(this, "impute");
      }
    }

    key(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "key", value);
        return obj;
      } else {
        return get(this, "key");
      }
    }

    keyvals(...value) {
      if (arguments.length) {
        const obj = copy(this);
        if (value.length === 1 && !Array.isArray(value[0])) {
          value = value[0];
        } else {
          value = flat(value);
        }
        set(obj, "keyvals", value);
        return obj;
      } else {
        return get(this, "keyvals");
      }
    }

    method(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "method", value);
        return obj;
      } else {
        return get(this, "method");
      }
    }

    value(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "value", value);
        return obj;
      } else {
        return get(this, "value");
      }
    }

  }

  function impute(...args) {
    return new Impute(...args);
  }

  class Joinaggregate extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      args = flat(args);
      set(this, "joinaggregate", args);
    }

    groupby(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "groupby", value);
        return obj;
      } else {
        return get(this, "groupby");
      }
    }

    joinaggregate(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "joinaggregate", value);
        return obj;
      } else {
        return get(this, "joinaggregate");
      }
    }

  }

  function joinaggregate(...args) {
    return new Joinaggregate(...args);
  }

  class Join extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      args = flat(args);
      set(this, "joinaggregate", args);
    }

    groupby(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "groupby", value);
        return obj;
      } else {
        return get(this, "groupby");
      }
    }

    joinaggregate(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "joinaggregate", value);
        return obj;
      } else {
        return get(this, "joinaggregate");
      }
    }

  }

  function join(...args) {
    return new Join(...args);
  }

  class Loess extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      if (args[0] !== undefined) set(this, "loess", args[0]);
    }

    as(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    bandwidth(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "bandwidth", value);
        return obj;
      } else {
        return get(this, "bandwidth");
      }
    }

    groupby(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "groupby", value);
        return obj;
      } else {
        return get(this, "groupby");
      }
    }

    loess(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "loess", value);
        return obj;
      } else {
        return get(this, "loess");
      }
    }

    on(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "on", value);
        return obj;
      } else {
        return get(this, "on");
      }
    }

  }

  function loess(...args) {
    return new Loess(...args);
  }

  class Lookup extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      if (args[0] !== undefined) set(this, "lookup", args[0]);
    }

    as(...value) {
      if (arguments.length) {
        const obj = copy(this);
        if (value.length === 1 && !Array.isArray(value[0])) {
          value = value[0];
        } else {
          value = flat(value);
        }
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    default(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "default", value);
        return obj;
      } else {
        return get(this, "default");
      }
    }

    from(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "from", value);
        return obj;
      } else {
        return get(this, "from");
      }
    }

    lookup(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lookup", value);
        return obj;
      } else {
        return get(this, "lookup");
      }
    }

  }

  function lookup(...args) {
    return new Lookup(...args);
  }

  class Pivot extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      if (args[0] !== undefined) set(this, "pivot", args[0]);
    }

    groupby(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "groupby", value);
        return obj;
      } else {
        return get(this, "groupby");
      }
    }

    limit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "limit", value);
        return obj;
      } else {
        return get(this, "limit");
      }
    }

    op(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "op", value);
        return obj;
      } else {
        return get(this, "op");
      }
    }

    pivot(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "pivot", value);
        return obj;
      } else {
        return get(this, "pivot");
      }
    }

    value(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "value", value);
        return obj;
      } else {
        return get(this, "value");
      }
    }

  }

  function pivot(...args) {
    return new Pivot(...args);
  }

  class Quantile extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      if (args[0] !== undefined) set(this, "quantile", args[0]);
    }

    as(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    groupby(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "groupby", value);
        return obj;
      } else {
        return get(this, "groupby");
      }
    }

    probs(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "probs", value);
        return obj;
      } else {
        return get(this, "probs");
      }
    }

    quantile(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "quantile", value);
        return obj;
      } else {
        return get(this, "quantile");
      }
    }

    step(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "step", value);
        return obj;
      } else {
        return get(this, "step");
      }
    }

  }

  function quantile(...args) {
    return new Quantile(...args);
  }

  class Regression extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      if (args[0] !== undefined) set(this, "regression", args[0]);
    }

    as(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    extent(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "extent", value);
        return obj;
      } else {
        return get(this, "extent");
      }
    }

    groupby(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "groupby", value);
        return obj;
      } else {
        return get(this, "groupby");
      }
    }

    method(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "method", value);
        return obj;
      } else {
        return get(this, "method");
      }
    }

    on(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "on", value);
        return obj;
      } else {
        return get(this, "on");
      }
    }

    order(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "order", value);
        return obj;
      } else {
        return get(this, "order");
      }
    }

    params(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "params", value);
        return obj;
      } else {
        return get(this, "params");
      }
    }

    regression(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "regression", value);
        return obj;
      } else {
        return get(this, "regression");
      }
    }

  }

  function regression(...args) {
    return new Regression(...args);
  }

  class Sample extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      if (args[0] !== undefined) set(this, "sample", args[0]);
    }

    sample(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "sample", value);
        return obj;
      } else {
        return get(this, "sample");
      }
    }

  }

  function sample(...args) {
    return new Sample(...args);
  }

  class Stack extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      if (args[0] !== undefined) set(this, "stack", args[0]);
    }

    as(...value) {
      if (arguments.length) {
        const obj = copy(this);
        if (value.length === 1 && !Array.isArray(value[0])) {
          value = value[0];
        } else {
          value = flat(value);
        }
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    groupby(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "groupby", value);
        return obj;
      } else {
        return get(this, "groupby");
      }
    }

    offset(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "offset", value);
        return obj;
      } else {
        return get(this, "offset");
      }
    }

    sort(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "sort", value);
        return obj;
      } else {
        return get(this, "sort");
      }
    }

    stack(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "stack", value);
        return obj;
      } else {
        return get(this, "stack");
      }
    }

  }

  function stack(...args) {
    return new Stack(...args);
  }

  class TimeUnit extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      if (args[0] !== undefined) set(this, "timeUnit", args[0]);
      if (args[1] !== undefined) set(this, "field", args[1]);
    }

    as(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeUnit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "timeUnit", value);
        return obj;
      } else {
        return get(this, "timeUnit");
      }
    }

  }

  function timeUnit(...args) {
    return new TimeUnit(...args);
  }

  class Window extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      args = flat(args);
      set(this, "window", args);
    }

    frame(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "frame", value);
        return obj;
      } else {
        return get(this, "frame");
      }
    }

    groupby(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "groupby", value);
        return obj;
      } else {
        return get(this, "groupby");
      }
    }

    ignorePeers(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "ignorePeers", value);
        return obj;
      } else {
        return get(this, "ignorePeers");
      }
    }

    sort(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "sort", value);
        return obj;
      } else {
        return get(this, "sort");
      }
    }

    window(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "window", value);
        return obj;
      } else {
        return get(this, "window");
      }
    }

  }

  function window(...args) {
    return new Window(...args);
  }

  class Groupby extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      args = flat(args);
      set(this, "groupby", args);
    }

    aggregate(...values) {
      const obj = aggregate(...values);
      return assign(obj, this);
    }

    density(...values) {
      const obj = density(...values);
      return assign(obj, this);
    }

    join(...values) {
      const obj = join(...values);
      return assign(obj, this);
    }

    joinaggregate(...values) {
      const obj = joinaggregate(...values);
      return assign(obj, this);
    }

    loess(...values) {
      const obj = loess(...values);
      return assign(obj, this);
    }

    pivot(...values) {
      const obj = pivot(...values);
      return assign(obj, this);
    }

    quantile(...values) {
      const obj = quantile(...values);
      return assign(obj, this);
    }

    regression(...values) {
      const obj = regression(...values);
      return assign(obj, this);
    }

    window(...values) {
      const obj = window(...values);
      return assign(obj, this);
    }

  }

  function groupby(...args) {
    return new Groupby(...args);
  }

  class Count extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "op", "count");
      if (args[0] !== undefined) set(this, "as", args[0]);
    }

    as(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    op(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "op", value);
        return obj;
      } else {
        return get(this, "op");
      }
    }

    order(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "order", value);
        return obj;
      } else {
        return get(this, "order");
      }
    }

  }

  function count(...args) {
    return new Count(...args);
  }

  class Valid extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "op", "valid");
      if (args[0] !== undefined) set(this, "field", args[0]);
      if (args[1] !== undefined) set(this, "as", args[1]);
    }

    as(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    op(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "op", value);
        return obj;
      } else {
        return get(this, "op");
      }
    }

    order(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "order", value);
        return obj;
      } else {
        return get(this, "order");
      }
    }

  }

  function valid(...args) {
    return new Valid(...args);
  }

  class Missing extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "op", "missing");
      if (args[0] !== undefined) set(this, "field", args[0]);
      if (args[1] !== undefined) set(this, "as", args[1]);
    }

    as(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    op(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "op", value);
        return obj;
      } else {
        return get(this, "op");
      }
    }

    order(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "order", value);
        return obj;
      } else {
        return get(this, "order");
      }
    }

  }

  function missing(...args) {
    return new Missing(...args);
  }

  class Distinct extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "op", "distinct");
      if (args[0] !== undefined) set(this, "field", args[0]);
      if (args[1] !== undefined) set(this, "as", args[1]);
    }

    as(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    op(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "op", value);
        return obj;
      } else {
        return get(this, "op");
      }
    }

    order(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "order", value);
        return obj;
      } else {
        return get(this, "order");
      }
    }

  }

  function distinct(...args) {
    return new Distinct(...args);
  }

  class Sum extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "op", "sum");
      if (args[0] !== undefined) set(this, "field", args[0]);
      if (args[1] !== undefined) set(this, "as", args[1]);
    }

    as(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    op(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "op", value);
        return obj;
      } else {
        return get(this, "op");
      }
    }

    order(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "order", value);
        return obj;
      } else {
        return get(this, "order");
      }
    }

  }

  function sum(...args) {
    return new Sum(...args);
  }

  class Mean extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "op", "mean");
      if (args[0] !== undefined) set(this, "field", args[0]);
      if (args[1] !== undefined) set(this, "as", args[1]);
    }

    as(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    op(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "op", value);
        return obj;
      } else {
        return get(this, "op");
      }
    }

    order(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "order", value);
        return obj;
      } else {
        return get(this, "order");
      }
    }

  }

  function mean(...args) {
    return new Mean(...args);
  }

  class Product extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "op", "product");
      if (args[0] !== undefined) set(this, "field", args[0]);
      if (args[1] !== undefined) set(this, "as", args[1]);
    }

    as(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    op(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "op", value);
        return obj;
      } else {
        return get(this, "op");
      }
    }

    order(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "order", value);
        return obj;
      } else {
        return get(this, "order");
      }
    }

  }

  function product(...args) {
    return new Product(...args);
  }

  class Average extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "op", "average");
      if (args[0] !== undefined) set(this, "field", args[0]);
      if (args[1] !== undefined) set(this, "as", args[1]);
    }

    as(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    op(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "op", value);
        return obj;
      } else {
        return get(this, "op");
      }
    }

    order(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "order", value);
        return obj;
      } else {
        return get(this, "order");
      }
    }

  }

  function average(...args) {
    return new Average(...args);
  }

  class Variance extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "op", "variance");
      if (args[0] !== undefined) set(this, "field", args[0]);
      if (args[1] !== undefined) set(this, "as", args[1]);
    }

    as(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    op(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "op", value);
        return obj;
      } else {
        return get(this, "op");
      }
    }

    order(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "order", value);
        return obj;
      } else {
        return get(this, "order");
      }
    }

  }

  function variance(...args) {
    return new Variance(...args);
  }

  class Variancep extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "op", "variancep");
      if (args[0] !== undefined) set(this, "field", args[0]);
      if (args[1] !== undefined) set(this, "as", args[1]);
    }

    as(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    op(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "op", value);
        return obj;
      } else {
        return get(this, "op");
      }
    }

    order(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "order", value);
        return obj;
      } else {
        return get(this, "order");
      }
    }

  }

  function variancep(...args) {
    return new Variancep(...args);
  }

  class Stdev extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "op", "stdev");
      if (args[0] !== undefined) set(this, "field", args[0]);
      if (args[1] !== undefined) set(this, "as", args[1]);
    }

    as(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    op(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "op", value);
        return obj;
      } else {
        return get(this, "op");
      }
    }

    order(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "order", value);
        return obj;
      } else {
        return get(this, "order");
      }
    }

  }

  function stdev(...args) {
    return new Stdev(...args);
  }

  class Stdevp extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "op", "stdevp");
      if (args[0] !== undefined) set(this, "field", args[0]);
      if (args[1] !== undefined) set(this, "as", args[1]);
    }

    as(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    op(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "op", value);
        return obj;
      } else {
        return get(this, "op");
      }
    }

    order(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "order", value);
        return obj;
      } else {
        return get(this, "order");
      }
    }

  }

  function stdevp(...args) {
    return new Stdevp(...args);
  }

  class Stderr extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "op", "stderr");
      if (args[0] !== undefined) set(this, "field", args[0]);
      if (args[1] !== undefined) set(this, "as", args[1]);
    }

    as(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    op(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "op", value);
        return obj;
      } else {
        return get(this, "op");
      }
    }

    order(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "order", value);
        return obj;
      } else {
        return get(this, "order");
      }
    }

  }

  function stderr(...args) {
    return new Stderr(...args);
  }

  class Median extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "op", "median");
      if (args[0] !== undefined) set(this, "field", args[0]);
      if (args[1] !== undefined) set(this, "as", args[1]);
    }

    as(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    op(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "op", value);
        return obj;
      } else {
        return get(this, "op");
      }
    }

    order(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "order", value);
        return obj;
      } else {
        return get(this, "order");
      }
    }

  }

  function median(...args) {
    return new Median(...args);
  }

  class Q1 extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "op", "q1");
      if (args[0] !== undefined) set(this, "field", args[0]);
      if (args[1] !== undefined) set(this, "as", args[1]);
    }

    as(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    op(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "op", value);
        return obj;
      } else {
        return get(this, "op");
      }
    }

    order(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "order", value);
        return obj;
      } else {
        return get(this, "order");
      }
    }

  }

  function q1(...args) {
    return new Q1(...args);
  }

  class Q3 extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "op", "q3");
      if (args[0] !== undefined) set(this, "field", args[0]);
      if (args[1] !== undefined) set(this, "as", args[1]);
    }

    as(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    op(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "op", value);
        return obj;
      } else {
        return get(this, "op");
      }
    }

    order(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "order", value);
        return obj;
      } else {
        return get(this, "order");
      }
    }

  }

  function q3(...args) {
    return new Q3(...args);
  }

  class Ci0 extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "op", "ci0");
      if (args[0] !== undefined) set(this, "field", args[0]);
      if (args[1] !== undefined) set(this, "as", args[1]);
    }

    as(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    op(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "op", value);
        return obj;
      } else {
        return get(this, "op");
      }
    }

    order(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "order", value);
        return obj;
      } else {
        return get(this, "order");
      }
    }

  }

  function ci0(...args) {
    return new Ci0(...args);
  }

  class Ci1 extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "op", "ci1");
      if (args[0] !== undefined) set(this, "field", args[0]);
      if (args[1] !== undefined) set(this, "as", args[1]);
    }

    as(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    op(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "op", value);
        return obj;
      } else {
        return get(this, "op");
      }
    }

    order(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "order", value);
        return obj;
      } else {
        return get(this, "order");
      }
    }

  }

  function ci1(...args) {
    return new Ci1(...args);
  }

  class Min extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "op", "min");
      if (args[0] !== undefined) set(this, "field", args[0]);
      if (args[1] !== undefined) set(this, "as", args[1]);
    }

    as(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    op(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "op", value);
        return obj;
      } else {
        return get(this, "op");
      }
    }

    order(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "order", value);
        return obj;
      } else {
        return get(this, "order");
      }
    }

  }

  function min(...args) {
    return new Min(...args);
  }

  class Max extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "op", "max");
      if (args[0] !== undefined) set(this, "field", args[0]);
      if (args[1] !== undefined) set(this, "as", args[1]);
    }

    as(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    op(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "op", value);
        return obj;
      } else {
        return get(this, "op");
      }
    }

    order(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "order", value);
        return obj;
      } else {
        return get(this, "order");
      }
    }

  }

  function max(...args) {
    return new Max(...args);
  }

  class Argmin extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "op", "argmin");
      if (args[0] !== undefined) set(this, "field", args[0]);
      if (args[1] !== undefined) set(this, "as", args[1]);
    }

    as(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    op(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "op", value);
        return obj;
      } else {
        return get(this, "op");
      }
    }

    order(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "order", value);
        return obj;
      } else {
        return get(this, "order");
      }
    }

  }

  function argmin(...args) {
    return new Argmin(...args);
  }

  class Argmax extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "op", "argmax");
      if (args[0] !== undefined) set(this, "field", args[0]);
      if (args[1] !== undefined) set(this, "as", args[1]);
    }

    as(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    op(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "op", value);
        return obj;
      } else {
        return get(this, "op");
      }
    }

    order(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "order", value);
        return obj;
      } else {
        return get(this, "order");
      }
    }

  }

  function argmax(...args) {
    return new Argmax(...args);
  }

  class Row_number extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "op", "row_number");
      if (args[0] !== undefined) set(this, "as", args[0]);
    }

    as(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    op(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "op", value);
        return obj;
      } else {
        return get(this, "op");
      }
    }

    param(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "param", value);
        return obj;
      } else {
        return get(this, "param");
      }
    }

  }

  function row_number(...args) {
    return new Row_number(...args);
  }

  class Rank extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "op", "rank");
      if (args[0] !== undefined) set(this, "as", args[0]);
    }

    as(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    op(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "op", value);
        return obj;
      } else {
        return get(this, "op");
      }
    }

    param(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "param", value);
        return obj;
      } else {
        return get(this, "param");
      }
    }

  }

  function rank(...args) {
    return new Rank(...args);
  }

  class Dense_rank extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "op", "dense_rank");
      if (args[0] !== undefined) set(this, "as", args[0]);
    }

    as(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    op(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "op", value);
        return obj;
      } else {
        return get(this, "op");
      }
    }

    param(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "param", value);
        return obj;
      } else {
        return get(this, "param");
      }
    }

  }

  function dense_rank(...args) {
    return new Dense_rank(...args);
  }

  class Percent_rank extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "op", "percent_rank");
      if (args[0] !== undefined) set(this, "as", args[0]);
    }

    as(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    op(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "op", value);
        return obj;
      } else {
        return get(this, "op");
      }
    }

    param(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "param", value);
        return obj;
      } else {
        return get(this, "param");
      }
    }

  }

  function percent_rank(...args) {
    return new Percent_rank(...args);
  }

  class Cume_dist extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "op", "cume_dist");
      if (args[0] !== undefined) set(this, "as", args[0]);
    }

    as(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    op(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "op", value);
        return obj;
      } else {
        return get(this, "op");
      }
    }

    param(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "param", value);
        return obj;
      } else {
        return get(this, "param");
      }
    }

  }

  function cume_dist(...args) {
    return new Cume_dist(...args);
  }

  class Ntile extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "op", "ntile");
      if (args[0] !== undefined) set(this, "param", args[0]);
      if (args[1] !== undefined) set(this, "as", args[1]);
    }

    as(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    op(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "op", value);
        return obj;
      } else {
        return get(this, "op");
      }
    }

    param(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "param", value);
        return obj;
      } else {
        return get(this, "param");
      }
    }

  }

  function ntile(...args) {
    return new Ntile(...args);
  }

  class Lag extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "op", "lag");
      if (args[0] !== undefined) set(this, "field", args[0]);
      if (args[1] !== undefined) set(this, "param", args[1]);
      if (args[2] !== undefined) set(this, "as", args[2]);
    }

    as(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    op(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "op", value);
        return obj;
      } else {
        return get(this, "op");
      }
    }

    param(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "param", value);
        return obj;
      } else {
        return get(this, "param");
      }
    }

  }

  function lag(...args) {
    return new Lag(...args);
  }

  class Lead extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "op", "lead");
      if (args[0] !== undefined) set(this, "field", args[0]);
      if (args[1] !== undefined) set(this, "param", args[1]);
      if (args[2] !== undefined) set(this, "as", args[2]);
    }

    as(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    op(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "op", value);
        return obj;
      } else {
        return get(this, "op");
      }
    }

    param(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "param", value);
        return obj;
      } else {
        return get(this, "param");
      }
    }

  }

  function lead(...args) {
    return new Lead(...args);
  }

  class First_value extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "op", "first_value");
      if (args[0] !== undefined) set(this, "field", args[0]);
      if (args[1] !== undefined) set(this, "as", args[1]);
    }

    as(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    op(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "op", value);
        return obj;
      } else {
        return get(this, "op");
      }
    }

    param(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "param", value);
        return obj;
      } else {
        return get(this, "param");
      }
    }

  }

  function first_value(...args) {
    return new First_value(...args);
  }

  class Last_value extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "op", "last_Value");
      if (args[0] !== undefined) set(this, "field", args[0]);
      if (args[1] !== undefined) set(this, "as", args[1]);
    }

    as(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    op(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "op", value);
        return obj;
      } else {
        return get(this, "op");
      }
    }

    param(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "param", value);
        return obj;
      } else {
        return get(this, "param");
      }
    }

  }

  function last_value(...args) {
    return new Last_value(...args);
  }

  class Nth_value extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "op", "nth_value");
      if (args[0] !== undefined) set(this, "field", args[0]);
      if (args[1] !== undefined) set(this, "param", args[1]);
      if (args[2] !== undefined) set(this, "as", args[2]);
    }

    as(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    op(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "op", value);
        return obj;
      } else {
        return get(this, "op");
      }
    }

    param(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "param", value);
        return obj;
      } else {
        return get(this, "param");
      }
    }

  }

  function nth_value(...args) {
    return new Nth_value(...args);
  }

  class Year extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "timeUnit", "year");
      if (args[0] !== undefined) set(this, "field", args[0]);
      if (args[1] !== undefined) set(this, "as", args[1]);
    }

    as(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeUnit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "timeUnit", value);
        return obj;
      } else {
        return get(this, "timeUnit");
      }
    }

    equals(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "equal", value);
        return obj;
      } else {
        return get(this, "equal");
      }
    }

    gte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gte", value);
        return obj;
      } else {
        return get(this, "gte");
      }
    }

    gt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gt", value);
        return obj;
      } else {
        return get(this, "gt");
      }
    }

    lte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lte", value);
        return obj;
      } else {
        return get(this, "lte");
      }
    }

    lt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lt", value);
        return obj;
      } else {
        return get(this, "lt");
      }
    }

    oneOf(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "oneOf", value);
        return obj;
      } else {
        return get(this, "oneOf");
      }
    }

    inRange(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "range", value);
        return obj;
      } else {
        return get(this, "range");
      }
    }

    valid(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "valid", value);
        return obj;
      } else {
        return get(this, "valid");
      }
    }

  }

  function year(...args) {
    return new Year(...args);
  }

  class Quarter extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "timeUnit", "quarter");
      if (args[0] !== undefined) set(this, "field", args[0]);
      if (args[1] !== undefined) set(this, "as", args[1]);
    }

    as(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeUnit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "timeUnit", value);
        return obj;
      } else {
        return get(this, "timeUnit");
      }
    }

    equals(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "equal", value);
        return obj;
      } else {
        return get(this, "equal");
      }
    }

    gte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gte", value);
        return obj;
      } else {
        return get(this, "gte");
      }
    }

    gt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gt", value);
        return obj;
      } else {
        return get(this, "gt");
      }
    }

    lte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lte", value);
        return obj;
      } else {
        return get(this, "lte");
      }
    }

    lt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lt", value);
        return obj;
      } else {
        return get(this, "lt");
      }
    }

    oneOf(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "oneOf", value);
        return obj;
      } else {
        return get(this, "oneOf");
      }
    }

    inRange(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "range", value);
        return obj;
      } else {
        return get(this, "range");
      }
    }

    valid(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "valid", value);
        return obj;
      } else {
        return get(this, "valid");
      }
    }

  }

  function quarter(...args) {
    return new Quarter(...args);
  }

  class Month extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "timeUnit", "month");
      if (args[0] !== undefined) set(this, "field", args[0]);
      if (args[1] !== undefined) set(this, "as", args[1]);
    }

    as(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeUnit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "timeUnit", value);
        return obj;
      } else {
        return get(this, "timeUnit");
      }
    }

    equals(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "equal", value);
        return obj;
      } else {
        return get(this, "equal");
      }
    }

    gte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gte", value);
        return obj;
      } else {
        return get(this, "gte");
      }
    }

    gt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gt", value);
        return obj;
      } else {
        return get(this, "gt");
      }
    }

    lte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lte", value);
        return obj;
      } else {
        return get(this, "lte");
      }
    }

    lt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lt", value);
        return obj;
      } else {
        return get(this, "lt");
      }
    }

    oneOf(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "oneOf", value);
        return obj;
      } else {
        return get(this, "oneOf");
      }
    }

    inRange(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "range", value);
        return obj;
      } else {
        return get(this, "range");
      }
    }

    valid(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "valid", value);
        return obj;
      } else {
        return get(this, "valid");
      }
    }

  }

  function month(...args) {
    return new Month(...args);
  }

  class Day extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "timeUnit", "day");
      if (args[0] !== undefined) set(this, "field", args[0]);
      if (args[1] !== undefined) set(this, "as", args[1]);
    }

    as(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeUnit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "timeUnit", value);
        return obj;
      } else {
        return get(this, "timeUnit");
      }
    }

    equals(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "equal", value);
        return obj;
      } else {
        return get(this, "equal");
      }
    }

    gte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gte", value);
        return obj;
      } else {
        return get(this, "gte");
      }
    }

    gt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gt", value);
        return obj;
      } else {
        return get(this, "gt");
      }
    }

    lte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lte", value);
        return obj;
      } else {
        return get(this, "lte");
      }
    }

    lt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lt", value);
        return obj;
      } else {
        return get(this, "lt");
      }
    }

    oneOf(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "oneOf", value);
        return obj;
      } else {
        return get(this, "oneOf");
      }
    }

    inRange(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "range", value);
        return obj;
      } else {
        return get(this, "range");
      }
    }

    valid(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "valid", value);
        return obj;
      } else {
        return get(this, "valid");
      }
    }

  }

  function day(...args) {
    return new Day(...args);
  }

  class Date extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "timeUnit", "date");
      if (args[0] !== undefined) set(this, "field", args[0]);
      if (args[1] !== undefined) set(this, "as", args[1]);
    }

    as(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeUnit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "timeUnit", value);
        return obj;
      } else {
        return get(this, "timeUnit");
      }
    }

    equals(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "equal", value);
        return obj;
      } else {
        return get(this, "equal");
      }
    }

    gte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gte", value);
        return obj;
      } else {
        return get(this, "gte");
      }
    }

    gt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gt", value);
        return obj;
      } else {
        return get(this, "gt");
      }
    }

    lte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lte", value);
        return obj;
      } else {
        return get(this, "lte");
      }
    }

    lt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lt", value);
        return obj;
      } else {
        return get(this, "lt");
      }
    }

    oneOf(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "oneOf", value);
        return obj;
      } else {
        return get(this, "oneOf");
      }
    }

    inRange(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "range", value);
        return obj;
      } else {
        return get(this, "range");
      }
    }

    valid(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "valid", value);
        return obj;
      } else {
        return get(this, "valid");
      }
    }

  }

  function date(...args) {
    return new Date(...args);
  }

  class Hours extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "timeUnit", "hours");
      if (args[0] !== undefined) set(this, "field", args[0]);
      if (args[1] !== undefined) set(this, "as", args[1]);
    }

    as(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeUnit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "timeUnit", value);
        return obj;
      } else {
        return get(this, "timeUnit");
      }
    }

    equals(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "equal", value);
        return obj;
      } else {
        return get(this, "equal");
      }
    }

    gte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gte", value);
        return obj;
      } else {
        return get(this, "gte");
      }
    }

    gt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gt", value);
        return obj;
      } else {
        return get(this, "gt");
      }
    }

    lte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lte", value);
        return obj;
      } else {
        return get(this, "lte");
      }
    }

    lt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lt", value);
        return obj;
      } else {
        return get(this, "lt");
      }
    }

    oneOf(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "oneOf", value);
        return obj;
      } else {
        return get(this, "oneOf");
      }
    }

    inRange(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "range", value);
        return obj;
      } else {
        return get(this, "range");
      }
    }

    valid(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "valid", value);
        return obj;
      } else {
        return get(this, "valid");
      }
    }

  }

  function hours(...args) {
    return new Hours(...args);
  }

  class Minutes extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "timeUnit", "minutes");
      if (args[0] !== undefined) set(this, "field", args[0]);
      if (args[1] !== undefined) set(this, "as", args[1]);
    }

    as(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeUnit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "timeUnit", value);
        return obj;
      } else {
        return get(this, "timeUnit");
      }
    }

    equals(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "equal", value);
        return obj;
      } else {
        return get(this, "equal");
      }
    }

    gte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gte", value);
        return obj;
      } else {
        return get(this, "gte");
      }
    }

    gt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gt", value);
        return obj;
      } else {
        return get(this, "gt");
      }
    }

    lte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lte", value);
        return obj;
      } else {
        return get(this, "lte");
      }
    }

    lt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lt", value);
        return obj;
      } else {
        return get(this, "lt");
      }
    }

    oneOf(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "oneOf", value);
        return obj;
      } else {
        return get(this, "oneOf");
      }
    }

    inRange(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "range", value);
        return obj;
      } else {
        return get(this, "range");
      }
    }

    valid(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "valid", value);
        return obj;
      } else {
        return get(this, "valid");
      }
    }

  }

  function minutes(...args) {
    return new Minutes(...args);
  }

  class Seconds extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "timeUnit", "seconds");
      if (args[0] !== undefined) set(this, "field", args[0]);
      if (args[1] !== undefined) set(this, "as", args[1]);
    }

    as(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeUnit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "timeUnit", value);
        return obj;
      } else {
        return get(this, "timeUnit");
      }
    }

    equals(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "equal", value);
        return obj;
      } else {
        return get(this, "equal");
      }
    }

    gte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gte", value);
        return obj;
      } else {
        return get(this, "gte");
      }
    }

    gt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gt", value);
        return obj;
      } else {
        return get(this, "gt");
      }
    }

    lte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lte", value);
        return obj;
      } else {
        return get(this, "lte");
      }
    }

    lt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lt", value);
        return obj;
      } else {
        return get(this, "lt");
      }
    }

    oneOf(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "oneOf", value);
        return obj;
      } else {
        return get(this, "oneOf");
      }
    }

    inRange(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "range", value);
        return obj;
      } else {
        return get(this, "range");
      }
    }

    valid(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "valid", value);
        return obj;
      } else {
        return get(this, "valid");
      }
    }

  }

  function seconds(...args) {
    return new Seconds(...args);
  }

  class Milliseconds extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "timeUnit", "milliseconds");
      if (args[0] !== undefined) set(this, "field", args[0]);
      if (args[1] !== undefined) set(this, "as", args[1]);
    }

    as(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeUnit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "timeUnit", value);
        return obj;
      } else {
        return get(this, "timeUnit");
      }
    }

    equals(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "equal", value);
        return obj;
      } else {
        return get(this, "equal");
      }
    }

    gte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gte", value);
        return obj;
      } else {
        return get(this, "gte");
      }
    }

    gt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gt", value);
        return obj;
      } else {
        return get(this, "gt");
      }
    }

    lte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lte", value);
        return obj;
      } else {
        return get(this, "lte");
      }
    }

    lt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lt", value);
        return obj;
      } else {
        return get(this, "lt");
      }
    }

    oneOf(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "oneOf", value);
        return obj;
      } else {
        return get(this, "oneOf");
      }
    }

    inRange(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "range", value);
        return obj;
      } else {
        return get(this, "range");
      }
    }

    valid(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "valid", value);
        return obj;
      } else {
        return get(this, "valid");
      }
    }

  }

  function milliseconds(...args) {
    return new Milliseconds(...args);
  }

  class Yearmonth extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "timeUnit", "yearmonth");
      if (args[0] !== undefined) set(this, "field", args[0]);
      if (args[1] !== undefined) set(this, "as", args[1]);
    }

    as(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeUnit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "timeUnit", value);
        return obj;
      } else {
        return get(this, "timeUnit");
      }
    }

    equals(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "equal", value);
        return obj;
      } else {
        return get(this, "equal");
      }
    }

    gte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gte", value);
        return obj;
      } else {
        return get(this, "gte");
      }
    }

    gt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gt", value);
        return obj;
      } else {
        return get(this, "gt");
      }
    }

    lte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lte", value);
        return obj;
      } else {
        return get(this, "lte");
      }
    }

    lt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lt", value);
        return obj;
      } else {
        return get(this, "lt");
      }
    }

    oneOf(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "oneOf", value);
        return obj;
      } else {
        return get(this, "oneOf");
      }
    }

    inRange(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "range", value);
        return obj;
      } else {
        return get(this, "range");
      }
    }

    valid(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "valid", value);
        return obj;
      } else {
        return get(this, "valid");
      }
    }

  }

  function yearmonth(...args) {
    return new Yearmonth(...args);
  }

  class TimeYQ extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "timeUnit", "yearquarter");
      if (args[0] !== undefined) set(this, "field", args[0]);
      if (args[1] !== undefined) set(this, "as", args[1]);
    }

    as(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeUnit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "timeUnit", value);
        return obj;
      } else {
        return get(this, "timeUnit");
      }
    }

    equals(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "equal", value);
        return obj;
      } else {
        return get(this, "equal");
      }
    }

    gte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gte", value);
        return obj;
      } else {
        return get(this, "gte");
      }
    }

    gt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gt", value);
        return obj;
      } else {
        return get(this, "gt");
      }
    }

    lte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lte", value);
        return obj;
      } else {
        return get(this, "lte");
      }
    }

    lt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lt", value);
        return obj;
      } else {
        return get(this, "lt");
      }
    }

    oneOf(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "oneOf", value);
        return obj;
      } else {
        return get(this, "oneOf");
      }
    }

    inRange(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "range", value);
        return obj;
      } else {
        return get(this, "range");
      }
    }

    valid(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "valid", value);
        return obj;
      } else {
        return get(this, "valid");
      }
    }

  }

  function timeYQ(...args) {
    return new TimeYQ(...args);
  }

  class TimeYQM extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "timeUnit", "yearquartermonth");
      if (args[0] !== undefined) set(this, "field", args[0]);
      if (args[1] !== undefined) set(this, "as", args[1]);
    }

    as(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeUnit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "timeUnit", value);
        return obj;
      } else {
        return get(this, "timeUnit");
      }
    }

    equals(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "equal", value);
        return obj;
      } else {
        return get(this, "equal");
      }
    }

    gte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gte", value);
        return obj;
      } else {
        return get(this, "gte");
      }
    }

    gt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gt", value);
        return obj;
      } else {
        return get(this, "gt");
      }
    }

    lte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lte", value);
        return obj;
      } else {
        return get(this, "lte");
      }
    }

    lt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lt", value);
        return obj;
      } else {
        return get(this, "lt");
      }
    }

    oneOf(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "oneOf", value);
        return obj;
      } else {
        return get(this, "oneOf");
      }
    }

    inRange(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "range", value);
        return obj;
      } else {
        return get(this, "range");
      }
    }

    valid(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "valid", value);
        return obj;
      } else {
        return get(this, "valid");
      }
    }

  }

  function timeYQM(...args) {
    return new TimeYQM(...args);
  }

  class TimeYM extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "timeUnit", "yearmonth");
      if (args[0] !== undefined) set(this, "field", args[0]);
      if (args[1] !== undefined) set(this, "as", args[1]);
    }

    as(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeUnit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "timeUnit", value);
        return obj;
      } else {
        return get(this, "timeUnit");
      }
    }

    equals(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "equal", value);
        return obj;
      } else {
        return get(this, "equal");
      }
    }

    gte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gte", value);
        return obj;
      } else {
        return get(this, "gte");
      }
    }

    gt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gt", value);
        return obj;
      } else {
        return get(this, "gt");
      }
    }

    lte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lte", value);
        return obj;
      } else {
        return get(this, "lte");
      }
    }

    lt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lt", value);
        return obj;
      } else {
        return get(this, "lt");
      }
    }

    oneOf(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "oneOf", value);
        return obj;
      } else {
        return get(this, "oneOf");
      }
    }

    inRange(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "range", value);
        return obj;
      } else {
        return get(this, "range");
      }
    }

    valid(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "valid", value);
        return obj;
      } else {
        return get(this, "valid");
      }
    }

  }

  function timeYM(...args) {
    return new TimeYM(...args);
  }

  class TimeYMD extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "timeUnit", "yearmonthdate");
      if (args[0] !== undefined) set(this, "field", args[0]);
      if (args[1] !== undefined) set(this, "as", args[1]);
    }

    as(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeUnit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "timeUnit", value);
        return obj;
      } else {
        return get(this, "timeUnit");
      }
    }

    equals(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "equal", value);
        return obj;
      } else {
        return get(this, "equal");
      }
    }

    gte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gte", value);
        return obj;
      } else {
        return get(this, "gte");
      }
    }

    gt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gt", value);
        return obj;
      } else {
        return get(this, "gt");
      }
    }

    lte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lte", value);
        return obj;
      } else {
        return get(this, "lte");
      }
    }

    lt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lt", value);
        return obj;
      } else {
        return get(this, "lt");
      }
    }

    oneOf(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "oneOf", value);
        return obj;
      } else {
        return get(this, "oneOf");
      }
    }

    inRange(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "range", value);
        return obj;
      } else {
        return get(this, "range");
      }
    }

    valid(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "valid", value);
        return obj;
      } else {
        return get(this, "valid");
      }
    }

  }

  function timeYMD(...args) {
    return new TimeYMD(...args);
  }

  class TimeYMDH extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "timeUnit", "yearmonthdatehours");
      if (args[0] !== undefined) set(this, "field", args[0]);
      if (args[1] !== undefined) set(this, "as", args[1]);
    }

    as(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeUnit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "timeUnit", value);
        return obj;
      } else {
        return get(this, "timeUnit");
      }
    }

    equals(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "equal", value);
        return obj;
      } else {
        return get(this, "equal");
      }
    }

    gte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gte", value);
        return obj;
      } else {
        return get(this, "gte");
      }
    }

    gt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gt", value);
        return obj;
      } else {
        return get(this, "gt");
      }
    }

    lte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lte", value);
        return obj;
      } else {
        return get(this, "lte");
      }
    }

    lt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lt", value);
        return obj;
      } else {
        return get(this, "lt");
      }
    }

    oneOf(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "oneOf", value);
        return obj;
      } else {
        return get(this, "oneOf");
      }
    }

    inRange(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "range", value);
        return obj;
      } else {
        return get(this, "range");
      }
    }

    valid(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "valid", value);
        return obj;
      } else {
        return get(this, "valid");
      }
    }

  }

  function timeYMDH(...args) {
    return new TimeYMDH(...args);
  }

  class TimeYMDHM extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "timeUnit", "yearmonthdatehoursminutes");
      if (args[0] !== undefined) set(this, "field", args[0]);
      if (args[1] !== undefined) set(this, "as", args[1]);
    }

    as(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeUnit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "timeUnit", value);
        return obj;
      } else {
        return get(this, "timeUnit");
      }
    }

    equals(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "equal", value);
        return obj;
      } else {
        return get(this, "equal");
      }
    }

    gte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gte", value);
        return obj;
      } else {
        return get(this, "gte");
      }
    }

    gt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gt", value);
        return obj;
      } else {
        return get(this, "gt");
      }
    }

    lte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lte", value);
        return obj;
      } else {
        return get(this, "lte");
      }
    }

    lt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lt", value);
        return obj;
      } else {
        return get(this, "lt");
      }
    }

    oneOf(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "oneOf", value);
        return obj;
      } else {
        return get(this, "oneOf");
      }
    }

    inRange(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "range", value);
        return obj;
      } else {
        return get(this, "range");
      }
    }

    valid(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "valid", value);
        return obj;
      } else {
        return get(this, "valid");
      }
    }

  }

  function timeYMDHM(...args) {
    return new TimeYMDHM(...args);
  }

  class TimeYMDHMS extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "timeUnit", "yearmonthdatehoursminutesseconds");
      if (args[0] !== undefined) set(this, "field", args[0]);
      if (args[1] !== undefined) set(this, "as", args[1]);
    }

    as(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeUnit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "timeUnit", value);
        return obj;
      } else {
        return get(this, "timeUnit");
      }
    }

    equals(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "equal", value);
        return obj;
      } else {
        return get(this, "equal");
      }
    }

    gte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gte", value);
        return obj;
      } else {
        return get(this, "gte");
      }
    }

    gt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gt", value);
        return obj;
      } else {
        return get(this, "gt");
      }
    }

    lte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lte", value);
        return obj;
      } else {
        return get(this, "lte");
      }
    }

    lt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lt", value);
        return obj;
      } else {
        return get(this, "lt");
      }
    }

    oneOf(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "oneOf", value);
        return obj;
      } else {
        return get(this, "oneOf");
      }
    }

    inRange(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "range", value);
        return obj;
      } else {
        return get(this, "range");
      }
    }

    valid(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "valid", value);
        return obj;
      } else {
        return get(this, "valid");
      }
    }

  }

  function timeYMDHMS(...args) {
    return new TimeYMDHMS(...args);
  }

  class TimeQM extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "timeUnit", "quartermonth");
      if (args[0] !== undefined) set(this, "field", args[0]);
      if (args[1] !== undefined) set(this, "as", args[1]);
    }

    as(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeUnit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "timeUnit", value);
        return obj;
      } else {
        return get(this, "timeUnit");
      }
    }

    equals(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "equal", value);
        return obj;
      } else {
        return get(this, "equal");
      }
    }

    gte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gte", value);
        return obj;
      } else {
        return get(this, "gte");
      }
    }

    gt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gt", value);
        return obj;
      } else {
        return get(this, "gt");
      }
    }

    lte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lte", value);
        return obj;
      } else {
        return get(this, "lte");
      }
    }

    lt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lt", value);
        return obj;
      } else {
        return get(this, "lt");
      }
    }

    oneOf(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "oneOf", value);
        return obj;
      } else {
        return get(this, "oneOf");
      }
    }

    inRange(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "range", value);
        return obj;
      } else {
        return get(this, "range");
      }
    }

    valid(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "valid", value);
        return obj;
      } else {
        return get(this, "valid");
      }
    }

  }

  function timeQM(...args) {
    return new TimeQM(...args);
  }

  class TimeMD extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "timeUnit", "monthdate");
      if (args[0] !== undefined) set(this, "field", args[0]);
      if (args[1] !== undefined) set(this, "as", args[1]);
    }

    as(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeUnit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "timeUnit", value);
        return obj;
      } else {
        return get(this, "timeUnit");
      }
    }

    equals(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "equal", value);
        return obj;
      } else {
        return get(this, "equal");
      }
    }

    gte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gte", value);
        return obj;
      } else {
        return get(this, "gte");
      }
    }

    gt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gt", value);
        return obj;
      } else {
        return get(this, "gt");
      }
    }

    lte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lte", value);
        return obj;
      } else {
        return get(this, "lte");
      }
    }

    lt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lt", value);
        return obj;
      } else {
        return get(this, "lt");
      }
    }

    oneOf(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "oneOf", value);
        return obj;
      } else {
        return get(this, "oneOf");
      }
    }

    inRange(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "range", value);
        return obj;
      } else {
        return get(this, "range");
      }
    }

    valid(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "valid", value);
        return obj;
      } else {
        return get(this, "valid");
      }
    }

  }

  function timeMD(...args) {
    return new TimeMD(...args);
  }

  class TimeMDH extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "timeUnit", "monthdatehours");
      if (args[0] !== undefined) set(this, "field", args[0]);
      if (args[1] !== undefined) set(this, "as", args[1]);
    }

    as(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeUnit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "timeUnit", value);
        return obj;
      } else {
        return get(this, "timeUnit");
      }
    }

    equals(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "equal", value);
        return obj;
      } else {
        return get(this, "equal");
      }
    }

    gte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gte", value);
        return obj;
      } else {
        return get(this, "gte");
      }
    }

    gt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gt", value);
        return obj;
      } else {
        return get(this, "gt");
      }
    }

    lte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lte", value);
        return obj;
      } else {
        return get(this, "lte");
      }
    }

    lt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lt", value);
        return obj;
      } else {
        return get(this, "lt");
      }
    }

    oneOf(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "oneOf", value);
        return obj;
      } else {
        return get(this, "oneOf");
      }
    }

    inRange(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "range", value);
        return obj;
      } else {
        return get(this, "range");
      }
    }

    valid(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "valid", value);
        return obj;
      } else {
        return get(this, "valid");
      }
    }

  }

  function timeMDH(...args) {
    return new TimeMDH(...args);
  }

  class TimeHM extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "timeUnit", "hoursminutes");
      if (args[0] !== undefined) set(this, "field", args[0]);
      if (args[1] !== undefined) set(this, "as", args[1]);
    }

    as(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeUnit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "timeUnit", value);
        return obj;
      } else {
        return get(this, "timeUnit");
      }
    }

    equals(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "equal", value);
        return obj;
      } else {
        return get(this, "equal");
      }
    }

    gte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gte", value);
        return obj;
      } else {
        return get(this, "gte");
      }
    }

    gt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gt", value);
        return obj;
      } else {
        return get(this, "gt");
      }
    }

    lte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lte", value);
        return obj;
      } else {
        return get(this, "lte");
      }
    }

    lt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lt", value);
        return obj;
      } else {
        return get(this, "lt");
      }
    }

    oneOf(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "oneOf", value);
        return obj;
      } else {
        return get(this, "oneOf");
      }
    }

    inRange(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "range", value);
        return obj;
      } else {
        return get(this, "range");
      }
    }

    valid(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "valid", value);
        return obj;
      } else {
        return get(this, "valid");
      }
    }

  }

  function timeHM(...args) {
    return new TimeHM(...args);
  }

  class TimeHMS extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "timeUnit", "hoursminutesseconds");
      if (args[0] !== undefined) set(this, "field", args[0]);
      if (args[1] !== undefined) set(this, "as", args[1]);
    }

    as(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeUnit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "timeUnit", value);
        return obj;
      } else {
        return get(this, "timeUnit");
      }
    }

    equals(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "equal", value);
        return obj;
      } else {
        return get(this, "equal");
      }
    }

    gte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gte", value);
        return obj;
      } else {
        return get(this, "gte");
      }
    }

    gt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gt", value);
        return obj;
      } else {
        return get(this, "gt");
      }
    }

    lte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lte", value);
        return obj;
      } else {
        return get(this, "lte");
      }
    }

    lt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lt", value);
        return obj;
      } else {
        return get(this, "lt");
      }
    }

    oneOf(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "oneOf", value);
        return obj;
      } else {
        return get(this, "oneOf");
      }
    }

    inRange(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "range", value);
        return obj;
      } else {
        return get(this, "range");
      }
    }

    valid(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "valid", value);
        return obj;
      } else {
        return get(this, "valid");
      }
    }

  }

  function timeHMS(...args) {
    return new TimeHMS(...args);
  }

  class TimeMS extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "timeUnit", "minutesseconds");
      if (args[0] !== undefined) set(this, "field", args[0]);
      if (args[1] !== undefined) set(this, "as", args[1]);
    }

    as(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeUnit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "timeUnit", value);
        return obj;
      } else {
        return get(this, "timeUnit");
      }
    }

    equals(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "equal", value);
        return obj;
      } else {
        return get(this, "equal");
      }
    }

    gte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gte", value);
        return obj;
      } else {
        return get(this, "gte");
      }
    }

    gt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gt", value);
        return obj;
      } else {
        return get(this, "gt");
      }
    }

    lte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lte", value);
        return obj;
      } else {
        return get(this, "lte");
      }
    }

    lt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lt", value);
        return obj;
      } else {
        return get(this, "lt");
      }
    }

    oneOf(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "oneOf", value);
        return obj;
      } else {
        return get(this, "oneOf");
      }
    }

    inRange(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "range", value);
        return obj;
      } else {
        return get(this, "range");
      }
    }

    valid(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "valid", value);
        return obj;
      } else {
        return get(this, "valid");
      }
    }

  }

  function timeMS(...args) {
    return new TimeMS(...args);
  }

  class TimeSMS extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "timeUnit", "secondsmilliseconds");
      if (args[0] !== undefined) set(this, "field", args[0]);
      if (args[1] !== undefined) set(this, "as", args[1]);
    }

    as(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeUnit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "timeUnit", value);
        return obj;
      } else {
        return get(this, "timeUnit");
      }
    }

    equals(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "equal", value);
        return obj;
      } else {
        return get(this, "equal");
      }
    }

    gte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gte", value);
        return obj;
      } else {
        return get(this, "gte");
      }
    }

    gt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gt", value);
        return obj;
      } else {
        return get(this, "gt");
      }
    }

    lte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lte", value);
        return obj;
      } else {
        return get(this, "lte");
      }
    }

    lt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lt", value);
        return obj;
      } else {
        return get(this, "lt");
      }
    }

    oneOf(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "oneOf", value);
        return obj;
      } else {
        return get(this, "oneOf");
      }
    }

    inRange(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "range", value);
        return obj;
      } else {
        return get(this, "range");
      }
    }

    valid(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "valid", value);
        return obj;
      } else {
        return get(this, "valid");
      }
    }

  }

  function timeSMS(...args) {
    return new TimeSMS(...args);
  }

  class Utcyear extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "timeUnit", "utcyear");
      if (args[0] !== undefined) set(this, "field", args[0]);
      if (args[1] !== undefined) set(this, "as", args[1]);
    }

    as(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeUnit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "timeUnit", value);
        return obj;
      } else {
        return get(this, "timeUnit");
      }
    }

    equals(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "equal", value);
        return obj;
      } else {
        return get(this, "equal");
      }
    }

    gte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gte", value);
        return obj;
      } else {
        return get(this, "gte");
      }
    }

    gt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gt", value);
        return obj;
      } else {
        return get(this, "gt");
      }
    }

    lte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lte", value);
        return obj;
      } else {
        return get(this, "lte");
      }
    }

    lt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lt", value);
        return obj;
      } else {
        return get(this, "lt");
      }
    }

    oneOf(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "oneOf", value);
        return obj;
      } else {
        return get(this, "oneOf");
      }
    }

    inRange(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "range", value);
        return obj;
      } else {
        return get(this, "range");
      }
    }

    valid(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "valid", value);
        return obj;
      } else {
        return get(this, "valid");
      }
    }

  }

  function utcyear(...args) {
    return new Utcyear(...args);
  }

  class Utcquarter extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "timeUnit", "utcquarter");
      if (args[0] !== undefined) set(this, "field", args[0]);
      if (args[1] !== undefined) set(this, "as", args[1]);
    }

    as(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeUnit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "timeUnit", value);
        return obj;
      } else {
        return get(this, "timeUnit");
      }
    }

    equals(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "equal", value);
        return obj;
      } else {
        return get(this, "equal");
      }
    }

    gte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gte", value);
        return obj;
      } else {
        return get(this, "gte");
      }
    }

    gt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gt", value);
        return obj;
      } else {
        return get(this, "gt");
      }
    }

    lte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lte", value);
        return obj;
      } else {
        return get(this, "lte");
      }
    }

    lt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lt", value);
        return obj;
      } else {
        return get(this, "lt");
      }
    }

    oneOf(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "oneOf", value);
        return obj;
      } else {
        return get(this, "oneOf");
      }
    }

    inRange(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "range", value);
        return obj;
      } else {
        return get(this, "range");
      }
    }

    valid(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "valid", value);
        return obj;
      } else {
        return get(this, "valid");
      }
    }

  }

  function utcquarter(...args) {
    return new Utcquarter(...args);
  }

  class Utcmonth extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "timeUnit", "utcmonth");
      if (args[0] !== undefined) set(this, "field", args[0]);
      if (args[1] !== undefined) set(this, "as", args[1]);
    }

    as(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeUnit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "timeUnit", value);
        return obj;
      } else {
        return get(this, "timeUnit");
      }
    }

    equals(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "equal", value);
        return obj;
      } else {
        return get(this, "equal");
      }
    }

    gte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gte", value);
        return obj;
      } else {
        return get(this, "gte");
      }
    }

    gt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gt", value);
        return obj;
      } else {
        return get(this, "gt");
      }
    }

    lte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lte", value);
        return obj;
      } else {
        return get(this, "lte");
      }
    }

    lt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lt", value);
        return obj;
      } else {
        return get(this, "lt");
      }
    }

    oneOf(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "oneOf", value);
        return obj;
      } else {
        return get(this, "oneOf");
      }
    }

    inRange(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "range", value);
        return obj;
      } else {
        return get(this, "range");
      }
    }

    valid(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "valid", value);
        return obj;
      } else {
        return get(this, "valid");
      }
    }

  }

  function utcmonth(...args) {
    return new Utcmonth(...args);
  }

  class Utcday extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "timeUnit", "utcday");
      if (args[0] !== undefined) set(this, "field", args[0]);
      if (args[1] !== undefined) set(this, "as", args[1]);
    }

    as(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeUnit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "timeUnit", value);
        return obj;
      } else {
        return get(this, "timeUnit");
      }
    }

    equals(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "equal", value);
        return obj;
      } else {
        return get(this, "equal");
      }
    }

    gte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gte", value);
        return obj;
      } else {
        return get(this, "gte");
      }
    }

    gt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gt", value);
        return obj;
      } else {
        return get(this, "gt");
      }
    }

    lte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lte", value);
        return obj;
      } else {
        return get(this, "lte");
      }
    }

    lt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lt", value);
        return obj;
      } else {
        return get(this, "lt");
      }
    }

    oneOf(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "oneOf", value);
        return obj;
      } else {
        return get(this, "oneOf");
      }
    }

    inRange(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "range", value);
        return obj;
      } else {
        return get(this, "range");
      }
    }

    valid(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "valid", value);
        return obj;
      } else {
        return get(this, "valid");
      }
    }

  }

  function utcday(...args) {
    return new Utcday(...args);
  }

  class Utcdate extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "timeUnit", "utcdate");
      if (args[0] !== undefined) set(this, "field", args[0]);
      if (args[1] !== undefined) set(this, "as", args[1]);
    }

    as(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeUnit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "timeUnit", value);
        return obj;
      } else {
        return get(this, "timeUnit");
      }
    }

    equals(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "equal", value);
        return obj;
      } else {
        return get(this, "equal");
      }
    }

    gte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gte", value);
        return obj;
      } else {
        return get(this, "gte");
      }
    }

    gt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gt", value);
        return obj;
      } else {
        return get(this, "gt");
      }
    }

    lte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lte", value);
        return obj;
      } else {
        return get(this, "lte");
      }
    }

    lt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lt", value);
        return obj;
      } else {
        return get(this, "lt");
      }
    }

    oneOf(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "oneOf", value);
        return obj;
      } else {
        return get(this, "oneOf");
      }
    }

    inRange(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "range", value);
        return obj;
      } else {
        return get(this, "range");
      }
    }

    valid(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "valid", value);
        return obj;
      } else {
        return get(this, "valid");
      }
    }

  }

  function utcdate(...args) {
    return new Utcdate(...args);
  }

  class Utchours extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "timeUnit", "utchours");
      if (args[0] !== undefined) set(this, "field", args[0]);
      if (args[1] !== undefined) set(this, "as", args[1]);
    }

    as(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeUnit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "timeUnit", value);
        return obj;
      } else {
        return get(this, "timeUnit");
      }
    }

    equals(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "equal", value);
        return obj;
      } else {
        return get(this, "equal");
      }
    }

    gte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gte", value);
        return obj;
      } else {
        return get(this, "gte");
      }
    }

    gt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gt", value);
        return obj;
      } else {
        return get(this, "gt");
      }
    }

    lte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lte", value);
        return obj;
      } else {
        return get(this, "lte");
      }
    }

    lt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lt", value);
        return obj;
      } else {
        return get(this, "lt");
      }
    }

    oneOf(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "oneOf", value);
        return obj;
      } else {
        return get(this, "oneOf");
      }
    }

    inRange(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "range", value);
        return obj;
      } else {
        return get(this, "range");
      }
    }

    valid(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "valid", value);
        return obj;
      } else {
        return get(this, "valid");
      }
    }

  }

  function utchours(...args) {
    return new Utchours(...args);
  }

  class Utcminutes extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "timeUnit", "utcminutes");
      if (args[0] !== undefined) set(this, "field", args[0]);
      if (args[1] !== undefined) set(this, "as", args[1]);
    }

    as(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeUnit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "timeUnit", value);
        return obj;
      } else {
        return get(this, "timeUnit");
      }
    }

    equals(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "equal", value);
        return obj;
      } else {
        return get(this, "equal");
      }
    }

    gte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gte", value);
        return obj;
      } else {
        return get(this, "gte");
      }
    }

    gt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gt", value);
        return obj;
      } else {
        return get(this, "gt");
      }
    }

    lte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lte", value);
        return obj;
      } else {
        return get(this, "lte");
      }
    }

    lt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lt", value);
        return obj;
      } else {
        return get(this, "lt");
      }
    }

    oneOf(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "oneOf", value);
        return obj;
      } else {
        return get(this, "oneOf");
      }
    }

    inRange(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "range", value);
        return obj;
      } else {
        return get(this, "range");
      }
    }

    valid(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "valid", value);
        return obj;
      } else {
        return get(this, "valid");
      }
    }

  }

  function utcminutes(...args) {
    return new Utcminutes(...args);
  }

  class Utcseconds extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "timeUnit", "utcseconds");
      if (args[0] !== undefined) set(this, "field", args[0]);
      if (args[1] !== undefined) set(this, "as", args[1]);
    }

    as(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeUnit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "timeUnit", value);
        return obj;
      } else {
        return get(this, "timeUnit");
      }
    }

    equals(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "equal", value);
        return obj;
      } else {
        return get(this, "equal");
      }
    }

    gte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gte", value);
        return obj;
      } else {
        return get(this, "gte");
      }
    }

    gt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gt", value);
        return obj;
      } else {
        return get(this, "gt");
      }
    }

    lte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lte", value);
        return obj;
      } else {
        return get(this, "lte");
      }
    }

    lt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lt", value);
        return obj;
      } else {
        return get(this, "lt");
      }
    }

    oneOf(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "oneOf", value);
        return obj;
      } else {
        return get(this, "oneOf");
      }
    }

    inRange(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "range", value);
        return obj;
      } else {
        return get(this, "range");
      }
    }

    valid(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "valid", value);
        return obj;
      } else {
        return get(this, "valid");
      }
    }

  }

  function utcseconds(...args) {
    return new Utcseconds(...args);
  }

  class Utcmilliseconds extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "timeUnit", "utcmilliseconds");
      if (args[0] !== undefined) set(this, "field", args[0]);
      if (args[1] !== undefined) set(this, "as", args[1]);
    }

    as(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeUnit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "timeUnit", value);
        return obj;
      } else {
        return get(this, "timeUnit");
      }
    }

    equals(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "equal", value);
        return obj;
      } else {
        return get(this, "equal");
      }
    }

    gte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gte", value);
        return obj;
      } else {
        return get(this, "gte");
      }
    }

    gt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gt", value);
        return obj;
      } else {
        return get(this, "gt");
      }
    }

    lte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lte", value);
        return obj;
      } else {
        return get(this, "lte");
      }
    }

    lt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lt", value);
        return obj;
      } else {
        return get(this, "lt");
      }
    }

    oneOf(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "oneOf", value);
        return obj;
      } else {
        return get(this, "oneOf");
      }
    }

    inRange(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "range", value);
        return obj;
      } else {
        return get(this, "range");
      }
    }

    valid(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "valid", value);
        return obj;
      } else {
        return get(this, "valid");
      }
    }

  }

  function utcmilliseconds(...args) {
    return new Utcmilliseconds(...args);
  }

  class Utcyearmonth extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "timeUnit", "utcyearmonth");
      if (args[0] !== undefined) set(this, "field", args[0]);
      if (args[1] !== undefined) set(this, "as", args[1]);
    }

    as(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeUnit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "timeUnit", value);
        return obj;
      } else {
        return get(this, "timeUnit");
      }
    }

    equals(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "equal", value);
        return obj;
      } else {
        return get(this, "equal");
      }
    }

    gte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gte", value);
        return obj;
      } else {
        return get(this, "gte");
      }
    }

    gt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gt", value);
        return obj;
      } else {
        return get(this, "gt");
      }
    }

    lte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lte", value);
        return obj;
      } else {
        return get(this, "lte");
      }
    }

    lt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lt", value);
        return obj;
      } else {
        return get(this, "lt");
      }
    }

    oneOf(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "oneOf", value);
        return obj;
      } else {
        return get(this, "oneOf");
      }
    }

    inRange(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "range", value);
        return obj;
      } else {
        return get(this, "range");
      }
    }

    valid(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "valid", value);
        return obj;
      } else {
        return get(this, "valid");
      }
    }

  }

  function utcyearmonth(...args) {
    return new Utcyearmonth(...args);
  }

  class UtcYQ extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "timeUnit", "utcyearquarter");
      if (args[0] !== undefined) set(this, "field", args[0]);
      if (args[1] !== undefined) set(this, "as", args[1]);
    }

    as(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeUnit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "timeUnit", value);
        return obj;
      } else {
        return get(this, "timeUnit");
      }
    }

    equals(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "equal", value);
        return obj;
      } else {
        return get(this, "equal");
      }
    }

    gte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gte", value);
        return obj;
      } else {
        return get(this, "gte");
      }
    }

    gt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gt", value);
        return obj;
      } else {
        return get(this, "gt");
      }
    }

    lte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lte", value);
        return obj;
      } else {
        return get(this, "lte");
      }
    }

    lt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lt", value);
        return obj;
      } else {
        return get(this, "lt");
      }
    }

    oneOf(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "oneOf", value);
        return obj;
      } else {
        return get(this, "oneOf");
      }
    }

    inRange(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "range", value);
        return obj;
      } else {
        return get(this, "range");
      }
    }

    valid(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "valid", value);
        return obj;
      } else {
        return get(this, "valid");
      }
    }

  }

  function utcYQ(...args) {
    return new UtcYQ(...args);
  }

  class UtcYQM extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "timeUnit", "utcyearquartermonth");
      if (args[0] !== undefined) set(this, "field", args[0]);
      if (args[1] !== undefined) set(this, "as", args[1]);
    }

    as(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeUnit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "timeUnit", value);
        return obj;
      } else {
        return get(this, "timeUnit");
      }
    }

    equals(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "equal", value);
        return obj;
      } else {
        return get(this, "equal");
      }
    }

    gte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gte", value);
        return obj;
      } else {
        return get(this, "gte");
      }
    }

    gt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gt", value);
        return obj;
      } else {
        return get(this, "gt");
      }
    }

    lte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lte", value);
        return obj;
      } else {
        return get(this, "lte");
      }
    }

    lt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lt", value);
        return obj;
      } else {
        return get(this, "lt");
      }
    }

    oneOf(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "oneOf", value);
        return obj;
      } else {
        return get(this, "oneOf");
      }
    }

    inRange(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "range", value);
        return obj;
      } else {
        return get(this, "range");
      }
    }

    valid(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "valid", value);
        return obj;
      } else {
        return get(this, "valid");
      }
    }

  }

  function utcYQM(...args) {
    return new UtcYQM(...args);
  }

  class UtcYM extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "timeUnit", "utcyearmonth");
      if (args[0] !== undefined) set(this, "field", args[0]);
      if (args[1] !== undefined) set(this, "as", args[1]);
    }

    as(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeUnit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "timeUnit", value);
        return obj;
      } else {
        return get(this, "timeUnit");
      }
    }

    equals(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "equal", value);
        return obj;
      } else {
        return get(this, "equal");
      }
    }

    gte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gte", value);
        return obj;
      } else {
        return get(this, "gte");
      }
    }

    gt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gt", value);
        return obj;
      } else {
        return get(this, "gt");
      }
    }

    lte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lte", value);
        return obj;
      } else {
        return get(this, "lte");
      }
    }

    lt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lt", value);
        return obj;
      } else {
        return get(this, "lt");
      }
    }

    oneOf(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "oneOf", value);
        return obj;
      } else {
        return get(this, "oneOf");
      }
    }

    inRange(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "range", value);
        return obj;
      } else {
        return get(this, "range");
      }
    }

    valid(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "valid", value);
        return obj;
      } else {
        return get(this, "valid");
      }
    }

  }

  function utcYM(...args) {
    return new UtcYM(...args);
  }

  class UtcYMD extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "timeUnit", "utcyearmonthdate");
      if (args[0] !== undefined) set(this, "field", args[0]);
      if (args[1] !== undefined) set(this, "as", args[1]);
    }

    as(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeUnit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "timeUnit", value);
        return obj;
      } else {
        return get(this, "timeUnit");
      }
    }

    equals(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "equal", value);
        return obj;
      } else {
        return get(this, "equal");
      }
    }

    gte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gte", value);
        return obj;
      } else {
        return get(this, "gte");
      }
    }

    gt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gt", value);
        return obj;
      } else {
        return get(this, "gt");
      }
    }

    lte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lte", value);
        return obj;
      } else {
        return get(this, "lte");
      }
    }

    lt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lt", value);
        return obj;
      } else {
        return get(this, "lt");
      }
    }

    oneOf(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "oneOf", value);
        return obj;
      } else {
        return get(this, "oneOf");
      }
    }

    inRange(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "range", value);
        return obj;
      } else {
        return get(this, "range");
      }
    }

    valid(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "valid", value);
        return obj;
      } else {
        return get(this, "valid");
      }
    }

  }

  function utcYMD(...args) {
    return new UtcYMD(...args);
  }

  class UtcYMDH extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "timeUnit", "utcyearmonthdatehours");
      if (args[0] !== undefined) set(this, "field", args[0]);
      if (args[1] !== undefined) set(this, "as", args[1]);
    }

    as(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeUnit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "timeUnit", value);
        return obj;
      } else {
        return get(this, "timeUnit");
      }
    }

    equals(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "equal", value);
        return obj;
      } else {
        return get(this, "equal");
      }
    }

    gte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gte", value);
        return obj;
      } else {
        return get(this, "gte");
      }
    }

    gt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gt", value);
        return obj;
      } else {
        return get(this, "gt");
      }
    }

    lte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lte", value);
        return obj;
      } else {
        return get(this, "lte");
      }
    }

    lt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lt", value);
        return obj;
      } else {
        return get(this, "lt");
      }
    }

    oneOf(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "oneOf", value);
        return obj;
      } else {
        return get(this, "oneOf");
      }
    }

    inRange(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "range", value);
        return obj;
      } else {
        return get(this, "range");
      }
    }

    valid(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "valid", value);
        return obj;
      } else {
        return get(this, "valid");
      }
    }

  }

  function utcYMDH(...args) {
    return new UtcYMDH(...args);
  }

  class UtcYMDHM extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "timeUnit", "utcyearmonthdatehoursminutes");
      if (args[0] !== undefined) set(this, "field", args[0]);
      if (args[1] !== undefined) set(this, "as", args[1]);
    }

    as(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeUnit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "timeUnit", value);
        return obj;
      } else {
        return get(this, "timeUnit");
      }
    }

    equals(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "equal", value);
        return obj;
      } else {
        return get(this, "equal");
      }
    }

    gte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gte", value);
        return obj;
      } else {
        return get(this, "gte");
      }
    }

    gt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gt", value);
        return obj;
      } else {
        return get(this, "gt");
      }
    }

    lte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lte", value);
        return obj;
      } else {
        return get(this, "lte");
      }
    }

    lt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lt", value);
        return obj;
      } else {
        return get(this, "lt");
      }
    }

    oneOf(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "oneOf", value);
        return obj;
      } else {
        return get(this, "oneOf");
      }
    }

    inRange(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "range", value);
        return obj;
      } else {
        return get(this, "range");
      }
    }

    valid(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "valid", value);
        return obj;
      } else {
        return get(this, "valid");
      }
    }

  }

  function utcYMDHM(...args) {
    return new UtcYMDHM(...args);
  }

  class UtcYMDHMS extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "timeUnit", "utcyearmonthdatehoursminutesseconds");
      if (args[0] !== undefined) set(this, "field", args[0]);
      if (args[1] !== undefined) set(this, "as", args[1]);
    }

    as(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeUnit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "timeUnit", value);
        return obj;
      } else {
        return get(this, "timeUnit");
      }
    }

    equals(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "equal", value);
        return obj;
      } else {
        return get(this, "equal");
      }
    }

    gte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gte", value);
        return obj;
      } else {
        return get(this, "gte");
      }
    }

    gt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gt", value);
        return obj;
      } else {
        return get(this, "gt");
      }
    }

    lte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lte", value);
        return obj;
      } else {
        return get(this, "lte");
      }
    }

    lt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lt", value);
        return obj;
      } else {
        return get(this, "lt");
      }
    }

    oneOf(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "oneOf", value);
        return obj;
      } else {
        return get(this, "oneOf");
      }
    }

    inRange(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "range", value);
        return obj;
      } else {
        return get(this, "range");
      }
    }

    valid(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "valid", value);
        return obj;
      } else {
        return get(this, "valid");
      }
    }

  }

  function utcYMDHMS(...args) {
    return new UtcYMDHMS(...args);
  }

  class UtcQM extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "timeUnit", "utcquartermonth");
      if (args[0] !== undefined) set(this, "field", args[0]);
      if (args[1] !== undefined) set(this, "as", args[1]);
    }

    as(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeUnit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "timeUnit", value);
        return obj;
      } else {
        return get(this, "timeUnit");
      }
    }

    equals(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "equal", value);
        return obj;
      } else {
        return get(this, "equal");
      }
    }

    gte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gte", value);
        return obj;
      } else {
        return get(this, "gte");
      }
    }

    gt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gt", value);
        return obj;
      } else {
        return get(this, "gt");
      }
    }

    lte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lte", value);
        return obj;
      } else {
        return get(this, "lte");
      }
    }

    lt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lt", value);
        return obj;
      } else {
        return get(this, "lt");
      }
    }

    oneOf(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "oneOf", value);
        return obj;
      } else {
        return get(this, "oneOf");
      }
    }

    inRange(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "range", value);
        return obj;
      } else {
        return get(this, "range");
      }
    }

    valid(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "valid", value);
        return obj;
      } else {
        return get(this, "valid");
      }
    }

  }

  function utcQM(...args) {
    return new UtcQM(...args);
  }

  class UtcMD extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "timeUnit", "utcmonthdate");
      if (args[0] !== undefined) set(this, "field", args[0]);
      if (args[1] !== undefined) set(this, "as", args[1]);
    }

    as(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeUnit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "timeUnit", value);
        return obj;
      } else {
        return get(this, "timeUnit");
      }
    }

    equals(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "equal", value);
        return obj;
      } else {
        return get(this, "equal");
      }
    }

    gte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gte", value);
        return obj;
      } else {
        return get(this, "gte");
      }
    }

    gt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gt", value);
        return obj;
      } else {
        return get(this, "gt");
      }
    }

    lte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lte", value);
        return obj;
      } else {
        return get(this, "lte");
      }
    }

    lt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lt", value);
        return obj;
      } else {
        return get(this, "lt");
      }
    }

    oneOf(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "oneOf", value);
        return obj;
      } else {
        return get(this, "oneOf");
      }
    }

    inRange(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "range", value);
        return obj;
      } else {
        return get(this, "range");
      }
    }

    valid(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "valid", value);
        return obj;
      } else {
        return get(this, "valid");
      }
    }

  }

  function utcMD(...args) {
    return new UtcMD(...args);
  }

  class UtcMDH extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "timeUnit", "utcmonthdatehours");
      if (args[0] !== undefined) set(this, "field", args[0]);
      if (args[1] !== undefined) set(this, "as", args[1]);
    }

    as(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeUnit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "timeUnit", value);
        return obj;
      } else {
        return get(this, "timeUnit");
      }
    }

    equals(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "equal", value);
        return obj;
      } else {
        return get(this, "equal");
      }
    }

    gte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gte", value);
        return obj;
      } else {
        return get(this, "gte");
      }
    }

    gt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gt", value);
        return obj;
      } else {
        return get(this, "gt");
      }
    }

    lte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lte", value);
        return obj;
      } else {
        return get(this, "lte");
      }
    }

    lt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lt", value);
        return obj;
      } else {
        return get(this, "lt");
      }
    }

    oneOf(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "oneOf", value);
        return obj;
      } else {
        return get(this, "oneOf");
      }
    }

    inRange(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "range", value);
        return obj;
      } else {
        return get(this, "range");
      }
    }

    valid(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "valid", value);
        return obj;
      } else {
        return get(this, "valid");
      }
    }

  }

  function utcMDH(...args) {
    return new UtcMDH(...args);
  }

  class UtcHM extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "timeUnit", "utchoursminutes");
      if (args[0] !== undefined) set(this, "field", args[0]);
      if (args[1] !== undefined) set(this, "as", args[1]);
    }

    as(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeUnit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "timeUnit", value);
        return obj;
      } else {
        return get(this, "timeUnit");
      }
    }

    equals(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "equal", value);
        return obj;
      } else {
        return get(this, "equal");
      }
    }

    gte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gte", value);
        return obj;
      } else {
        return get(this, "gte");
      }
    }

    gt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gt", value);
        return obj;
      } else {
        return get(this, "gt");
      }
    }

    lte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lte", value);
        return obj;
      } else {
        return get(this, "lte");
      }
    }

    lt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lt", value);
        return obj;
      } else {
        return get(this, "lt");
      }
    }

    oneOf(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "oneOf", value);
        return obj;
      } else {
        return get(this, "oneOf");
      }
    }

    inRange(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "range", value);
        return obj;
      } else {
        return get(this, "range");
      }
    }

    valid(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "valid", value);
        return obj;
      } else {
        return get(this, "valid");
      }
    }

  }

  function utcHM(...args) {
    return new UtcHM(...args);
  }

  class UtcHMS extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "timeUnit", "utchoursminutesseconds");
      if (args[0] !== undefined) set(this, "field", args[0]);
      if (args[1] !== undefined) set(this, "as", args[1]);
    }

    as(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeUnit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "timeUnit", value);
        return obj;
      } else {
        return get(this, "timeUnit");
      }
    }

    equals(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "equal", value);
        return obj;
      } else {
        return get(this, "equal");
      }
    }

    gte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gte", value);
        return obj;
      } else {
        return get(this, "gte");
      }
    }

    gt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gt", value);
        return obj;
      } else {
        return get(this, "gt");
      }
    }

    lte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lte", value);
        return obj;
      } else {
        return get(this, "lte");
      }
    }

    lt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lt", value);
        return obj;
      } else {
        return get(this, "lt");
      }
    }

    oneOf(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "oneOf", value);
        return obj;
      } else {
        return get(this, "oneOf");
      }
    }

    inRange(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "range", value);
        return obj;
      } else {
        return get(this, "range");
      }
    }

    valid(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "valid", value);
        return obj;
      } else {
        return get(this, "valid");
      }
    }

  }

  function utcHMS(...args) {
    return new UtcHMS(...args);
  }

  class UtcMS extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "timeUnit", "utcminutesseconds");
      if (args[0] !== undefined) set(this, "field", args[0]);
      if (args[1] !== undefined) set(this, "as", args[1]);
    }

    as(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeUnit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "timeUnit", value);
        return obj;
      } else {
        return get(this, "timeUnit");
      }
    }

    equals(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "equal", value);
        return obj;
      } else {
        return get(this, "equal");
      }
    }

    gte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gte", value);
        return obj;
      } else {
        return get(this, "gte");
      }
    }

    gt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gt", value);
        return obj;
      } else {
        return get(this, "gt");
      }
    }

    lte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lte", value);
        return obj;
      } else {
        return get(this, "lte");
      }
    }

    lt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lt", value);
        return obj;
      } else {
        return get(this, "lt");
      }
    }

    oneOf(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "oneOf", value);
        return obj;
      } else {
        return get(this, "oneOf");
      }
    }

    inRange(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "range", value);
        return obj;
      } else {
        return get(this, "range");
      }
    }

    valid(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "valid", value);
        return obj;
      } else {
        return get(this, "valid");
      }
    }

  }

  function utcMS(...args) {
    return new UtcMS(...args);
  }

  class UtcSMS extends BaseObject {

    constructor(...args) {
      super();
      init(this);
      set(this, "timeUnit", "utcsecondsmilliseconds");
      if (args[0] !== undefined) set(this, "field", args[0]);
      if (args[1] !== undefined) set(this, "as", args[1]);
    }

    as(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "as", value);
        return obj;
      } else {
        return get(this, "as");
      }
    }

    field(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        return obj;
      } else {
        return get(this, "field");
      }
    }

    timeUnit(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "timeUnit", value);
        return obj;
      } else {
        return get(this, "timeUnit");
      }
    }

    equals(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "equal", value);
        return obj;
      } else {
        return get(this, "equal");
      }
    }

    gte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gte", value);
        return obj;
      } else {
        return get(this, "gte");
      }
    }

    gt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "gt", value);
        return obj;
      } else {
        return get(this, "gt");
      }
    }

    lte(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lte", value);
        return obj;
      } else {
        return get(this, "lte");
      }
    }

    lt(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "lt", value);
        return obj;
      } else {
        return get(this, "lt");
      }
    }

    oneOf(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "oneOf", value);
        return obj;
      } else {
        return get(this, "oneOf");
      }
    }

    inRange(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "range", value);
        return obj;
      } else {
        return get(this, "range");
      }
    }

    valid(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "valid", value);
        return obj;
      } else {
        return get(this, "valid");
      }
    }

  }

  function utcSMS(...args) {
    return new UtcSMS(...args);
  }

  exports.aggregate = aggregate;
  exports.and = and;
  exports.angle = angle;
  exports.argmax = argmax;
  exports.argmin = argmin;
  exports.average = average;
  exports.bin = bin;
  exports.calculate = calculate;
  exports.checkbox = checkbox;
  exports.ci0 = ci0;
  exports.ci1 = ci1;
  exports.color = color;
  exports.column = column;
  exports.concat = concat;
  exports.configInterval = configInterval;
  exports.configPoint = configPoint;
  exports.count = count;
  exports.csv = csv;
  exports.csvFormat = csvFormat;
  exports.cume_dist = cume_dist;
  exports.data = data;
  exports.date = date;
  exports.day = day;
  exports.dense_rank = dense_rank;
  exports.density = density;
  exports.description = description;
  exports.detail = detail;
  exports.distinct = distinct;
  exports.dsv = dsv;
  exports.dsvFormat = dsvFormat;
  exports.encoding = encoding;
  exports.expr = expr;
  exports.facet = facet;
  exports.field = field;
  exports.fieldN = fieldN;
  exports.fieldO = fieldO;
  exports.fieldQ = fieldQ;
  exports.fieldT = fieldT;
  exports.fill = fill;
  exports.fillOpacity = fillOpacity;
  exports.filter = filter;
  exports.first_value = first_value;
  exports.flatten = flatten;
  exports.fold = fold;
  exports.graticule = graticule;
  exports.groupby = groupby;
  exports.hconcat = hconcat;
  exports.hours = hours;
  exports.href = href;
  exports.impute = impute;
  exports.inlineData = inlineData;
  exports.join = join;
  exports.joinaggregate = joinaggregate;
  exports.json = json;
  exports.jsonFormat = jsonFormat;
  exports.key = key;
  exports.lag = lag;
  exports.last_value = last_value;
  exports.latitude = latitude;
  exports.latitude2 = latitude2;
  exports.layer = layer;
  exports.lead = lead;
  exports.loess = loess;
  exports.longitude = longitude;
  exports.longitude2 = longitude2;
  exports.lookup = lookup;
  exports.lookupData = lookupData;
  exports.lookupSelection = lookupSelection;
  exports.mark = mark;
  exports.markArc = markArc;
  exports.markArea = markArea;
  exports.markBar = markBar;
  exports.markBoxplot = markBoxplot;
  exports.markCircle = markCircle;
  exports.markErrorband = markErrorband;
  exports.markErrorbar = markErrorbar;
  exports.markGeoshape = markGeoshape;
  exports.markImage = markImage;
  exports.markLine = markLine;
  exports.markPoint = markPoint;
  exports.markRect = markRect;
  exports.markRule = markRule;
  exports.markSquare = markSquare;
  exports.markText = markText;
  exports.markTick = markTick;
  exports.markTrail = markTrail;
  exports.max = max;
  exports.mean = mean;
  exports.median = median;
  exports.menu = menu;
  exports.milliseconds = milliseconds;
  exports.min = min;
  exports.minutes = minutes;
  exports.missing = missing;
  exports.month = month;
  exports.not = not;
  exports.nth_value = nth_value;
  exports.ntile = ntile;
  exports.opacity = opacity;
  exports.or = or;
  exports.order = order;
  exports.param = param;
  exports.percent_rank = percent_rank;
  exports.pivot = pivot;
  exports.product = product;
  exports.projection = projection;
  exports.q1 = q1;
  exports.q3 = q3;
  exports.quantile = quantile;
  exports.quarter = quarter;
  exports.radio = radio;
  exports.radius = radius;
  exports.radius2 = radius2;
  exports.rank = rank;
  exports.register = register;
  exports.regression = regression;
  exports.render = render;
  exports.repeat = repeat;
  exports.row = row;
  exports.row_number = row_number;
  exports.sample = sample;
  exports.seconds = seconds;
  exports.selectInterval = selectInterval;
  exports.selectMulti = selectMulti;
  exports.selectPoint = selectPoint;
  exports.selectSingle = selectSingle;
  exports.sequence = sequence;
  exports.shape = shape;
  exports.size = size;
  exports.slider = slider;
  exports.spec = spec;
  exports.sphere = sphere;
  exports.stack = stack;
  exports.stderr = stderr;
  exports.stdev = stdev;
  exports.stdevp = stdevp;
  exports.stroke = stroke;
  exports.strokeDash = strokeDash;
  exports.strokeOpacity = strokeOpacity;
  exports.strokeWidth = strokeWidth;
  exports.sum = sum;
  exports.text = text;
  exports.theta = theta;
  exports.theta2 = theta2;
  exports.timeHM = timeHM;
  exports.timeHMS = timeHMS;
  exports.timeMD = timeMD;
  exports.timeMDH = timeMDH;
  exports.timeMS = timeMS;
  exports.timeQM = timeQM;
  exports.timeSMS = timeSMS;
  exports.timeUnit = timeUnit;
  exports.timeYM = timeYM;
  exports.timeYMD = timeYMD;
  exports.timeYMDH = timeYMDH;
  exports.timeYMDHM = timeYMDHM;
  exports.timeYMDHMS = timeYMDHMS;
  exports.timeYQ = timeYQ;
  exports.timeYQM = timeYQM;
  exports.tooltip = tooltip;
  exports.topojson = topojson;
  exports.topojsonFormat = topojsonFormat;
  exports.tsv = tsv;
  exports.tsvFormat = tsvFormat;
  exports.url = url;
  exports.urlData = urlData;
  exports.utcHM = utcHM;
  exports.utcHMS = utcHMS;
  exports.utcMD = utcMD;
  exports.utcMDH = utcMDH;
  exports.utcMS = utcMS;
  exports.utcQM = utcQM;
  exports.utcSMS = utcSMS;
  exports.utcYM = utcYM;
  exports.utcYMD = utcYMD;
  exports.utcYMDH = utcYMDH;
  exports.utcYMDHM = utcYMDHM;
  exports.utcYMDHMS = utcYMDHMS;
  exports.utcYQ = utcYQ;
  exports.utcYQM = utcYQM;
  exports.utcdate = utcdate;
  exports.utcday = utcday;
  exports.utchours = utchours;
  exports.utcmilliseconds = utcmilliseconds;
  exports.utcminutes = utcminutes;
  exports.utcmonth = utcmonth;
  exports.utcquarter = utcquarter;
  exports.utcseconds = utcseconds;
  exports.utcyear = utcyear;
  exports.utcyearmonth = utcyearmonth;
  exports.valid = valid;
  exports.value = value;
  exports.variance = variance;
  exports.variancep = variancep;
  exports.vconcat = vconcat;
  exports.window = window;
  exports.x = x;
  exports.x2 = x2;
  exports.xError = xError;
  exports.xError2 = xError2;
  exports.y = y;
  exports.y2 = y2;
  exports.yError = yError;
  exports.yError2 = yError2;
  exports.year = year;
  exports.yearmonth = yearmonth;

  Object.defineProperty(exports, '__esModule', { value: true });

}));
